metadata:
  name: go-cicd-gitops
  namespace: public-resource
  selfLink: >-
    /apis/argoproj.io/v1alpha1/namespaces/public-resource/workflowtemplates/go-cicd-gitops
  uid: c87f6713-6ff5-4407-8fc6-519f9909f370
  resourceVersion: "2091078457"
  generation: 15
  creationTimestamp: "2023-08-16T09:28:18Z"
  managedFields:
    - manager: kubectl
      operation: Update
      apiVersion: argoproj.io/v1alpha1
      time: "2023-08-10T05:58:51Z"
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations: {}
    - manager: kubectl-client-side-apply
      operation: Update
      apiVersion: argoproj.io/v1alpha1
      time: "2023-08-11T02:45:11Z"
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:kubectl.kubernetes.io/last-applied-configuration: {}
    - manager: argo
      operation: Update
      apiVersion: argoproj.io/v1alpha1
      time: "2023-08-17T02:16:55Z"
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:arguments: {}
          f:serviceAccountName: {}
          f:templates: {}
spec:
  templates:
    - name: main
      inputs: {}
      outputs: {}
      metadata: {}
      dag:
        tasks:
          - name: clone
            template: clone
            arguments:
              parameters:
                - name: repo
                  value: "{{workflow.parameters.repo}}"
                - name: branch
                  value: "{{workflow.parameters.branch}}"
          - name: image
            template: image
            arguments:
              parameters:
                - name: path
                  value: "{{workflow.parameters.path}}"
                - name: image
                  value: "{{workflow.parameters.image}}"
                - name: tag
                  value: "{{tasks.clone.outputs.parameters.tag}}"
            depends: clone
          - name: deploy
            template: deploy
            arguments:
              parameters:
                - name: repo
                  value: "{{workflow.parameters.cd-repo}}"
                - name: branch
                  value: "{{workflow.parameters.cd-branch}}"
                - name: path
                  value: "{{workflow.parameters.cd-path}}"
                - name: tag
                  value: "{{tasks.clone.outputs.parameters.tag}}"
            depends: image
    - name: clone
      inputs:
        parameters:
          - name: repo
          - name: branch
      outputs:
        parameters:
          - name: tag
            valueFrom:
              path: /tmp/tag
      metadata: {}
      script:
        name: ""
        image: dockerhub.mlops.jd.com/ai-platform/git-utils:latest
        command:
          - sh
        workingDir: /{{workflow.parameters.path}}
        resources: {}
        volumeMounts:
          - name: git-account-config
            mountPath: /ssh
          - name: work
            mountPath: /{{workflow.parameters.path}}
        source: >
          ls -Al /ssh

          git clone --depth 1 -b {{inputs.parameters.branch}} --single-branch
          {{inputs.parameters.repo}} . 

          git config --global --add safe.directory /{{workflow.parameters.path}}

          git rev-parse --short HEAD > /tmp/tag && cat /tmp/tag
      volumes:
        - name: git-account-config
          secret:
            secretName: git-account-secret
    - name: image
      inputs:
        parameters:
          - name: image
          - name: tag
      outputs: {}
      metadata: {}
      container:
        name: ""
        image: dockerhub.mlops.jd.com/tektoncd/executor:latest
        command:
          - /kaniko/executor
        args:
          - "--context=dir:////{{workflow.parameters.path}}"
          - "--dockerfile=/work/deployment/Dockerfile"
          - >-
            --destination={{workflow.parameters.image}}:{{inputs.parameters.tag}}
          - "--skip-tls-verify-pull=true"
          - "--insecure-pull=true"
          - "--skip-tls-verify=true"
          - "--insecure=true"
        workingDir: /{{workflow.parameters.path}}
        resources: {}
        volumeMounts:
          - name: docker-config
            mountPath: /kaniko/.docker/
          - name: work
            mountPath: /{{workflow.parameters.path}}
      volumes:
        - name: docker-config
          secret:
            secretName: docker-secret
    - name: deploy
      inputs:
        parameters:
          - name: repo
          - name: branch
          - name: path
          - name: tag
      outputs: {}
      metadata: {}
      script:
        name: ""
        image: dockerhub.mlops.jd.com/ai-platform/git-utils:latest
        command:
          - sh
        workingDir: /{{workflow.parameters.path}}
        resources: {}
        volumeMounts:
          - name: git-account-config
            mountPath: /ssh
        source: >
          ls -Al /ssh

          cat /ssh/git-account-config

          git clone --depth 1 -b {{inputs.parameters.branch}} --single-branch
          {{inputs.parameters.repo}} . 

          git config --global --add safe.directory .

          git config user.name org.mlops.support1

          git config user.email org.mlops.support1@jd.com

          cd {{inputs.parameters.path}}

          sed -i "s/newTag: .*/newTag: {{inputs.parameters.tag}}/g"
          kustomization.yaml

          git add --all

          git commit -m "update image tag"

          git push origin {{inputs.parameters.branch}}
      volumes:
        - name: git-account-config
          secret:
            secretName: git-account-secret
  entrypoint: main
  arguments:
    parameters:
      - name: repo
        value: git@coding.jd.com:liudawei47/CronDeleteJob.git
      - name: branch
        value: master
      - name: path
        value: work
      - name: image
        value: dockerhub.mlops.jd.com/ai-platform/cron-delete-job
      - name: cd-repo
        value: git@coding.jd.com:jdt-ai-platform/AIPlatformDeploy.git
      - name: cd-branch
        value: feature/resource-pruner-cron
      - name: cd-path
        value: deploy/resource-pruner
  serviceAccountName: go-cicd
  volumeClaimTemplates:
    - metadata:
        name: work
        creationTimestamp: null
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 64Mi
      status: {}
