import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,d as t}from"./app-9107e99b.js";const e={},p=t(`<h1 id="java-17" tabindex="-1"><a class="header-anchor" href="#java-17" aria-hidden="true">#</a> Java 17</h1><h2 id="switch" tabindex="-1"><a class="header-anchor" href="#switch" aria-hidden="true">#</a> Switch</h2><h3 id="表达式扩展" tabindex="-1"><a class="header-anchor" href="#表达式扩展" aria-hidden="true">#</a> 表达式扩展</h3><h3 id="模式匹配" tabindex="-1"><a class="header-anchor" href="#模式匹配" aria-hidden="true">#</a> 模式匹配</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">formatterPatternSwitch</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token keyword">null</span> <span class="token operator">-</span><span class="token string">&quot;null&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Integer</span> i<span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;int %d&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Long</span> l <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;long %d&quot;</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Double</span> d <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;double %f&quot;</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">String</span> s <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;String %s&quot;</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span> <span class="token operator">-&gt;</span> o<span class="token punctuation">.</span><span class="token function">getclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;&quot;</span><span class="token operator">+</span>o<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Instanceof 模式匹配</p><h2 id="gc" tabindex="-1"><a class="header-anchor" href="#gc" aria-hidden="true">#</a> GC</h2><h3 id="删除-cms-垃圾回收器" tabindex="-1"><a class="header-anchor" href="#删除-cms-垃圾回收器" aria-hidden="true">#</a> 删除 CMS 垃圾回收器</h3><blockquote><p>Java 14</p></blockquote><p>CMS 是老年代垃圾回收算法，通过标记-清除的方式进行内存回收，在内存回收过程中能够与用户线程并行执行。CMS 回收器可以与 Serial 回收器和 Parallel New 回收器搭配使用，CMS 主要通过并发的方式，适当减少系统的吞吐量以达到追求响应速度的目的，比较适合在追求 GC 速度的服务器上使用。</p><p>Java 9 中，就已经决定放弃使用 CMS 回收器了，而这次在 Java 14 中，是继之前 Java 9 中放弃使用 CMS 之后，彻底将其禁用，并删除与 CMS 有关的选项，同时清除与 CMS 有关的文档内容，至此曾经辉煌一度的 CMS 回收器，也将成为历史。</p><h3 id="g1-的-numa-可识别内存分配" tabindex="-1"><a class="header-anchor" href="#g1-的-numa-可识别内存分配" aria-hidden="true">#</a> G1 的 NUMA 可识别内存分配</h3><blockquote><p>Java 14</p></blockquote><h3 id="弃用-parallelscavenge-和-serialold-gc-的组合使用" tabindex="-1"><a class="header-anchor" href="#弃用-parallelscavenge-和-serialold-gc-的组合使用" aria-hidden="true">#</a> <strong>弃用 ParallelScavenge 和 SerialOld GC 的组合使用</strong></h3><h3 id="禁用偏向锁定" tabindex="-1"><a class="header-anchor" href="#禁用偏向锁定" aria-hidden="true">#</a> <strong>禁用偏向锁定</strong></h3><blockquote><p>Java 15</p></blockquote>`,16),o=[p];function c(l,i){return n(),s("div",null,o)}const d=a(e,[["render",c],["__file","java17.html.vue"]]);export{d as default};
