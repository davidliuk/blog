import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as t,o as i}from"./app-B6s9NXTg.js";const e={};function l(p,s){return i(),n("div",null,s[0]||(s[0]=[t(`<h1 id="body-animation" tabindex="-1"><a class="header-anchor" href="#body-animation"><span>Body Animation</span></a></h1><ul><li>Main Approaches to Animation</li><li>Motion Editing Techniques</li><li>Arc Length Parameterization</li></ul><h3 id="keyframe" tabindex="-1"><a class="header-anchor" href="#keyframe"><span>Keyframe</span></a></h3><h3 id="animation" tabindex="-1"><a class="header-anchor" href="#animation"><span>Animation</span></a></h3><p>Animation=Post(time)</p><p>Collections of motion curves</p><ul><li>Single degree of freedom(DOF)</li><li>Single Joint (up to 6 DOF) <ul><li>3 rotation</li><li>3 translation (if root or changing bone lengths)</li></ul></li><li>Entire body</li></ul><p>Motion curve representation</p><ul><li>Usually cubic splines <ul><li>Bezier (Catmul-Rom) splines</li><li>B-Splines</li></ul></li></ul><h3 id="main-approaches-to-animation" tabindex="-1"><a class="header-anchor" href="#main-approaches-to-animation"><span>Main Approaches to Animation</span></a></h3><p>Keyframe</p><ul><li><p>Key poses specified at selected points in time</p></li><li><p>Spline curves used to interpolate body position and orientation between key poses</p></li></ul><p>Mocap</p><ul><li><p>motion data representing position of root and joint angles as a function of time</p><ul><li>No splines -&gt; every frame a key</li></ul></li><li><p>Usually generated by capturing a live actor’s performance</p></li></ul><p>Procedural</p><ul><li><p>IK-based (Ubisoft)</p></li><li><p>Optimization-based</p></li><li><p>Physically-based (Ragdoll)</p><ul><li>Motions generated based on the law of physics</li></ul></li></ul><hr><h3 id="pose-space" tabindex="-1"><a class="header-anchor" href="#pose-space"><span>Pose Space</span></a></h3><h3 id="channels" tabindex="-1"><a class="header-anchor" href="#channels"><span>Channels</span></a></h3><p>Many animation systems typically separate the n-dimensional animation into 1-dimensional curves (one for each DOF) called “Channels”</p><ul><li>a channel typically stores the value of a scalar function over some 1D domain (time, distance, health, etc).</li><li>Can be a joint angle or arbitrary parameter value (such as mass)</li><li>normally refers to “scripted” data for a DOF <ul><li>does not refer to the more general case of a DOF changing over time due to physics, procedural animation, etc.</li></ul></li></ul><p>IK can change length of link</p><p>Array of channels</p><ul><li><p>An animation can be stored as an array of channels</p></li><li><p>an animation is stored as a 2D array of floats (NumDOFs x NumFrames)</p></li></ul><p>Array of Poses</p><ul><li>An alternative way to store an animation is as an array of poses</li><li>This also forms a 2D array of floats (NumDOFs x NumFrames)</li></ul><h3 id="poses-vs-channels" tabindex="-1"><a class="header-anchor" href="#poses-vs-channels"><span>Poses vs. Channels</span></a></h3><p>Which is better</p><ul><li>Array of poses is great for playing back relatively simple animations that need maximum performance. This is often the case in many video games</li><li>Array of channels is used when flexibility is important or generality is valued over raw performance</li></ul><p>The bottom line:</p><ul><li>Poses are faster</li><li>Channels are more flexible and can potentially use less memory</li></ul><h2 id="main-editing-techniques" tabindex="-1"><a class="header-anchor" href="#main-editing-techniques"><span>Main Editing Techniques</span></a></h2><ul><li>Interactive Posing</li><li>Adding constraints <ul><li>Position</li><li>Orientation</li></ul></li><li>Optimizing motion over a sequence of poses</li></ul><h3 id="warp" tabindex="-1"><a class="header-anchor" href="#warp"><span>Warp</span></a></h3><p><strong>Change Playback speed</strong></p><p>Given motion curve <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">m(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>=</mo><mi>h</mi><mo stretchy="false">(</mo><mi>τ</mi><mo stretchy="false">)</mo><mo>=</mo><mi>s</mi><mo>⋅</mo><mi>τ</mi></mrow><annotation encoding="application/x-tex">t=h(\\tau)=s\\cdot\\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>τ</mi></mrow><annotation encoding="application/x-tex">\\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span> is the new independent variable (i.e. normal time)</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span></span></span></span> controls the speed of motion</p><ul><li>To speed up motion adjust time and/or spline knots <ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>=</mo><mi>h</mi><mo stretchy="false">(</mo><mi>τ</mi><mo stretchy="false">)</mo><mo>=</mo><mi>s</mi><mo>⋅</mo><mi>τ</mi></mrow><annotation encoding="application/x-tex">t=h(\\tau)=s\\cdot\\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span> where s &gt; 1</li></ul></li><li>To slow down motion adjust time and/or spline knots <ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>=</mo><mi>h</mi><mo stretchy="false">(</mo><mi>τ</mi><mo stretchy="false">)</mo><mo>=</mo><mi>s</mi><mo>⋅</mo><mi>τ</mi></mrow><annotation encoding="application/x-tex">t=h(\\tau)=s\\cdot\\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span></span></span></span> where 0 &lt; s &lt; 1</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/davidliuk/images@master/blog/image-20241107144808313.png" alt="image-20241107144808313" loading="lazy"></p><h3 id="blending" tabindex="-1"><a class="header-anchor" href="#blending"><span>Blending</span></a></h3><p><strong>blend two animation (lerp)</strong></p><p>Allows two motion curves m1(t) and m2(t) to be interpolated</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo stretchy="false">(</mo><msub><mi>t</mi><mi>k</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>α</mi><mo stretchy="false">)</mo><msub><mi>m</mi><mn>1</mn></msub><mo stretchy="false">(</mo><msub><mi>t</mi><mi>k</mi></msub><mo stretchy="false">)</mo><mo>+</mo><mi>α</mi><msub><mi>m</mi><mn>2</mn></msub><mo stretchy="false">(</mo><msub><mi>t</mi><mi>k</mi></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>α</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">m(t_k)=(1-\\alpha)m_1(t_k)+\\alpha m_2(t_k),\\alpha\\in[0,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span></p><p><img src="https://cdn.jsdelivr.net/gh/davidliuk/images@master/blog/image-20241107144923215.png" alt="image-20241107144923215" loading="lazy"></p><h3 id="layering-compositing" tabindex="-1"><a class="header-anchor" href="#layering-compositing"><span>Layering (compositing)</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/davidliuk/images@master/blog/image-20241107145323987.png" alt="image-20241107145323987" loading="lazy"></p><h3 id="cross-dissolve" tabindex="-1"><a class="header-anchor" href="#cross-dissolve"><span>Cross Dissolve</span></a></h3><p><strong>transition from one animation to another (lerp)</strong></p><blockquote><p>linear blend</p></blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>α</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><msub><mi>m</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>+</mo><mi>α</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><msub><mi>m</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">m(t)=(1-\\alpha(t))m_1(t)+\\alpha(t) m_2(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">))</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>t</mi><mo>∈</mo><mo stretchy="false">[</mo><msub><mi>t</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>t</mi><mn>2</mn></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\\alpha\\in[0,1],t\\in[t_1,t_2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>t</mi><mo>−</mo><msub><mi>t</mi><mn>1</mn></msub></mrow><mrow><msub><mi>t</mi><mn>2</mn></msub><mo>−</mo><msub><mi>t</mi><mn>1</mn></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">\\alpha(t)=\\frac{t-t_1}{t_2-t_1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2858em;vertical-align:-0.4451em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8407em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><img src="https://cdn.jsdelivr.net/gh/davidliuk/images@master/blog/image-20241107145555875.png" alt="image-20241107145555875" loading="lazy"></p><h2 id="arc-length-parameterization" tabindex="-1"><a class="header-anchor" href="#arc-length-parameterization"><span>Arc Length Parameterization</span></a></h2><h2 id="animation-guide" tabindex="-1"><a class="header-anchor" href="#animation-guide"><span>Animation Guide</span></a></h2><p>Problem – After playing an animation with root translation, the root joint will snap back to the initial position and orientation after playing the animation  Solution – Add a virtual joint called a “Guide” as a parent of root joint – As a result, root position and orientation transforms are now with respect to the guide frame of reference – At the end of each animation, update the guide joint position to the current position of the character in the world</p><h2 id="foot-ik" tabindex="-1"><a class="header-anchor" href="#foot-ik"><span>Foot IK</span></a></h2><p>Allow characters walk over uneven terrain</p><p>IK target</p><p>Root position</p><ul><li>determine which foot is lower</li><li>Update vertical position of root joint</li></ul><p>Foot Position</p><ul><li>use Limb IK with Lfoot_target and Rfoot_target to position feet</li></ul><h2 id="animation-blending" tabindex="-1"><a class="header-anchor" href="#animation-blending"><span>Animation Blending</span></a></h2><p>We can define blending operations that affect poses</p><p>A blend operation takes one or more animations/poses as input and generates one animation/pose as output</p><p>Parameters such as speed, direction, angle, height etc. are used to control the blend</p><h3 id="cross-dissolve-1" tabindex="-1"><a class="header-anchor" href="#cross-dissolve-1"><span>Cross Dissolve</span></a></h3><p>The most common and useful pose blend operation is the ‘cross dissolve’ of two poses p1 and p2</p><p>It is ok for Euler Angles to use Lerp</p><p> … but quaternions need to use … Slerp</p><h4 id="handling-angles" tabindex="-1"><a class="header-anchor" href="#handling-angles"><span>Handling Angles</span></a></h4><p>If a DOF represents an angle, we need to have the interpolation check for crossing the 0/360 boundary</p><ul><li>Always want to take the shortest path</li><li>Assumes angles range from 0 to 360</li></ul><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (theta1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">theta2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 180</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) theta</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lerp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(theta1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">360</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,theta2,u);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (theta2</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">theta1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 180</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) theta</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lerp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(theta1,theta2</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">360</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,u);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> theta</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lerp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(theta1,theta2,u);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="quaternions" tabindex="-1"><a class="header-anchor" href="#quaternions"><span>Quaternions</span></a></h4><p>Same goes for quaternions. Since there are always two solutions, we need to force the interpolation to go the ‘short way’.</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (q1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> q2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) q</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">slerp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(q1,q2,u);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  q</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">slerp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">q1,q2,u);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="stand-to-walk" tabindex="-1"><a class="header-anchor" href="#stand-to-walk"><span>Stand to Walk</span></a></h4><p>Consider a situation where we want a character to blend from a stand animation to a walk animation</p><p><img src="https://cdn.jsdelivr.net/gh/davidliuk/images@master/blog/image-20241107150933378.png" alt="image-20241107150933378" loading="lazy"></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>w</mi><mi>a</mi><mi>l</mi><mi>k</mi></mrow></msub><mo>=</mo><mi>L</mi><mi>e</mi><mi>r</mi><mi>p</mi><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mfrac><msub><mi>T</mi><mrow><mi>w</mi><mi>a</mi><mi>l</mi><mi>k</mi></mrow></msub><msub><mi>T</mi><mrow><mi>r</mi><mi>u</mi><mi>n</mi></mrow></msub></mfrac><mo separator="true">,</mo><mi>u</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">s_{walk}=Lerp(1,\\frac{T_{walk}}{T_{run}},u)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3393em;vertical-align:-0.4451em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8942em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.1389em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4159em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:-0.1389em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">u</span><span class="mclose">)</span></span></span></span></p><h3 id="basic-math-blend-operations" tabindex="-1"><a class="header-anchor" href="#basic-math-blend-operations"><span>Basic Math Blend Operations</span></a></h3><ul><li>Add</li><li>Subtract</li><li>Scale</li></ul><h3 id="body-turn" tabindex="-1"><a class="header-anchor" href="#body-turn"><span>Body Turn</span></a></h3><p>As an example of math blending operations, consider a character that walks and turns  One approach to achieving this is to have an underlying walk animation and ‘layer’ (add) some body turn on top of it  We use a ‘turn_right’ animation and a ‘default’ straight forward walk animation as building blocks  The subtract blender gives us the difference between the turn_right and default walk animations at each point in time  We then scale this turning delta and add it on top of the underlying walk animation. The scale factor value (u) can be based on how sharply the character should turn (-1…1)</p><hr><ul><li>Bilinear Blend</li><li>Combine Blender</li><li>Mirror Blender</li></ul>`,90)]))}const o=a(e,[["render",l],["__file","animation.html.vue"]]),h=JSON.parse(`{"path":"/education/ms/5620/animation.html","title":"Body Animation","lang":"en-US","frontmatter":{"description":"Body Animation Main Approaches to Animation Motion Editing Techniques Arc Length Parameterization Keyframe Animation Animation=Post(time) Collections of motion curves Single deg...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/education/ms/5620/animation.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"Body Animation"}],["meta",{"property":"og:description","content":"Body Animation Main Approaches to Animation Motion Editing Techniques Arc Length Parameterization Keyframe Animation Animation=Post(time) Collections of motion curves Single deg..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/davidliuk/images@master/blog/image-20241107144808313.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-09T17:17:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-09T17:17:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Body Animation\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/davidliuk/images@master/blog/image-20241107144808313.png\\",\\"https://cdn.jsdelivr.net/gh/davidliuk/images@master/blog/image-20241107144923215.png\\",\\"https://cdn.jsdelivr.net/gh/davidliuk/images@master/blog/image-20241107145323987.png\\",\\"https://cdn.jsdelivr.net/gh/davidliuk/images@master/blog/image-20241107145555875.png\\",\\"https://cdn.jsdelivr.net/gh/davidliuk/images@master/blog/image-20241107150933378.png\\"],\\"dateModified\\":\\"2024-11-09T17:17:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":3,"title":"Keyframe","slug":"keyframe","link":"#keyframe","children":[]},{"level":3,"title":"Animation","slug":"animation","link":"#animation","children":[]},{"level":3,"title":"Main Approaches to Animation","slug":"main-approaches-to-animation","link":"#main-approaches-to-animation","children":[]},{"level":3,"title":"Pose Space","slug":"pose-space","link":"#pose-space","children":[]},{"level":3,"title":"Channels","slug":"channels","link":"#channels","children":[]},{"level":3,"title":"Poses vs. Channels","slug":"poses-vs-channels","link":"#poses-vs-channels","children":[]},{"level":2,"title":"Main Editing Techniques","slug":"main-editing-techniques","link":"#main-editing-techniques","children":[{"level":3,"title":"Warp","slug":"warp","link":"#warp","children":[]},{"level":3,"title":"Blending","slug":"blending","link":"#blending","children":[]},{"level":3,"title":"Layering (compositing)","slug":"layering-compositing","link":"#layering-compositing","children":[]},{"level":3,"title":"Cross Dissolve","slug":"cross-dissolve","link":"#cross-dissolve","children":[]}]},{"level":2,"title":"Arc Length Parameterization","slug":"arc-length-parameterization","link":"#arc-length-parameterization","children":[]},{"level":2,"title":"Animation Guide","slug":"animation-guide","link":"#animation-guide","children":[]},{"level":2,"title":"Foot IK","slug":"foot-ik","link":"#foot-ik","children":[]},{"level":2,"title":"Animation Blending","slug":"animation-blending","link":"#animation-blending","children":[{"level":3,"title":"Cross Dissolve","slug":"cross-dissolve-1","link":"#cross-dissolve-1","children":[]},{"level":3,"title":"Basic Math Blend Operations","slug":"basic-math-blend-operations","link":"#basic-math-blend-operations","children":[]},{"level":3,"title":"Body Turn","slug":"body-turn","link":"#body-turn","children":[]}]}],"git":{"createdTime":1729636448000,"updatedTime":1731172646000,"contributors":[{"name":"David Liu","email":"liudawei@seas.upenn.edu","commits":2},{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro-3.local","commits":1}]},"readingTime":{"minutes":3.16,"words":949},"filePathRelative":"education/ms/5620/animation.md","localizedDate":"October 22, 2024","excerpt":"\\n<ul>\\n<li>Main Approaches to Animation</li>\\n<li>Motion Editing Techniques</li>\\n<li>Arc Length Parameterization</li>\\n</ul>\\n<h3>Keyframe</h3>\\n<h3>Animation</h3>\\n<p>Animation=Post(time)</p>\\n<p>Collections of motion curves</p>\\n<ul>\\n<li>Single degree of freedom(DOF)</li>\\n<li>Single Joint (up to 6 DOF)\\n<ul>\\n<li>3 rotation</li>\\n<li>3 translation (if root or changing bone lengths)</li>\\n</ul>\\n</li>\\n<li>Entire body</li>\\n</ul>","autoDesc":true}`);export{o as comp,h as data};
