import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as s}from"./app-B_TQ4tbw.js";const t={};function l(r,i){return s(),a("div",null,i[0]||(i[0]=[n(`<h1 id="隔离级别" tabindex="-1"><a class="header-anchor" href="#隔离级别"><span>隔离级别</span></a></h1><p>目的：解决并发事务问题</p><p>事务隔离级别</p><ul><li><p>RU：事务提交前，就可被其他事务读取到</p></li><li><p>RC：事务提交后，才能被其他事务读取到</p></li><li><p>RR：解决不可重复读问题</p><p>InnoDB 在 RR 下利用 Read View 和锁很大程度上解决了幻读问题</p></li><li><p>Serializable：</p><p>Serialized 把幻读解决了，但是效率低</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/davidliuk/images@master/blog/截屏2023-03-04 12.49.05.png" alt="截屏2023-03-04 12.49.05" loading="lazy"></p><p>从上往下安全性越来越好，性能越来越低</p><ul><li>MySQL 默认 RR</li><li>Oracle, SQL server 默认 RC</li></ul><p>设置</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 查看事务隔离级别</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @@transaction_isolation;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 设置事务隔离级别</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> [session|global]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> transaction</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> isolation</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> level</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">read</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> uncommitted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> commited | ...}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="innodb-rr-级别下避免幻读的方式" tabindex="-1"><a class="header-anchor" href="#innodb-rr-级别下避免幻读的方式"><span>InnoDB RR 级别下避免幻读的方式</span></a></h3><p>MySQL InnoDB 引擎的默认隔离级别虽然是「可重复读」，但是它很大程度上避免幻读现象（并不是完全解决了，解决的方案有两种：</p><ul><li>针对<strong>快照读</strong>（普通 select 语句）：<strong>通过 MVCC 方式解决了幻读</strong>，因为可重复读隔离级别下，事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，即使中途有其他事务插入了一条数据，是查询不出来这条数据的，所以就很好了避免幻读问题。</li><li>针对<strong>当前读</strong>（select ... for update 等语句）：<strong>通过 next-key lock（记录锁+间隙锁）方式解决了幻读</strong>，因为当执行 select ... for update 语句的时候，会加上 next-key lock，如果有其他事务在 next-key lock 锁范围内插入了一条记录，那么这个插入语句就会被阻塞，无法成功插入，所以就很好了避免幻读问题。</li></ul><h3 id="解决幻读的方式" tabindex="-1"><a class="header-anchor" href="#解决幻读的方式"><span>解决幻读的方式</span></a></h3><p>解决幻读的方式有很多，但是它们的核心思想就是一个事务在操作某张表数据的时候，另外一个事务不允许新增或者删除这张表中的数据了。解决幻读的方式主要有以下几种：</p><ol><li>将事务隔离级别调整为 <code>SERIALIZABLE</code> 。</li><li>在可重复读的事务级别下，给事务操作的这张表添加表锁。</li><li>在可重复读的事务级别下，给事务操作的这张表添加 <code>Next-key Lock（Record Lock+Gap Lock）</code>。</li></ol><h3 id="innodb-rr-级别下出现幻读的情况" tabindex="-1"><a class="header-anchor" href="#innodb-rr-级别下出现幻读的情况"><span>InnoDB RR 级别下出现幻读的情况</span></a></h3>`,16)]))}const d=e(t,[["render",l],["__file","3. 隔离级别.html.vue"]]),h=JSON.parse(`{"path":"/cs/database/mysql/transaction/3.%20%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB.html","title":"隔离级别","lang":"en-US","frontmatter":{"description":"隔离级别 目的：解决并发事务问题 事务隔离级别 RU：事务提交前，就可被其他事务读取到 RC：事务提交后，才能被其他事务读取到 RR：解决不可重复读问题 InnoDB 在 RR 下利用 Read View 和锁很大程度上解决了幻读问题 Serializable： Serialized 把幻读解决了，但是效率低 截屏2023-03-04 12.49.05...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/cs/database/mysql/transaction/3.%20%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"隔离级别"}],["meta",{"property":"og:description","content":"隔离级别 目的：解决并发事务问题 事务隔离级别 RU：事务提交前，就可被其他事务读取到 RC：事务提交后，才能被其他事务读取到 RR：解决不可重复读问题 InnoDB 在 RR 下利用 Read View 和锁很大程度上解决了幻读问题 Serializable： Serialized 把幻读解决了，但是效率低 截屏2023-03-04 12.49.05..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/davidliuk/images@master/blog/%E6%88%AA%E5%B1%8F2023-03-04%2012.49.05.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-05-08T07:35:02.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-08T07:35:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"隔离级别\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/davidliuk/images@master/blog/%E6%88%AA%E5%B1%8F2023-03-04%2012.49.05.png\\"],\\"dateModified\\":\\"2024-05-08T07:35:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":3,"title":"InnoDB RR 级别下避免幻读的方式","slug":"innodb-rr-级别下避免幻读的方式","link":"#innodb-rr-级别下避免幻读的方式","children":[]},{"level":3,"title":"解决幻读的方式","slug":"解决幻读的方式","link":"#解决幻读的方式","children":[]},{"level":3,"title":"InnoDB RR 级别下出现幻读的情况","slug":"innodb-rr-级别下出现幻读的情况","link":"#innodb-rr-级别下出现幻读的情况","children":[]}],"git":{"createdTime":1672647518000,"updatedTime":1715153702000,"contributors":[{"name":"davidliuk","email":"l729641074@163.com","commits":3},{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":3}]},"readingTime":{"minutes":1.99,"words":596},"filePathRelative":"cs/database/mysql/transaction/3. 隔离级别.md","localizedDate":"January 2, 2023","excerpt":"\\n<p>目的：解决并发事务问题</p>\\n<p>事务隔离级别</p>\\n<ul>\\n<li>\\n<p>RU：事务提交前，就可被其他事务读取到</p>\\n</li>\\n<li>\\n<p>RC：事务提交后，才能被其他事务读取到</p>\\n</li>\\n<li>\\n<p>RR：解决不可重复读问题</p>\\n<p>InnoDB 在 RR 下利用 Read View 和锁很大程度上解决了幻读问题</p>\\n</li>\\n<li>\\n<p>Serializable：</p>\\n<p>Serialized 把幻读解决了，但是效率低</p>\\n</li>\\n</ul>\\n<p><img src=\\"https://cdn.jsdelivr.net/gh/davidliuk/images@master/blog/截屏2023-03-04 12.49.05.png\\" alt=\\"截屏2023-03-04 12.49.05\\" loading=\\"lazy\\"></p>","autoDesc":true}`);export{d as comp,h as data};
