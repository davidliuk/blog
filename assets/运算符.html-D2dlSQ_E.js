import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,a as o,o as c}from"./app-z8Dpj-As.js";const a={};function l(i,e){return c(),d("div",null,e[0]||(e[0]=[o('<h1 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h1><ol><li>赋值运算符</li><li>算术运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>位运算符</li><li>三目运算符</li><li>instanceof运算符</li></ol><h2 id="单目运算符" tabindex="-1"><a class="header-anchor" href="#单目运算符"><span>单目运算符</span></a></h2><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span><code>++</code>/<code>--</code></span></a></h3><h3 id="-1" tabindex="-1"><a class="header-anchor" href="#-1"><span><code>!</code></span></a></h3><h2 id="双目运算符" tabindex="-1"><a class="header-anchor" href="#双目运算符"><span>双目运算符</span></a></h2><h3 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符"><span>赋值运算符</span></a></h3><p><code>=</code></p><p>可以结合算数运算符结合成复合赋值运算符，<code>+=</code>,<code>/=</code></p><h3 id="算数运算符" tabindex="-1"><a class="header-anchor" href="#算数运算符"><span>算数运算符</span></a></h3><p>符号 &quot; + “、” - “、” * “、” / “、” % “、” ++ “、” – &quot;</p><ul><li>除法运算，两个操作数是整型的，结果也会是整型的，舍弃掉小数部分；如果有一个数是浮点数，结果将自动转型为浮点型</li><li>取余运算，两个操作数是整型的，结果也会是整型的，如果有一个数是浮点数，结果将自动转型为浮点型</li><li>自增自减运算，a++ 相当于 a = a + 1, a++ 是先运用在计算，++a 先计算在运用</li></ul><h3 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符"><span>关系运算符</span></a></h3><ul><li>&quot; &gt; “、” &lt; “、” &gt;= “、” &lt;= “只支持数值类型的比较，” == “、” != &quot;支持所有数据类型的比较</li><li>关系表达式的运算结果是布尔值</li></ul><h3 id="逻辑" tabindex="-1"><a class="header-anchor" href="#逻辑"><span>逻辑</span></a></h3><h3 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符"><span>位运算符</span></a></h3><p><code>,</code></p><p>在 java 中，逗号只能用来：</p><ul><li><p>分隔方法的参数，</p><p><code>int sum(int a, int b)</code></p></li><li><p>分割多个变量的声明，</p><p><code>int a, b;</code></p></li><li><p>用于 for 循环的表达式中：</p><p><code>for (int i = 0, j = 0; ; i++, j++)</code></p></li></ul><h3 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof"><span><code>instanceof</code></span></a></h3><h2 id="三目运算符" tabindex="-1"><a class="header-anchor" href="#三目运算符"><span>三目运算符</span></a></h2><p>###<code>predicate? a: b</code></p><table><thead><tr><th>优先级</th><th>运算符</th><th>结合性</th></tr></thead><tbody><tr><td>1</td><td><code>( )</code>, <code>[ ]</code>, <code>.</code></td><td>从左到右</td></tr><tr><td>2</td><td><code>!</code>, <code>~</code>, <code>++</code>, <code>--</code></td><td>从右到左</td></tr><tr><td>3</td><td><code>*</code>, <code>/</code>, <code>%</code></td><td>从左到右</td></tr><tr><td>4</td><td><code>+</code>, <code>-</code></td><td>从左到右</td></tr><tr><td>5</td><td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td><td>从左到右</td></tr><tr><td>6</td><td><code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>instanceof</code></td><td>从左到右</td></tr><tr><td>7</td><td><code>==</code>, <code>!=</code></td><td>从左到右</td></tr><tr><td>8</td><td><code>&amp;</code></td><td>从左到右</td></tr><tr><td>9</td><td><code>^</code></td><td>从左到右</td></tr><tr><td>10</td><td>`</td><td>`</td></tr><tr><td>11</td><td><code>&amp;&amp;</code></td><td>从左到右</td></tr><tr><td>12</td><td>`</td><td></td></tr><tr><td>13</td><td><code>? :</code></td><td>从左到右</td></tr><tr><td>14</td><td><code>=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code>, <code>&amp;=</code>, <code>|=</code>, <code>^=</code>, <code>~=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>, <code>&gt;&gt;&gt;=</code></td><td>从右到左</td></tr><tr><td>15</td><td><code>,</code></td><td>从右到左</td></tr></tbody></table><p>当多个运算符出现在一个表达式中，谁的优先级别高，就先执行谁。在一个多运算符的表达式中，运算符优先级不同会导致最后得出的结果完全不一样。</p><p>有一个口诀可以帮助记忆：</p><p>单算移关与，异或逻条赋</p><p>括号级别最高，逗号级别最低，单目 &gt; 算术 &gt; 位移 &gt; 关系 &gt; 逻辑 &gt; 三目 &gt; 赋值。</p>',27)]))}const s=t(a,[["render",l],["__file","运算符.html.vue"]]),h=JSON.parse(`{"path":"/se/lang/java/basic/%E8%BF%90%E7%AE%97%E7%AC%A6.html","title":"运算符","lang":"en-US","frontmatter":{"description":"运算符 赋值运算符 算术运算符 关系运算符 逻辑运算符 位运算符 三目运算符 instanceof运算符 单目运算符 ++/-- ! 双目运算符 赋值运算符 = 可以结合算数运算符结合成复合赋值运算符，+=,/= 算数运算符 符号 \\" + “、” - “、” * “、” / “、” % “、” ++ “、” – \\" 除法运算，两个操作数是整型的，结果也...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/java/basic/%E8%BF%90%E7%AE%97%E7%AC%A6.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"运算符"}],["meta",{"property":"og:description","content":"运算符 赋值运算符 算术运算符 关系运算符 逻辑运算符 位运算符 三目运算符 instanceof运算符 单目运算符 ++/-- ! 双目运算符 赋值运算符 = 可以结合算数运算符结合成复合赋值运算符，+=,/= 算数运算符 符号 \\" + “、” - “、” * “、” / “、” % “、” ++ “、” – \\" 除法运算，两个操作数是整型的，结果也..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-05-08T07:35:02.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-08T07:35:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"运算符\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-08T07:35:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":2,"title":"单目运算符","slug":"单目运算符","link":"#单目运算符","children":[{"level":3,"title":"++/--","slug":"","link":"#","children":[]},{"level":3,"title":"!","slug":"-1","link":"#-1","children":[]}]},{"level":2,"title":"双目运算符","slug":"双目运算符","link":"#双目运算符","children":[{"level":3,"title":"赋值运算符","slug":"赋值运算符","link":"#赋值运算符","children":[]},{"level":3,"title":"算数运算符","slug":"算数运算符","link":"#算数运算符","children":[]},{"level":3,"title":"关系运算符","slug":"关系运算符","link":"#关系运算符","children":[]},{"level":3,"title":"逻辑","slug":"逻辑","link":"#逻辑","children":[]},{"level":3,"title":"位运算符","slug":"位运算符","link":"#位运算符","children":[]},{"level":3,"title":"instanceof","slug":"instanceof","link":"#instanceof","children":[]}]},{"level":2,"title":"三目运算符","slug":"三目运算符","link":"#三目运算符","children":[]}],"git":{"createdTime":1677504602000,"updatedTime":1715153702000,"contributors":[{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":3},{"name":"davidliuk","email":"l729641074@163.com","commits":1},{"name":"liudawei47","email":"liudawei47@jd.com","commits":1}]},"readingTime":{"minutes":1.7,"words":510},"filePathRelative":"se/lang/java/basic/运算符.md","localizedDate":"February 27, 2023","excerpt":"\\n<ol>\\n<li>赋值运算符</li>\\n<li>算术运算符</li>\\n<li>关系运算符</li>\\n<li>逻辑运算符</li>\\n<li>位运算符</li>\\n<li>三目运算符</li>\\n<li>instanceof运算符</li>\\n</ol>\\n<h2>单目运算符</h2>\\n<h3><code>++</code>/<code>--</code></h3>\\n<h3><code>!</code></h3>\\n<h2>双目运算符</h2>\\n<h3>赋值运算符</h3>\\n<p><code>=</code></p>\\n<p>可以结合算数运算符结合成复合赋值运算符，<code>+=</code>,<code>/=</code></p>","autoDesc":true}`);export{s as comp,h as data};
