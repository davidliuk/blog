import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a,o as l}from"./app-DQpqR3jB.js";const n={};function i(r,e){return l(),o("div",null,e[0]||(e[0]=[a('<h1 id="内存管理" tabindex="-1"><a class="header-anchor" href="#内存管理"><span>内存管理</span></a></h1><p>New/malloc/delete/free</p><p><strong>malloc()</strong> 函数在 C 语言中就出现了，在 C++ 中仍然存在，但建议尽量不要使用 malloc() 函数。new 与 malloc() 函数相比，其主要的优点是，new 不只是分配了内存，它还创建了对象。</p><h2 id="指针" tabindex="-1"><a class="header-anchor" href="#指针"><span>指针</span></a></h2><h3 id="智能指针" tabindex="-1"><a class="header-anchor" href="#智能指针"><span>智能指针</span></a></h3><ul><li><code>std::auto_ptr</code></li><li><code>std::unique_ptr</code></li><li><code>std::share_ptr</code></li><li><code>std::weak_ptr</code></li></ul><p>传统的指针（裸指针）在使用时需要手动分配和释放内存，容易出现内存泄漏和悬挂指针等问题。智能指针通过封装裸指针，并提供自动内存管理功能，使得内存资源可以更安全、高效地管理。</p>',7)]))}const p=t(n,[["render",i],["__file","memory.html.vue"]]),s=JSON.parse(`{"path":"/se/lang/cpp/memory.html","title":"内存管理","lang":"en-US","frontmatter":{"description":"内存管理 New/malloc/delete/free malloc() 函数在 C 语言中就出现了，在 C++ 中仍然存在，但建议尽量不要使用 malloc() 函数。new 与 malloc() 函数相比，其主要的优点是，new 不只是分配了内存，它还创建了对象。 指针 智能指针 std::auto_ptr std::unique_ptr std:...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/cpp/memory.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"内存管理"}],["meta",{"property":"og:description","content":"内存管理 New/malloc/delete/free malloc() 函数在 C 语言中就出现了，在 C++ 中仍然存在，但建议尽量不要使用 malloc() 函数。new 与 malloc() 函数相比，其主要的优点是，new 不只是分配了内存，它还创建了对象。 指针 智能指针 std::auto_ptr std::unique_ptr std:..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-09T17:17:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-09T17:17:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"内存管理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-09T17:17:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":2,"title":"指针","slug":"指针","link":"#指针","children":[{"level":3,"title":"智能指针","slug":"智能指针","link":"#智能指针","children":[]}]}],"git":{"createdTime":1715153702000,"updatedTime":1731172646000,"contributors":[{"name":"David Liu","email":"liudawei@seas.upenn.edu","commits":1},{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":0.52,"words":157},"filePathRelative":"se/lang/cpp/memory.md","localizedDate":"May 8, 2024","excerpt":"\\n<p>New/malloc/delete/free</p>\\n<p><strong>malloc()</strong> 函数在 C 语言中就出现了，在 C++ 中仍然存在，但建议尽量不要使用 malloc() 函数。new 与 malloc() 函数相比，其主要的优点是，new 不只是分配了内存，它还创建了对象。</p>\\n<h2>指针</h2>\\n<h3>智能指针</h3>\\n<ul>\\n<li><code>std::auto_ptr</code></li>\\n<li><code>std::unique_ptr</code></li>\\n<li><code>std::share_ptr</code></li>\\n<li><code>std::weak_ptr</code></li>\\n</ul>","autoDesc":true}`);export{p as comp,s as data};
