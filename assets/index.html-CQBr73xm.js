import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as t,o as p}from"./app-PqS9YW_3.js";const n={};function a(o,l){return p(),e("div",null,l[0]||(l[0]=[t('<h1 id="框架" tabindex="-1"><a class="header-anchor" href="#框架"><span>框架</span></a></h1><p>结构</p><ul><li><p>线：减治，</p></li><li><p>树：分治，无重叠子问题（注意均衡的问题）</p><p>分治很简单也符合直觉，难点是时间复杂度估算（主方法）</p><p>对于分布式计算很重要，mit 6.24</p></li><li><p>图：动规，有重叠子问题</p></li><li><p>集：无序，判断存在或者数量</p></li></ul><p>搜索</p><ul><li>FOR：循环搜索</li><li>DFS：栈式搜索</li><li>BFS：队列搜索</li></ul><p>优化</p><ul><li>减治：无效优化</li><li>动规：重叠优化</li><li>分治：并行优化，可以分布式计算如mapreduce</li></ul><p>顺序</p><ul><li>先序</li><li>后序</li><li>访问</li><li>邻接</li></ul><p>传参</p><ul><li>局部变量传参 <ul><li>父向子：自上而下（在栈内部或队列内部）</li><li>子向父：返回值</li></ul></li><li>全局参数传递</li></ul><p>线索：</p><ul><li>递推 <ul><li>值传递</li></ul></li><li>分类 <ul><li>分治</li></ul></li><li>有序 <ul><li>减治</li></ul></li><li>收敛 <ul><li>DFS</li></ul></li></ul>',13)]))}const m=i(n,[["render",a],["__file","index.html.vue"]]),d=JSON.parse(`{"path":"/algo/framework/","title":"框架","lang":"en-US","frontmatter":{"description":"框架 结构 线：减治， 树：分治，无重叠子问题（注意均衡的问题） 分治很简单也符合直觉，难点是时间复杂度估算（主方法） 对于分布式计算很重要，mit 6.24 图：动规，有重叠子问题 集：无序，判断存在或者数量 搜索 FOR：循环搜索 DFS：栈式搜索 BFS：队列搜索 优化 减治：无效优化 动规：重叠优化 分治：并行优化，可以分布式计算如mapred...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/algo/framework/"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"框架"}],["meta",{"property":"og:description","content":"框架 结构 线：减治， 树：分治，无重叠子问题（注意均衡的问题） 分治很简单也符合直觉，难点是时间复杂度估算（主方法） 对于分布式计算很重要，mit 6.24 图：动规，有重叠子问题 集：无序，判断存在或者数量 搜索 FOR：循环搜索 DFS：栈式搜索 BFS：队列搜索 优化 减治：无效优化 动规：重叠优化 分治：并行优化，可以分布式计算如mapred..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-22T03:05:37.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-22T03:05:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"框架\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-22T03:05:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[],"git":{"createdTime":1732244737000,"updatedTime":1732244737000,"contributors":[{"name":"David Liu","email":"liudawei@seas.upenn.edu","commits":1}]},"readingTime":{"minutes":0.63,"words":188},"filePathRelative":"algo/framework/README.md","localizedDate":"November 22, 2024","excerpt":"\\n<p>结构</p>\\n<ul>\\n<li>\\n<p>线：减治，</p>\\n</li>\\n<li>\\n<p>树：分治，无重叠子问题（注意均衡的问题）</p>\\n<p>分治很简单也符合直觉，难点是时间复杂度估算（主方法）</p>\\n<p>对于分布式计算很重要，mit 6.24</p>\\n</li>\\n<li>\\n<p>图：动规，有重叠子问题</p>\\n</li>\\n<li>\\n<p>集：无序，判断存在或者数量</p>\\n</li>\\n</ul>\\n<p>搜索</p>\\n<ul>\\n<li>FOR：循环搜索</li>\\n<li>DFS：栈式搜索</li>\\n<li>BFS：队列搜索</li>\\n</ul>\\n<p>优化</p>\\n<ul>\\n<li>减治：无效优化</li>\\n<li>动规：重叠优化</li>\\n<li>分治：并行优化，可以分布式计算如mapreduce</li>\\n</ul>","autoDesc":true}`);export{m as comp,d as data};
