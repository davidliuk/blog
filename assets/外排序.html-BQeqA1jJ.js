import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as p,o}from"./app-DtA_0glx.js";const i={};function r(l,t){return o(),n("div",null,t[0]||(t[0]=[p('<h1 id="外排序算法" tabindex="-1"><a class="header-anchor" href="#外排序算法"><span>外排序算法</span></a></h1><p>External Sort 外部排序</p><ul><li>外排序算法的基本步骤</li><li>相关面试题</li></ul><hr><p>外排序是指数据存放在外存中，数据排序时涉及<strong>内、外存数据交换</strong>的排序方法。</p><p>存储在外存上的数据以文件为基本单位，由文件系统进行读写操作，读写操作的基本单位为物理块</p><ol><li><p>生成若干初始归并段（顺串）：这一过程也称为文件预处理。一种常规的方法如下：</p><ol><li><p>把含有n个记录的文件，按内存大小w分成若干长度为w的子文件（归并段）；</p></li><li><p>分别将各子文件（归并段）调入内存，采用有效的内排序方法排序后送回外存。</p><p>产生m=[n/w]个初始归并段。</p></li></ol><p>此时产生的若干子文件称为顺串</p></li></ol><hr><p>给你一个包含20亿个int类型整数的文件，计算机的内存只有2GB，怎么给它们排序？一个int数占4个字节，20个亿需要80亿字节，大概占用8GB的内存，而计算机只有2GB的内存，数据都装不下！可以把8GB分割成4个2GB的数据来排，然后在把他们拼凑回去。如下图：</p><p>排序的时候可以选择<strong>快速排序</strong>或<strong>归并排序</strong>等算法。为了方便，我们把排序好的2G有序数据称为有序子串。接着把两个小的有序子串合并成一个大的有序子串。</p><p>注意：读取的时候是每次读取一个it数，通过比较之后再输出。<br> 按照这个方法来回合并，总共经过三次合并之后就可以得到8G的有序子串。<br> 我们假设需要排序的int数有12个，内存一次只能装下3个int数。</p><p>接下来把12个数据分成4份，然后排序成有序子串：</p><p>优化策略</p><p>因为硬盘的读写速度比内存要慢的多，按照以上这种方法，每个数据都从硬盘读了三次，写了三次，要花很多时间。</p><p>解释下：例如对于数据2，我们把无序的12个数据分成有序的4个子串需要读写各一次，把2份3个有序子串合并成6个有序子串读写各一次；把2份6个有序子串合并从12个有序子串读写各一次，一共需要读写各3次。</p><p>在进行有序子串合并的时候，不采取两两合并的方法，而是可以3个子串，或4个子串一起来合并。</p><p>多路归并</p><p>为了方便讲解，我们假设内存一共可以装4个int型数据。</p><p>刚才我们是采取两两合并的方式，现在我们可以采取4个有序子串一起合并的方式，这样的话，每个数据从硬盘读写的次数各需要2次就可以了。如图：</p><hr>',20)]))}const c=e(i,[["render",r],["__file","外排序.html.vue"]]),m=JSON.parse(`{"path":"/algo/faq/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE/%E5%A4%96%E6%8E%92%E5%BA%8F.html","title":"外排序算法","lang":"en-US","frontmatter":{"description":"外排序算法 External Sort 外部排序 外排序算法的基本步骤 相关面试题 外排序是指数据存放在外存中，数据排序时涉及内、外存数据交换的排序方法。 存储在外存上的数据以文件为基本单位，由文件系统进行读写操作，读写操作的基本单位为物理块 生成若干初始归并段（顺串）：这一过程也称为文件预处理。一种常规的方法如下： 把含有n个记录的文件，按内存大小w...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/algo/faq/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE/%E5%A4%96%E6%8E%92%E5%BA%8F.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"外排序算法"}],["meta",{"property":"og:description","content":"外排序算法 External Sort 外部排序 外排序算法的基本步骤 相关面试题 外排序是指数据存放在外存中，数据排序时涉及内、外存数据交换的排序方法。 存储在外存上的数据以文件为基本单位，由文件系统进行读写操作，读写操作的基本单位为物理块 生成若干初始归并段（顺串）：这一过程也称为文件预处理。一种常规的方法如下： 把含有n个记录的文件，按内存大小w..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-22T03:05:37.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-22T03:05:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"外排序算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-22T03:05:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[],"git":{"createdTime":1732244737000,"updatedTime":1732244737000,"contributors":[{"name":"David Liu","email":"liudawei@seas.upenn.edu","commits":1}]},"readingTime":{"minutes":2.54,"words":761},"filePathRelative":"algo/faq/海量数据/外排序.md","localizedDate":"November 22, 2024","excerpt":"\\n<p>External Sort 外部排序</p>\\n<ul>\\n<li>外排序算法的基本步骤</li>\\n<li>相关面试题</li>\\n</ul>\\n<hr>\\n<p>外排序是指数据存放在外存中，数据排序时涉及<strong>内、外存数据交换</strong>的排序方法。</p>\\n<p>存储在外存上的数据以文件为基本单位，由文件系统进行读写操作，读写操作的基本单位为物理块</p>\\n<ol>\\n<li>\\n<p>生成若干初始归并段（顺串）：这一过程也称为文件预处理。一种常规的方法如下：</p>\\n<ol>\\n<li>\\n<p>把含有n个记录的文件，按内存大小w分成若干长度为w的子文件（归并段）；</p>\\n</li>\\n<li>\\n<p>分别将各子文件（归并段）调入内存，采用有效的内排序方法排序后送回外存。</p>\\n<p>产生m=[n/w]个初始归并段。</p>\\n</li>\\n</ol>\\n<p>此时产生的若干子文件称为顺串</p>\\n</li>\\n</ol>","autoDesc":true}`);export{c as comp,m as data};
