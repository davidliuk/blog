import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,d as e}from"./app-9107e99b.js";const i={},l=e(`<h1 id="go" tabindex="-1"><a class="header-anchor" href="#go" aria-hidden="true">#</a> Go</h1><h2 id="golang-基本语法" tabindex="-1"><a class="header-anchor" href="#golang-基本语法" aria-hidden="true">#</a> Golang 基本语法</h2><h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h3><p>Golang 中的数据类型包括基本数据类型和复合数据类型。</p><h4 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a> 基本数据类型</h4><p>Golang 中的基本数据类型包括：</p><ul><li>bool：布尔类型，取值为 true 或 false。</li><li>数值类型：包括整数类型和浮点数类型。 <ul><li>整数类型：int8、int16、int32、int64、uint8、uint16、uint32、uint64、int、uint、uintptr。</li><li>浮点数类型：float32、float64。</li></ul></li><li>字符串类型：用于表示文本数据。</li><li>字符类型：用于表示单个字符，使用 rune 类型表示。</li><li>错误类型：用于表示错误信息，通常用于函数返回值。</li></ul><h4 id="复合数据类型" tabindex="-1"><a class="header-anchor" href="#复合数据类型" aria-hidden="true">#</a> 复合数据类型</h4><p>Golang 中的复合数据类型包括：</p><ul><li>数组类型：用于表示一组固定长度的数据。</li><li>切片类型：用于表示一组长度可变的数据。</li><li>映射类型：用于表示一组键值对的数据。</li><li>结构体类型：用于表示一组相关的数据。</li><li>接口类型：用于表示一组方法的集合。</li></ul><h3 id="流程控制" tabindex="-1"><a class="header-anchor" href="#流程控制" aria-hidden="true">#</a> 流程控制</h3><p>Golang 中的流程控制语句包括：</p><ul><li>条件语句：if 语句、switch 语句。</li><li>循环语句：for 语句。</li><li>跳转语句：break 语句、continue 语句、goto 语句。</li></ul><h4 id="条件语句" tabindex="-1"><a class="header-anchor" href="#条件语句" aria-hidden="true">#</a> 条件语句</h4><p>if 语句用于根据条件执行不同的代码块，语法如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> initialization<span class="token punctuation">;</span> condition <span class="token punctuation">{</span>
    <span class="token comment">// code block</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> initialization<span class="token punctuation">;</span> condition <span class="token punctuation">{</span>
    <span class="token comment">// code block</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// code block</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>initialization</code>的作用域覆盖 if-else 所有分支</p><p>switch 语句用于根据不同的条件执行不同的代码块，语法如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">switch</span> expression <span class="token punctuation">{</span>
<span class="token keyword">case</span> value1<span class="token punctuation">:</span>
    <span class="token comment">// code block</span>
<span class="token keyword">case</span> value2<span class="token punctuation">:</span>
    <span class="token comment">// code block</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
    <span class="token comment">// code block</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="循环语句" tabindex="-1"><a class="header-anchor" href="#循环语句" aria-hidden="true">#</a> 循环语句</h4><p>for 语句用于循环执行一段代码，语法如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> initialization<span class="token punctuation">;</span> condition<span class="token punctuation">;</span> post <span class="token punctuation">{</span>
    <span class="token comment">// code block</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，initialization 用于初始化循环变量，condition 用于判断循环是否继续，post 用于更新循环变量。</p><h4 id="跳转语句" tabindex="-1"><a class="header-anchor" href="#跳转语句" aria-hidden="true">#</a> 跳转语句</h4><p>break 语句用于跳出循环，continue 语句用于跳过当前循环，goto 语句用于无条件跳转到指定的标签处。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">5</span> <span class="token punctuation">{</span>
        <span class="token keyword">break</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">{</span>
        <span class="token keyword">continue</span>
    <span class="token punctuation">}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">goto</span> label
<span class="token comment">// code block</span>
label<span class="token punctuation">:</span>
<span class="token comment">// code block</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总的来说，Golang 中的流程控制语句包括条件语句、循环语句和跳转语句，可以根据实际情况选择合适的语句进行控制程序的流程。</p><h3 id="变量声明" tabindex="-1"><a class="header-anchor" href="#变量声明" aria-hidden="true">#</a> 变量声明</h3><p>在 Golang 中，变量声明可以使用 var 关键字或短变量声明（:=）。</p><p>使用 var 关键字声明变量的语法如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> variable_name data_type
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，variable_name 为变量名，data_type 为变量的数据类型。</p><p>例如，声明一个整数变量 x：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> x <span class="token builtin">int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以在声明变量的同时进行初始化，语法如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> variable_name data_type <span class="token operator">=</span> initial_value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如，声明一个整数变量 x 并初始化为 10：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> x <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用短变量声明（:=）可以更简洁地声明变量并进行初始化，语法如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>variable_name <span class="token operator">:=</span> initial_value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如，声明一个整数变量 x 并初始化为 10：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>x <span class="token operator">:=</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要注意的是，短变量声明只能用于函数内部，而 var 关键字可以用于函数内部和外部。另外，Golang 中的变量声明必须使用，否则会编译错误。</p><h2 id="并发编程" tabindex="-1"><a class="header-anchor" href="#并发编程" aria-hidden="true">#</a> 并发编程</h2><p>Golang 是一门天生支持并发编程的语言，它提供了丰富的并发编程机制，包括 goroutine、channel、select 等。以下是 Golang 并发编程的一些基本概念和使用方法：</p><h3 id="goroutine" tabindex="-1"><a class="header-anchor" href="#goroutine" aria-hidden="true">#</a> Goroutine</h3><p>Goroutine 是 Golang 中的轻量级线程，可以在一个程序中同时运行多个 Goroutine，每个 Goroutine 都是独立的执行流程。Goroutine 的创建和启动非常简单，只需要在函数调用前加上 go 关键字即可，例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// code block</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="channel" tabindex="-1"><a class="header-anchor" href="#channel" aria-hidden="true">#</a> Channel</h3><p>Channel 是 Golang 中的一种通信机制，用于在 Goroutine 之间传递数据。Channel 有两种类型：带缓冲的 Channel 和不带缓冲的 Channel。带缓冲的 Channel 可以缓存一定数量的数据，当缓存满时，发送方会被阻塞，直到接收方取走数据。不带缓冲的 Channel 在发送和接收数据时都会被阻塞，直到有对应的接收或发送操作为止。</p><p>创建 Channel 的语法如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> data_type<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>发送数据到 Channel 的语法如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ch <span class="token operator">&lt;-</span> data
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从 Channel 接收数据的语法如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>data <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="select" tabindex="-1"><a class="header-anchor" href="#select" aria-hidden="true">#</a> Select</h3><p>Select 语句用于在多个 Channel 之间进行选择，当有一个 Channel 可以进行发送或接收操作时，就会执行对应的代码块。Select 语句可以用于实现超时、非阻塞等功能。</p><p>Select 语句的语法如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">select</span> <span class="token punctuation">{</span>
<span class="token keyword">case</span> data <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch1<span class="token punctuation">:</span>
    <span class="token comment">// code block</span>
<span class="token keyword">case</span> data <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch2<span class="token punctuation">:</span>
    <span class="token comment">// code block</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
    <span class="token comment">// code block</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上是 Golang 并发编程的一些基本概念和使用方法，需要注意的是，在并发编程中需要注意线程安全和数据竞争等问题，可以使用锁、原子操作等机制来解决这些问题。</p><h3 id="对象声明" tabindex="-1"><a class="header-anchor" href="#对象声明" aria-hidden="true">#</a> 对象声明</h3><p>在 Golang 中，new 和 make 都是用于创建新的数据结构的内置函数，但是它们的作用不同。</p><p>new 用于创建一个指定类型的指针，并返回该指针的地址。new 的语法如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ptr <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>data_type<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，data_type 为指定的数据类型，ptr 为指向该数据类型的指针。</p><p>例如，创建一个整数类型的指针：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ptr <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>make 用于创建一个指定类型的数据结构，并返回该数据结构的引用。make 只能用于创建 slice、map 和 channel 等数据结构，因为这些数据结构需要进行初始化才能使用。make 的语法如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ref <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span>data_type<span class="token punctuation">,</span> length<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，data_type 为指定的数据类型，length 为数据结构的长度，capacity 为数据结构的容量（仅适用于 slice 和 channel）。</p><p>例如，创建一个长度为 10、容量为 20 的整数类型的 slice：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要注意的是，new 和 make 都是用于创建新的数据结构，但是它们的作用不同。new 用于创建指针类型的数据结构，而 make 用于创建 slice、map 和 channel 等数据结构。在使用 new 和 make 时，需要根据实际情况选择合适的函数，并进行适当的初始化。</p><p>在 Golang 中，数组和切片都是用于存储一组数据的数据结构，但是它们之间有很大的区别。</p><h2 id="数组与切片" tabindex="-1"><a class="header-anchor" href="#数组与切片" aria-hidden="true">#</a> 数组与切片</h2><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h3><p>数组是一组固定长度的数据结构，数组的长度在创建时就已经确定，不能动态改变。数组的元素类型可以是任意类型，但是所有元素的类型必须相同。数组的声明和初始化语法如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> array_name <span class="token punctuation">[</span>length<span class="token punctuation">]</span>data_type
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，array_name 为数组名，length 为数组长度，data_type 为数组元素类型。</p><p>例如，创建一个长度为 5 的整数类型数组：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="切片" tabindex="-1"><a class="header-anchor" href="#切片" aria-hidden="true">#</a> 切片</h3><p>切片是一个动态长度的数据结构，可以根据需要动态增加或减少长度。切片的元素类型和数组类似，但是切片的长度可以动态改变。切片的声明和初始化语法如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> slice_name <span class="token punctuation">[</span><span class="token punctuation">]</span>data_type
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，slice_name 为切片名，data_type 为切片元素类型。</p><p>例如，创建一个整数类型的切片：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>切片可以通过 make 函数进行初始化，语法如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>slice_name <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>data_type<span class="token punctuation">,</span> length<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，length 为切片的长度，capacity 为切片的容量。</p><p>例如，创建一个长度为 5、容量为 10 的整数类型切片：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="区别" tabindex="-1"><a class="header-anchor" href="#区别" aria-hidden="true">#</a> 区别</h3><p>数组和切片之间的主要区别如下：</p><ol><li><p>长度：数组的长度在创建时就已经确定，不能动态改变，而切片的长度可以动态改变。</p></li><li><p>内存分配：数组在创建时就会分配一段连续的内存空间，而切片在创建时不会分配内存空间，只有在添加元素时才会动态分配内存空间。</p></li><li><p>传递方式：数组在函数调用时会进行值传递，即会复制一份数组，而切片在函数调用时会进行引用传递，即会传递切片的指针。</p></li></ol><p>总的来说，数组和切片都是用于存储一组数据的数据结构，但是它们之间的区别很大，需要根据实际情况选择合适的数据结构。</p>`,98),o=[l];function t(p,c){return a(),s("div",null,o)}const u=n(i,[["render",t],["__file","语法.html.vue"]]);export{u as default};
