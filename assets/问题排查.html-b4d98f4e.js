const t=JSON.parse(`{"key":"v-e76cd190","path":"/se/lang/java/jvm/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5.html","title":"线上问题排查","lang":"en-US","frontmatter":{"description":"线上问题排查 CPU 过高/爆掉 JVM调优过程中，如果CPU爆掉了，可以通过以下步骤进行排查： 使用top命令查看CPU占用率最高的进程，确定是哪个进程导致了CPU爆满。 使用jstack命令获取Java进程的线程堆栈信息，查看哪些线程正在运行，是否存在死循环、长时间等待等问题。 使用jmap命令获取Java进程的内存信息，查看堆内存使用情况、GC情况等，是否存在内存泄漏等问题。 使用jstat命令获取Java进程的GC情况，查看GC频率、GC时间等，是否存在频繁的Full GC等问题。 根据以上信息，确定问题所在，进行相应的优化和调整，例如优化代码、调整JVM参数、增加硬件资源等。","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/java/jvm/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"线上问题排查"}],["meta",{"property":"og:description","content":"线上问题排查 CPU 过高/爆掉 JVM调优过程中，如果CPU爆掉了，可以通过以下步骤进行排查： 使用top命令查看CPU占用率最高的进程，确定是哪个进程导致了CPU爆满。 使用jstack命令获取Java进程的线程堆栈信息，查看哪些线程正在运行，是否存在死循环、长时间等待等问题。 使用jmap命令获取Java进程的内存信息，查看堆内存使用情况、GC情况等，是否存在内存泄漏等问题。 使用jstat命令获取Java进程的GC情况，查看GC频率、GC时间等，是否存在频繁的Full GC等问题。 根据以上信息，确定问题所在，进行相应的优化和调整，例如优化代码、调整JVM参数、增加硬件资源等。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-05-17T10:10:52.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-05-17T10:10:52.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/se/lang/java/jvm/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5.html"}]]},"headers":[{"level":2,"title":"CPU 过高/爆掉","slug":"cpu-过高-爆掉","link":"#cpu-过高-爆掉","children":[]}],"git":{"createdTime":1684318252000,"updatedTime":1684318252000,"contributors":[{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":0.93,"words":280},"localizedDate":"May 17, 2023","filePathRelative":"se/lang/java/jvm/问题排查.md","excerpt":"<h1> 线上问题排查</h1>\\n<h2> CPU 过高/爆掉</h2>\\n<p>JVM调优过程中，如果CPU爆掉了，可以通过以下步骤进行排查：</p>\\n<ol>\\n<li>\\n<p>使用top命令查看CPU占用率最高的进程，确定是哪个进程导致了CPU爆满。</p>\\n</li>\\n<li>\\n<p>使用jstack命令获取Java进程的线程堆栈信息，查看哪些线程正在运行，是否存在死循环、长时间等待等问题。</p>\\n</li>\\n<li>\\n<p>使用jmap命令获取Java进程的内存信息，查看堆内存使用情况、GC情况等，是否存在内存泄漏等问题。</p>\\n</li>\\n<li>\\n<p>使用jstat命令获取Java进程的GC情况，查看GC频率、GC时间等，是否存在频繁的Full GC等问题。</p>\\n</li>\\n<li>\\n<p>根据以上信息，确定问题所在，进行相应的优化和调整，例如优化代码、调整JVM参数、增加硬件资源等。</p>\\n</li>\\n</ol>","autoDesc":true}`);export{t as data};
