const e=JSON.parse(`{"key":"v-26f64b8a","path":"/cs/database/sql/design/%E8%AE%BE%E8%AE%A1.html","title":"设计","lang":"en-US","frontmatter":{"description":"设计 主要考虑三个点： 范式 数据库范式是一种规范化数据库设计的方法，它通过将数据分解成更小的、更规范化的表来减少数据冗余和提高数据一致性。常见的数据库范式有以下几种： 第一范式（1NF）：确保每个表中的每个列都是原子的，即不可再分的。这可以通过将多值属性拆分成单值属性来实现。 第二范式（2NF）：确保每个表中的每个非主键列都完全依赖于主键。如果一个表中有多个主键，那么每个非主键列都应该依赖于所有主键。 第三范式（3NF）：确保每个表中的每个非主键列都不传递依赖于主键。如果一个非主键列依赖于另一个非主键列，那么应该将其拆分成一个单独的表。","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/cs/database/sql/design/%E8%AE%BE%E8%AE%A1.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"设计"}],["meta",{"property":"og:description","content":"设计 主要考虑三个点： 范式 数据库范式是一种规范化数据库设计的方法，它通过将数据分解成更小的、更规范化的表来减少数据冗余和提高数据一致性。常见的数据库范式有以下几种： 第一范式（1NF）：确保每个表中的每个列都是原子的，即不可再分的。这可以通过将多值属性拆分成单值属性来实现。 第二范式（2NF）：确保每个表中的每个非主键列都完全依赖于主键。如果一个表中有多个主键，那么每个非主键列都应该依赖于所有主键。 第三范式（3NF）：确保每个表中的每个非主键列都不传递依赖于主键。如果一个非主键列依赖于另一个非主键列，那么应该将其拆分成一个单独的表。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-05-17T10:10:52.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-05-17T10:10:52.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/cs/database/sql/design/%E8%AE%BE%E8%AE%A1.html"}]]},"headers":[{"level":2,"title":"范式","slug":"范式","link":"#范式","children":[]},{"level":2,"title":"约束","slug":"约束","link":"#约束","children":[]},{"level":2,"title":"索引","slug":"索引","link":"#索引","children":[]}],"git":{"createdTime":1684318252000,"updatedTime":1684318252000,"contributors":[{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":2.27,"words":681},"localizedDate":"May 17, 2023","filePathRelative":"cs/database/sql/design/设计.md","excerpt":"<h1> 设计</h1>\\n<p>主要考虑三个点：</p>\\n<ul>\\n<li></li>\\n</ul>\\n<h2> 范式</h2>\\n<p>数据库范式是一种规范化数据库设计的方法，它通过将数据分解成更小的、更规范化的表来减少数据冗余和提高数据一致性。常见的数据库范式有以下几种：</p>\\n<ol>\\n<li>\\n<p>第一范式（1NF）：确保每个表中的每个列都是原子的，即不可再分的。这可以通过将多值属性拆分成单值属性来实现。</p>\\n</li>\\n<li>\\n<p>第二范式（2NF）：确保每个表中的每个非主键列都<strong>完全依赖</strong>于主键。如果一个表中有多个主键，那么每个非主键列都应该依赖于所有主键。</p>\\n</li>\\n<li>\\n<p>第三范式（3NF）：确保每个表中的每个非主键列都<strong>不传递依赖</strong>于主键。如果一个非主键列依赖于另一个非主键列，那么应该将其拆分成一个单独的表。</p>\\n</li>\\n</ol>","autoDesc":true}`);export{e as data};
