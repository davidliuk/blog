const e=JSON.parse(`{"key":"v-a49aad7c","path":"/se/lang/java/JUC/safe/volatile.html","title":"volatile","lang":"en-US","frontmatter":{"description":"volatile 可见性 在 Java 中，volatile 关键字可以保证变量的可见性，如果我们将变量声明为 volatile ，这就指示 JVM，这个变量是共享且不稳定的，每次使用它都到主存中进行读取，每次更新他都会刷回主存。 当一个变量被声明为volatile时，它的值的修改会立即被写入到主内存中，并且其他线程可以立即看到这个变量的最新值。 过程 线程A将工作内存的data更改后，强制将data值刷回主内存 如果线程B的工作内存中有data变量的缓存时，会强制让这个data变量缓存失效 当线程B需要读取data变量的值时，先从工作内存中读，发现已经过期，就会从主内存中加载data变量的最新值了","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/java/JUC/safe/volatile.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"volatile"}],["meta",{"property":"og:description","content":"volatile 可见性 在 Java 中，volatile 关键字可以保证变量的可见性，如果我们将变量声明为 volatile ，这就指示 JVM，这个变量是共享且不稳定的，每次使用它都到主存中进行读取，每次更新他都会刷回主存。 当一个变量被声明为volatile时，它的值的修改会立即被写入到主内存中，并且其他线程可以立即看到这个变量的最新值。 过程 线程A将工作内存的data更改后，强制将data值刷回主内存 如果线程B的工作内存中有data变量的缓存时，会强制让这个data变量缓存失效 当线程B需要读取data变量的值时，先从工作内存中读，发现已经过期，就会从主内存中加载data变量的最新值了"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-03-29T11:46:59.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-03-29T11:46:59.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/se/lang/java/JUC/safe/volatile.html"}]]},"headers":[{"level":2,"title":"可见性","slug":"可见性","link":"#可见性","children":[{"level":3,"title":"过程","slug":"过程","link":"#过程","children":[]},{"level":3,"title":"解决问题","slug":"解决问题","link":"#解决问题","children":[]},{"level":3,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]}]},{"level":2,"title":"有序性","slug":"有序性","link":"#有序性","children":[]}],"git":{"createdTime":1677504602000,"updatedTime":1680090419000,"contributors":[{"name":"davidliuk","email":"l729641074@163.com","commits":2},{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":1.56,"words":469},"localizedDate":"February 27, 2023","filePathRelative":"se/lang/java/JUC/safe/volatile.md","excerpt":"<h1> volatile</h1>\\n<h2> 可见性</h2>\\n<p>在 Java 中，<code>volatile</code> 关键字可以保证变量的可见性，如果我们将变量声明为 <strong><code>volatile</code></strong> ，这就指示 JVM，这个变量是共享且不稳定的，每次使用它都到主存中进行读取，每次更新他都会刷回主存。</p>\\n<p>当一个变量被声明为<code>volatile</code>时，它的值的修改会立即被写入到主内存中，并且其他线程可以立即看到这个变量的最新值。</p>\\n<h3> 过程</h3>\\n<ol>\\n<li>线程A将工作内存的data更改后，强制将data值刷回主内存</li>\\n<li>如果线程B的工作内存中有data变量的缓存时，会强制让这个data变量缓存失效</li>\\n<li>当线程B需要读取data变量的值时，先从工作内存中读，发现已经过期，就会从主内存中加载data变量的最新值了</li>\\n</ol>","autoDesc":true}`);export{e as data};
