import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,f as p}from"./app.a4707586.js";const t={},o=p(`<p>核心思想：小大化小</p><p>大规模问题的依赖于小规模问题</p><p>类似思想算法的还有：递归，分治法</p><p>动态规划DP</p><p>贪心法Greedy</p><p>实现方式</p><ol><li><p>记忆化搜索</p><p>（自顶向下的动态规划）</p></li><li><p>多重循环</p><p>（自底向上的动态规划）</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><p>状态：坐标</p><p>方程：到哪去</p><p>初始化：终点</p><p>答案：起点</p><p>什么东西需要初始化：可以直接放在公式里面求出来的部分</p><p>可以套公式：不会出现越界或者是算不出来的情况的</p><p>自底向上、自顶向下</p><p>自底向上：正着依赖，倒着循环</p><p>自顶向下：正着循环，倒着依赖</p><p>三大类问题</p><ol><li>最值</li><li>可行性</li><li>方案总数</li></ol><h3 id="动归四要素" tabindex="-1"><a class="header-anchor" href="#动归四要素" aria-hidden="true">#</a> 动归四要素</h3><p>动规的状态State — 递归的定义</p><ul><li>用 f[i]或者f[i] 代表在某些特定条件下某个规模更小的问题的答案</li><li>规模更小用参数 i 之类的来划定</li></ul><p>动规的方程Function --- 递归的拆解</p><ul><li>上一步从哪来</li><li>大问题如何拆解为小问题</li><li>f[i]t] = 通过规模更小的一些状态求 max / min / sum / or 来进行推导</li></ul><p>动规的初始化Initialize - 递归的出口</p><ul><li>设定无法再拆解的极限小的状态下的值</li><li>如f[i][0]或者 f[0][i]</li></ul><p>动规的答案Answer — 递归的调用</p><ul><li>最后要求的答案是什么</li><li>如f[n][m]或者 max(f[n][0], f[n][1] …f[n][m])</li></ul><p>这也就是为什么动态规划可以使用</p><p>“递归”版本的记忆化搜索来解决的原因！</p><p>算法难的就是递归和动规</p><p>不同的路径 Unique Path</p><p>dp[i][j] = dp[i-1][j] + dp[i][j-1]</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">uniquePath</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// state: dp[i][j] 代表0, 0走到i, j的方案数</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    <span class="token comment">// init</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34),e=[o];function c(l,i){return s(),a("div",null,e)}const r=n(t,[["render",c],["__file","23. 动态规划.html.vue"]]);export{r as default};
