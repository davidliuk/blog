const e=JSON.parse(`{"key":"v-719356d9","path":"/cs/algo/summary/12.%20%E9%80%92%E5%BD%92%E3%80%81%E9%81%8D%E5%8E%86%E3%80%81%E5%88%86%E6%B2%BB.html","title":"递归、遍历、分治","lang":"en-US","frontmatter":{"description":"递归、遍历、分治 递归、深搜、回溯 Recursion DFS Backtracking 区别与联系 递归 Recursion 递归函数：函数自我调用 递归算法：大问题的结果依赖于小问题的结果，于是先用递归函数解决小问题 一般我们说的递归指的是递归函数 深度优先搜索 可以使用递归函数来实现 也可以不用递归函数，如自己通过一个手动创建的Stack 回溯 回溯法：就是深度优先搜素算法 回溯操作：递归函数在回到上一层递归调用处的时候，一些状态参数需要调回调用之前的值，这个操作就是回溯；调用前状态参数是什么样，递归后都改回来","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/cs/algo/summary/12.%20%E9%80%92%E5%BD%92%E3%80%81%E9%81%8D%E5%8E%86%E3%80%81%E5%88%86%E6%B2%BB.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"递归、遍历、分治"}],["meta",{"property":"og:description","content":"递归、遍历、分治 递归、深搜、回溯 Recursion DFS Backtracking 区别与联系 递归 Recursion 递归函数：函数自我调用 递归算法：大问题的结果依赖于小问题的结果，于是先用递归函数解决小问题 一般我们说的递归指的是递归函数 深度优先搜索 可以使用递归函数来实现 也可以不用递归函数，如自己通过一个手动创建的Stack 回溯 回溯法：就是深度优先搜素算法 回溯操作：递归函数在回到上一层递归调用处的时候，一些状态参数需要调回调用之前的值，这个操作就是回溯；调用前状态参数是什么样，递归后都改回来"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-01-01T14:28:09.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-01-01T14:28:09.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/cs/algo/summary/12.%20%E9%80%92%E5%BD%92%E3%80%81%E9%81%8D%E5%8E%86%E3%80%81%E5%88%86%E6%B2%BB.html"}]]},"headers":[{"level":3,"title":"递归 Recursion","slug":"递归-recursion","link":"#递归-recursion","children":[]},{"level":3,"title":"深度优先搜索","slug":"深度优先搜索","link":"#深度优先搜索","children":[]},{"level":3,"title":"回溯","slug":"回溯","link":"#回溯","children":[]},{"level":2,"title":"遍历与分治","slug":"遍历与分治","link":"#遍历与分治","children":[{"level":3,"title":"遍历法","slug":"遍历法","link":"#遍历法","children":[]},{"level":3,"title":"分治","slug":"分治","link":"#分治","children":[]}]}],"git":{"createdTime":1670121259000,"updatedTime":1672583289000,"contributors":[{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":2},{"name":"DavidLiu","email":"l729641074@163.com","commits":1}]},"readingTime":{"minutes":1.81,"words":544},"localizedDate":"December 4, 2022","filePathRelative":"cs/algo/summary/12. 递归、遍历、分治.md","excerpt":"<h1> 递归、遍历、分治</h1>\\n<p>递归、深搜、回溯</p>\\n<p>Recursion DFS Backtracking</p>\\n<p>区别与联系</p>\\n<h3> 递归 Recursion</h3>\\n<p>递归函数：函数自我调用</p>\\n<p>递归算法：大问题的结果依赖于小问题的结果，于是先用递归函数解决小问题</p>\\n<p>一般我们说的递归指的是递归函数</p>\\n<h3> 深度优先搜索</h3>\\n<p>可以使用递归函数来实现</p>\\n<p>也可以不用递归函数，如自己通过一个手动创建的Stack</p>\\n<h3> 回溯</h3>\\n<ul>\\n<li>回溯法：就是深度优先搜素算法</li>\\n<li>回溯操作：递归函数在回到上一层递归调用处的时候，一些状态参数需要调回调用之前的值，这个操作就是回溯；调用前状态参数是什么样，递归后都改回来</li>\\n</ul>","autoDesc":true}`);export{e as data};
