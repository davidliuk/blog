import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as h,d as r}from"./app-9107e99b.js";const d={},i=r('<h1 id="确定性推理" tabindex="-1"><a class="header-anchor" href="#确定性推理" aria-hidden="true">#</a> 确定性推理</h1><h2 id="推理的基本概念" tabindex="-1"><a class="header-anchor" href="#推理的基本概念" aria-hidden="true">#</a> 推理的基本概念</h2><h3 id="推理的定义" tabindex="-1"><a class="header-anchor" href="#推理的定义" aria-hidden="true">#</a> 推理的定义</h3><h4 id="演绎推理、归纳推理、默认推理" tabindex="-1"><a class="header-anchor" href="#演绎推理、归纳推理、默认推理" aria-hidden="true">#</a> 演绎推理、归纳推理、默认推理</h4><p>演绎推理：三段论式</p><p>归纳推理：个别-&gt;一般</p><ul><li>完全归纳推理（必然性推理）</li><li>不完全归纳推理（非必然性推理）</li></ul><p>默认推理(<strong>default reasoning</strong>，缺省推理)</p><blockquote><p>知识不完全的情况下假设某些条件已经具备所进行的推理。</p><p>默认成立</p></blockquote><h4 id="确定性推理、不确定性推理" tabindex="-1"><a class="header-anchor" href="#确定性推理、不确定性推理" aria-hidden="true">#</a> 确定性推理、不确定性推理</h4><p>确定性推理：推理时所用的知识与证据都是确定的， 推出的结论也是确定的，其真值或者为真或者为假。</p><p>不确定性推理：推理时所用的知识与证据不都是确定 的，推出的结论也是不确定的。</p><ul><li>似然推理（概率论）</li><li>近似推理或模糊推理（模糊逻辑）</li></ul><h4 id="单调推理、非单调推理" tabindex="-1"><a class="header-anchor" href="#单调推理、非单调推理" aria-hidden="true">#</a> 单调推理、非单调推理</h4><p>单调推理：随着推理向前推进及新知识的加入，推出的结论越来越接近最终目标。</p><p>非单调推理：由于新知识的加入，不仅没有加强已 推出的结论，反而要否定它，使推理退回到前面的某一步， 重新开始。</p><h4 id="启发式推理、非启发式推理" tabindex="-1"><a class="header-anchor" href="#启发式推理、非启发式推理" aria-hidden="true">#</a> 启发式推理、非启发式推理</h4><p>启发性知识：与问题有关且能加快推理过程、提高搜索 效率的知识。</p><h3 id="推理方式及其分类" tabindex="-1"><a class="header-anchor" href="#推理方式及其分类" aria-hidden="true">#</a> 推理方式及其分类</h3><h2 id="自然演绎推理" tabindex="-1"><a class="header-anchor" href="#自然演绎推理" aria-hidden="true">#</a> 自然演绎推理</h2><p>自然演绎推理:从一组已知为真的事实出发，运用经典 逻辑的推理规则推出结论的过程。</p><p>推理规则:<strong>P</strong>规则、<strong>T</strong>规则、假言推理、拒取式推理</p><h2 id="谓词公式化为子句集的方法" tabindex="-1"><a class="header-anchor" href="#谓词公式化为子句集的方法" aria-hidden="true">#</a> 谓词公式化为子句集的方法</h2><p>八步</p><h3 id="消去蕴含和等价" tabindex="-1"><a class="header-anchor" href="#消去蕴含和等价" aria-hidden="true">#</a> 消去蕴含和等价</h3><h3 id="移动否定符号" tabindex="-1"><a class="header-anchor" href="#移动否定符号" aria-hidden="true">#</a> 移动否定符号</h3><h3 id="变量标准化" tabindex="-1"><a class="header-anchor" href="#变量标准化" aria-hidden="true">#</a> 变量标准化</h3><h3 id="消去存在量词" tabindex="-1"><a class="header-anchor" href="#消去存在量词" aria-hidden="true">#</a> 消去存在量词</h3><h3 id="化为前束型" tabindex="-1"><a class="header-anchor" href="#化为前束型" aria-hidden="true">#</a> 化为前束型</h3><h2 id="鲁宾逊归结原理" tabindex="-1"><a class="header-anchor" href="#鲁宾逊归结原理" aria-hidden="true">#</a> 鲁宾逊归结原理</h2><h2 id="归结反演" tabindex="-1"><a class="header-anchor" href="#归结反演" aria-hidden="true">#</a> 归结反演</h2><p>应用归结原理证明定理的过程称为归结反演。</p><p>用归结反演证明的步骤是: (1)将已知前提表示为谓词公式<em>F</em>。 (2)将待证明的结论表示为谓词公式<em>Q</em>，并否定得到「 <em>Q</em> 。 (3)把谓词公式集{<em>F</em>，<em>Q</em>} 化为子句集<em>S</em>。 (4)应用归结原理对子句集<em>S</em>中的子句进行归结，并把每次</p><p>归结得到的归结式都并入到<em>S</em>中。如此反复进行，若出 现了空子句，则停止归结，此时就证明了<em>Q</em>为真。</p>',34),n=[i];function t(s,c){return e(),h("div",null,n)}const p=a(d,[["render",t],["__file","3. 确定性推理.html.vue"]]);export{p as default};
