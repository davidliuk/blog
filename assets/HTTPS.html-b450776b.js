const e=JSON.parse(`{"key":"v-0cc211d4","path":"/cs/basic/network/HTTPS.html","title":"HTTPS","lang":"en-US","frontmatter":{"description":"HTTPS TLS 协议建立的详细流程 1. ClientHello 首先，由客户端向服务器发起加密通信请求，也就是 ClientHello 请求。 在这一步，客户端主要向服务器发送以下信息： （1）客户端支持的 TLS 协议版本，如 TLS 1.2 版本。 （2）客户端生产的随机数（Client Random），后面用于生成「会话秘钥」条件之一。 （3）客户端支持的密码套件列表，如 RSA 加密算法。","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/cs/basic/network/HTTPS.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"HTTPS"}],["meta",{"property":"og:description","content":"HTTPS TLS 协议建立的详细流程 1. ClientHello 首先，由客户端向服务器发起加密通信请求，也就是 ClientHello 请求。 在这一步，客户端主要向服务器发送以下信息： （1）客户端支持的 TLS 协议版本，如 TLS 1.2 版本。 （2）客户端生产的随机数（Client Random），后面用于生成「会话秘钥」条件之一。 （3）客户端支持的密码套件列表，如 RSA 加密算法。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-04-03T03:29:06.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-04-03T03:29:06.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/cs/basic/network/HTTPS.html"}]]},"headers":[{"level":2,"title":"TLS 协议建立的详细流程","slug":"tls-协议建立的详细流程","link":"#tls-协议建立的详细流程","children":[]}],"git":{"createdTime":1680492546000,"updatedTime":1680492546000,"contributors":[{"name":"davidliuk","email":"l729641074@163.com","commits":1}]},"readingTime":{"minutes":2.43,"words":729},"localizedDate":"April 3, 2023","filePathRelative":"cs/basic/network/HTTPS.md","excerpt":"<h1> HTTPS</h1>\\n<h2> TLS 协议建立的详细流程</h2>\\n<p><em>1. ClientHello</em></p>\\n<p>首先，由客户端向服务器发起加密通信请求，也就是 <code>ClientHello</code> 请求。</p>\\n<p>在这一步，客户端主要向服务器发送以下信息：</p>\\n<p>（1）客户端支持的 TLS 协议版本，如 TLS 1.2 版本。</p>\\n<p>（2）客户端生产的随机数（<code>Client Random</code>），后面用于生成「会话秘钥」条件之一。</p>\\n<p>（3）客户端支持的密码套件列表，如 RSA 加密算法。</p>","autoDesc":true}`);export{e as data};
