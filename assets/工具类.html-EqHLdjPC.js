import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as r,o as l}from"./app-CGXHKXsa.js";const n={};function s(a,o){return l(),e("div",null,o[0]||(o[0]=[r('<h1 id="常用工具类" tabindex="-1"><a class="header-anchor" href="#常用工具类"><span>常用工具类</span></a></h1><ul><li>Objects</li><li>Arrays</li><li>Collections</li></ul><h2 id="arrays" tabindex="-1"><a class="header-anchor" href="#arrays"><span>Arrays</span></a></h2><h3 id="sort" tabindex="-1"><a class="header-anchor" href="#sort"><span>sort</span></a></h3><p>在 Java 中，<code>Arrays.sort()</code> 方法用于对数组进行排序。这个方法的时间复杂度取决于数组的类型和大小。</p><ol><li><strong>对于基本数据类型（如 <code>int</code>、<code>double</code>、<code>char</code> 等）的数组</strong>： <ul><li><code>Arrays.sort()</code> 使用的是 <strong>双枢轴快速排序算法（Dual-Pivot Quicksort）</strong>。</li><li>平均情况下，这种快速排序算法的时间复杂度为 <strong>O(n log n)</strong>。</li><li>在最坏的情况下（即输入数组已经是有序的或者逆序的），时间复杂度仍然接近 <strong>O(n log n)</strong>，这是由于双枢轴快速排序的特定实现方式。</li></ul></li><li><strong>对于对象数组（如 <code>Integer[]</code>、<code>String[]</code> 等）</strong>： <ul><li><code>Arrays.sort()</code> 使用的是 <strong>归并排序的改进版（Timsort）</strong>。</li><li>这种排序算法的平均和最坏情况时间复杂度都是 <strong>O(n log n)</strong>。</li><li>Timsort 是一种稳定的排序算法，它优化了归并排序，在处理部分有序的数组时表现得尤其好。</li></ul></li></ol><p>因此，不管是对基本类型还是对象数组进行排序，<code>Arrays.sort()</code> 方法的时间复杂度通常都是 <strong>O(n log n)</strong>。这使得它在大多数情况下都是一种有效的排序方法。然而，对于特定类型的数据或特定的应用场景，可能存在更优的排序方法。</p><p>binarySearch</p><h2 id="collections" tabindex="-1"><a class="header-anchor" href="#collections"><span>Collections</span></a></h2><p>sort</p><p>reverse</p><p>binarySearch</p><p>shuffle</p>',13)]))}const d=t(n,[["render",s],["__file","工具类.html.vue"]]),g=JSON.parse(`{"path":"/se/lang/java/basic/class/%E5%B7%A5%E5%85%B7%E7%B1%BB.html","title":"常用工具类","lang":"en-US","frontmatter":{"description":"常用工具类 Objects Arrays Collections Arrays sort 在 Java 中，Arrays.sort() 方法用于对数组进行排序。这个方法的时间复杂度取决于数组的类型和大小。 对于基本数据类型（如 int、double、char 等）的数组： Arrays.sort() 使用的是 双枢轴快速排序算法（Dual-Pivot ...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/java/basic/class/%E5%B7%A5%E5%85%B7%E7%B1%BB.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"常用工具类"}],["meta",{"property":"og:description","content":"常用工具类 Objects Arrays Collections Arrays sort 在 Java 中，Arrays.sort() 方法用于对数组进行排序。这个方法的时间复杂度取决于数组的类型和大小。 对于基本数据类型（如 int、double、char 等）的数组： Arrays.sort() 使用的是 双枢轴快速排序算法（Dual-Pivot ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-05-08T07:35:02.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-08T07:35:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常用工具类\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-08T07:35:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":2,"title":"Arrays","slug":"arrays","link":"#arrays","children":[{"level":3,"title":"sort","slug":"sort","link":"#sort","children":[]}]},{"level":2,"title":"Collections","slug":"collections","link":"#collections","children":[]}],"git":{"createdTime":1679321449000,"updatedTime":1715153702000,"contributors":[{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":2},{"name":"liudawei47","email":"liudawei47@jd.com","commits":1}]},"readingTime":{"minutes":1.13,"words":339},"filePathRelative":"se/lang/java/basic/class/工具类.md","localizedDate":"March 20, 2023","excerpt":"\\n<ul>\\n<li>Objects</li>\\n<li>Arrays</li>\\n<li>Collections</li>\\n</ul>\\n<h2>Arrays</h2>\\n<h3>sort</h3>\\n<p>在 Java 中，<code>Arrays.sort()</code> 方法用于对数组进行排序。这个方法的时间复杂度取决于数组的类型和大小。</p>\\n<ol>\\n<li><strong>对于基本数据类型（如 <code>int</code>、<code>double</code>、<code>char</code> 等）的数组</strong>：\\n<ul>\\n<li><code>Arrays.sort()</code> 使用的是 <strong>双枢轴快速排序算法（Dual-Pivot Quicksort）</strong>。</li>\\n<li>平均情况下，这种快速排序算法的时间复杂度为 <strong>O(n log n)</strong>。</li>\\n<li>在最坏的情况下（即输入数组已经是有序的或者逆序的），时间复杂度仍然接近 <strong>O(n log n)</strong>，这是由于双枢轴快速排序的特定实现方式。</li>\\n</ul>\\n</li>\\n<li><strong>对于对象数组（如 <code>Integer[]</code>、<code>String[]</code> 等）</strong>：\\n<ul>\\n<li><code>Arrays.sort()</code> 使用的是 <strong>归并排序的改进版（Timsort）</strong>。</li>\\n<li>这种排序算法的平均和最坏情况时间复杂度都是 <strong>O(n log n)</strong>。</li>\\n<li>Timsort 是一种稳定的排序算法，它优化了归并排序，在处理部分有序的数组时表现得尤其好。</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}`);export{d as comp,g as data};
