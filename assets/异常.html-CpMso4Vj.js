import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a,o as n}from"./app-BXVo6w5b.js";const t={};function l(p,i){return n(),s("div",null,i[0]||(i[0]=[a(`<h1 id="异常" tabindex="-1"><a class="header-anchor" href="#异常"><span>异常</span></a></h1><p><img src="https://cdn.jsdelivr.net/gh/davidliuk/images@master/blog/types-of-exceptions-in-java.png" alt="Java 异常类层次结构图" loading="lazy"></p><h3 id="exception-和-error-区别" tabindex="-1"><a class="header-anchor" href="#exception-和-error-区别"><span>Exception 和 Error 区别</span></a></h3><p>所有异常都有一个共同的祖先：<code>Throwable</code> 类。该类有两个重要的子类:</p><ul><li><p><strong><code>Exception</code></strong>：程序本身可以处理的异常，可以通过 <code>catch</code> 来进行捕获。<code>Exception</code> 又可以分为：</p><ul><li>Checked Exception (受检查异常，必须处理)</li><li>Unchecked Exception (不受检查异常，可以不处理)。</li></ul></li><li><p><strong><code>Error</code></strong>：<code>Error</code> 属于程序无法处理的错误 ，我们没办法通过 <code>catch</code> 来进行捕获不建议通过<code>catch</code>捕获 。例如</p><ul><li>Java 虚拟机运行错误（<code>Virtual MachineError</code>）</li><li>虚拟机内存不够错误（<code>OutOfMemoryError</code>）</li><li>栈溢出错误（<code>StackOverFlowError</code>）</li><li>类定义错误（<code>NoClassDefFoundError</code>）</li></ul><p>这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。</p></li></ul><h3 id="checked-exception-和-unchecked-exception-区别" tabindex="-1"><a class="header-anchor" href="#checked-exception-和-unchecked-exception-区别"><span>Checked Exception 和 Unchecked Exception 区别</span></a></h3><p><strong>Checked Exception</strong> 即 受检查异常 ，Java 代码在编译过程中，如果受检查异常没有被 <code>catch</code>或者<code>throws</code> 关键字处理的话，就没办法通过编译。</p><p>比如下面这段 IO 操作的代码：</p><p>RuntimeException = UncheckedException，可以不用 throw 也不用 try 包裹</p><blockquote><p>RuntimeException and its subclasses are unchecked exceptions. Unchecked exceptions do not need to be declared in a method or constructor&#39;s throws clause if they can be thrown by the execution of the method or constructor and propagate outside the method or constructor boundary.</p></blockquote><p>NullPointerException(空指针异常)、</p><p>IndexOutOfBoundsException(下标越界异常)、</p><p>ClassCastException(类转换异常)、</p><p>ArrayStoreException(数据存储异常，操作数组时类型不一致)、</p><p>IO 操作的 BufferOverflowException 异常;</p><p>RuntimeException 以外的异常，是非运行时异常、 checked exceptions 编译异常，是类型上都属于 Exception 类及其子类。从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如 IOException、SQLException 等以及用户自定义的 Exception 异常，一般情况下不自定义检查异常。</p><p>运行时异常（RuntimeException）是 Java 中的一种异常类型，它通常是由程序错误或逻辑错误引起的。与受检查异常（Checked Exception）不同，运行时异常不需要在方法签名中声明，也不需要在调用方法时显式地捕获或抛出。</p><p>以下是一些常见的运行时异常及其出现的场景：</p><ol><li><p>NullPointerException（空指针异常）：当尝试访问一个空对象的属性或方法时，会抛出 NullPointerException 异常。例如，当一个对象为 null 时，调用它的方法或属性就会抛出空指针异常。</p></li><li><p>ArrayIndexOutOfBoundsException（数组下标越界异常）：当尝试访问数组中不存在的元素时，会抛出 ArrayIndexOutOfBoundsException 异常。例如，当尝试访问数组中的负数下标或超出数组长度的下标时，就会抛出数组下标越界异常。</p></li><li><p>ClassCastException（类型转换异常）：当尝试将一个对象强制转换为不兼容的类型时，会抛出 ClassCastException 异常。例如，当尝试将一个字符串对象转换为整数类型时，就会抛出类型转换异常。</p></li><li><p>IllegalArgumentException（非法参数异常）：当传递给方法的参数不合法或不正确时，会抛出 IllegalArgumentException 异常。例如，当传递给方法的参数为 null 或超出有效范围时，就会抛出非法参数异常。</p></li><li><p>IllegalStateException（非法状态异常）：当对象处于不正确的状态时，会抛出 IllegalStateException 异常。例如，当尝试在未初始化的对象上调用方法时，就会抛出非法状态异常。</p></li></ol><p>需要注意的是，这些异常通常是由程序员的错误或逻辑错误引起的，因此在编写程序时应该尽可能避免这些异常的出现。</p><h2 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理"><span>异常处理</span></a></h2><p>在Java中，try-catch-finally块的执行顺序是按照以下方式进行的：</p><ol><li><p>首先，执行try块中的代码。</p></li><li><p>如果try块中的代码没有发生异常，则跳过catch块，直接执行finally块中的代码。</p></li><li><p>如果try块中的代码发生了异常，那么异常会被抛出，并且会按照代码中定义的顺序进行异常处理。</p><ul><li><p>首先，会检查catch块中是否有与抛出的异常类型匹配的catch语句。</p><ul><li><p>如果找到匹配的catch语句，则执行该catch块中的代码，并且在catch块执行完后，再执行finally块中的代码。</p></li><li><p>如果没有找到匹配的catch语句，则异常会被传递给上层调用栈中的异常处理机制，直到找到匹配的catch块或者程序终止。</p></li></ul></li></ul></li><li><p>最后，不论是否发生异常，无论是否有catch块被执行，finally块中的代码都会被执行。</p></li></ol><p>总结起来，try块中的代码会被优先执行，如果发生异常，则会执行匹配的catch块中的代码，然后执行finally块中的代码。如果没有发生异常，则直接执行finally块中的代码。无论是否发生异常，finally块中的代码都会被执行。</p><h3 id="return" tabindex="-1"><a class="header-anchor" href="#return"><span>return</span></a></h3><p>如果在try块中的代码中存在return语句，那么在执行return语句之前，会先执行finally块中的代码。然后，finally块中的代码执行完毕后，才会执行return语句。</p><p>finally 里面可以写 return，但是一定会执行，一旦写了，那么 try 和 catch 块里的 return 语句都会失效</p><p>如果finally块中也存在return语句，那么无论try块中的代码是否存在return语句，最终返回的值将是finally块中的return语句的返回值。这是因为finally块中的return语句会覆盖try块中的return语句。</p><h3 id="finally-中的代码一定会执行吗" tabindex="-1"><a class="header-anchor" href="#finally-中的代码一定会执行吗"><span>finally 中的代码一定会执行吗？</span></a></h3><p>finally块中的代码基本一定会被执行，除非在try块中使用了System.exit()方法导致程序终止。在这种情况下，finally块中的代码将不会被执行。</p><p>就比如说 finally 之前虚拟机被终止运行的话，finally 中的代码就不会被执行。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Try to do something&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    throw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> RuntimeException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;RuntimeException&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Catch Exception -&gt; &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 终止当前正在运行的Java虚拟机</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">exit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Finally&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Try to do something</span></span>
<span class="line"><span>Catch Exception -&gt; RuntimeException</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，在以下 2 种特殊情况下，<code>finally</code> 块的代码也不会被执行：</p><ol><li>程序所在的线程死亡。</li><li>关闭 CPU。</li></ol><hr><p>然而，有一些特殊情况下finally块可能不会被执行。以下是一些可能导致finally块不执行的情况：</p><ol><li>在try块中使用了System.exit()方法导致程序终止。在这种情况下，finally块中的代码将不会被执行。</li><li>在try块或catch块中发生了无限循环或死循环，导致程序无法正常结束。在这种情况下，finally块中的代码将不会被执行。</li><li>在try块或catch块中使用了Thread.stop()方法导致线程被强制终止。在这种情况下，finally块中的代码也将不会被执行。</li></ol>`,39)]))}const o=e(t,[["render",l],["__file","异常.html.vue"]]),h=JSON.parse(`{"path":"/se/lang/java/basic/%E5%BC%82%E5%B8%B8.html","title":"异常","lang":"en-US","frontmatter":{"description":"异常 Java 异常类层次结构图 Exception 和 Error 区别 所有异常都有一个共同的祖先：Throwable 类。该类有两个重要的子类: Exception：程序本身可以处理的异常，可以通过 catch 来进行捕获。Exception 又可以分为： Checked Exception (受检查异常，必须处理) Unchecked Exce...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/java/basic/%E5%BC%82%E5%B8%B8.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"异常"}],["meta",{"property":"og:description","content":"异常 Java 异常类层次结构图 Exception 和 Error 区别 所有异常都有一个共同的祖先：Throwable 类。该类有两个重要的子类: Exception：程序本身可以处理的异常，可以通过 catch 来进行捕获。Exception 又可以分为： Checked Exception (受检查异常，必须处理) Unchecked Exce..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/davidliuk/images@master/blog/types-of-exceptions-in-java.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-05-08T07:35:02.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-08T07:35:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"异常\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/davidliuk/images@master/blog/types-of-exceptions-in-java.png\\"],\\"dateModified\\":\\"2024-05-08T07:35:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":3,"title":"Exception 和 Error 区别","slug":"exception-和-error-区别","link":"#exception-和-error-区别","children":[]},{"level":3,"title":"Checked Exception 和 Unchecked Exception 区别","slug":"checked-exception-和-unchecked-exception-区别","link":"#checked-exception-和-unchecked-exception-区别","children":[]},{"level":2,"title":"异常处理","slug":"异常处理","link":"#异常处理","children":[{"level":3,"title":"return","slug":"return","link":"#return","children":[]},{"level":3,"title":"finally 中的代码一定会执行吗？","slug":"finally-中的代码一定会执行吗","link":"#finally-中的代码一定会执行吗","children":[]}]}],"git":{"createdTime":1680090419000,"updatedTime":1715153702000,"contributors":[{"name":"davidliuk","email":"l729641074@163.com","commits":2},{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":2},{"name":"liudawei47","email":"liudawei47@jd.com","commits":1}]},"readingTime":{"minutes":5.75,"words":1725},"filePathRelative":"se/lang/java/basic/异常.md","localizedDate":"March 29, 2023","excerpt":"\\n<p><img src=\\"https://cdn.jsdelivr.net/gh/davidliuk/images@master/blog/types-of-exceptions-in-java.png\\" alt=\\"Java 异常类层次结构图\\" loading=\\"lazy\\"></p>\\n<h3>Exception 和 Error 区别</h3>\\n<p>所有异常都有一个共同的祖先：<code>Throwable</code> 类。该类有两个重要的子类:</p>\\n<ul>\\n<li>\\n<p><strong><code>Exception</code></strong>：程序本身可以处理的异常，可以通过 <code>catch</code> 来进行捕获。<code>Exception</code> 又可以分为：</p>\\n<ul>\\n<li>Checked Exception (受检查异常，必须处理)</li>\\n<li>Unchecked Exception (不受检查异常，可以不处理)。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong><code>Error</code></strong>：<code>Error</code> 属于程序无法处理的错误 ，我们没办法通过 <code>catch</code> 来进行捕获不建议通过<code>catch</code>捕获 。例如</p>\\n<ul>\\n<li>Java 虚拟机运行错误（<code>Virtual MachineError</code>）</li>\\n<li>虚拟机内存不够错误（<code>OutOfMemoryError</code>）</li>\\n<li>栈溢出错误（<code>StackOverFlowError</code>）</li>\\n<li>类定义错误（<code>NoClassDefFoundError</code>）</li>\\n</ul>\\n<p>这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。</p>\\n</li>\\n</ul>","autoDesc":true}`);export{o as comp,h as data};
