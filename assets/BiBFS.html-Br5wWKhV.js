import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as l,o as r}from"./app-BXVo6w5b.js";const o={};function a(n,e){return r(),t("div",null,e[0]||(e[0]=[l('<h1 id="双向-bfs" tabindex="-1"><a class="header-anchor" href="#双向-bfs"><span>双向 BFS</span></a></h1><p>slidingPuzzle</p><p>相关问题</p><ol><li><p>是否有解：</p><p>逆序对数，mergeSort</p></li><li><p>最优解：BFS/A*</p></li></ol><p>求最少操作次数<br> 最少操作次数=最短步数=简单图最短路径=BFS<br> 图中的点是什么？如何表示？</p><p>进一步优化<br> 同时知道起点和终点<br> 可以进行双向宽度优先搜索算法<br> Bi-directional BFS</p><p>变成根号t</p><ul><li>word ladder</li><li>knight shortest path I, II</li><li>sliding puzzle III</li></ul><hr><p>面试的时候不要上来就写BiBFS，要由易到难</p><p>先问一下可以写单向bfs吗？</p><ul><li>ok的话，先把单项的写完，写完一定过</li><li>如果不ok，再写双向bfs</li></ul><hr><p>最短路径：</p><ul><li>简单图：BFS</li><li>复杂图 <ul><li>SPFA 版本 BFS</li><li>也可以进一步用heapq/PriorityQueue代替deque/ArrayDeque</li></ul></li><li>求路径的具体值 <ul><li>可以将具体的路径同时放在queue或者distance里</li></ul></li></ul><p>同时给出起点和终点？</p><ul><li>双向BFS</li></ul>',17)]))}const s=i(o,[["render",a],["__file","BiBFS.html.vue"]]),u=JSON.parse(`{"path":"/algo/summary/search/BFS/BiBFS.html","title":"双向 BFS","lang":"en-US","frontmatter":{"description":"双向 BFS slidingPuzzle 相关问题 是否有解： 逆序对数，mergeSort 最优解：BFS/A* 求最少操作次数 最少操作次数=最短步数=简单图最短路径=BFS 图中的点是什么？如何表示？ 进一步优化 同时知道起点和终点 可以进行双向宽度优先搜索算法 Bi-directional BFS 变成根号t word ladder knigh...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/algo/summary/search/BFS/BiBFS.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"双向 BFS"}],["meta",{"property":"og:description","content":"双向 BFS slidingPuzzle 相关问题 是否有解： 逆序对数，mergeSort 最优解：BFS/A* 求最少操作次数 最少操作次数=最短步数=简单图最短路径=BFS 图中的点是什么？如何表示？ 进一步优化 同时知道起点和终点 可以进行双向宽度优先搜索算法 Bi-directional BFS 变成根号t word ladder knigh..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-12-13T01:45:42.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-13T01:45:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"双向 BFS\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-13T01:45:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[],"git":{"createdTime":1732244737000,"updatedTime":1734054342000,"contributors":[{"name":"David Liu","email":"liudawei@seas.upenn.edu","commits":1},{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro-3.local","commits":1}]},"readingTime":{"minutes":0.73,"words":219},"filePathRelative":"algo/summary/search/BFS/BiBFS.md","localizedDate":"November 22, 2024","excerpt":"\\n<p>slidingPuzzle</p>\\n<p>相关问题</p>\\n<ol>\\n<li>\\n<p>是否有解：</p>\\n<p>逆序对数，mergeSort</p>\\n</li>\\n<li>\\n<p>最优解：BFS/A*</p>\\n</li>\\n</ol>\\n<p>求最少操作次数<br>\\n最少操作次数=最短步数=简单图最短路径=BFS<br>\\n图中的点是什么？如何表示？</p>\\n<p>进一步优化<br>\\n同时知道起点和终点<br>\\n可以进行双向宽度优先搜索算法<br>\\nBi-directional BFS</p>\\n<p>变成根号t</p>\\n<ul>\\n<li>word ladder</li>\\n<li>knight shortest path I, II</li>\\n<li>sliding puzzle III</li>\\n</ul>","autoDesc":true}`);export{s as comp,u as data};
