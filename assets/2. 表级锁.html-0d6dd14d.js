import{_ as e,V as a,W as i,a0 as l}from"./framework-705b829b.js";const r={},p=l('<h1 id="表级锁" tabindex="-1"><a class="header-anchor" href="#表级锁" aria-hidden="true">#</a> 表级锁</h1><p>每次操作锁住整张表。锁定粒度大，发生锁冲突的概率最高，并发度最低。应用在MyISAM、InnoDB、BDB</p><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h3><p>对于表级锁，主要分为以下三类：</p><ul><li>表锁</li><li>元数据锁（MDL）</li><li>意向锁</li></ul><h3 id="表锁" tabindex="-1"><a class="header-anchor" href="#表锁" aria-hidden="true">#</a> 表锁</h3><p>对于表锁，分为两类：</p><ol><li><p>表共享读锁（read lock）</p><p>加锁以后可以自己读，但是不可以写（会拒绝执行）</p><p>不会阻塞其他客户端的读，会阻塞其他客户端的写</p></li><li><p>表独占写锁（write lock）</p><p>加锁以后自己可以读写</p><p>但是会阻塞别的客户端的读写</p></li></ol><p>语法</p><ol><li><p>加锁：</p><p><code>lock tables &lt;表名, ...&gt; read/write</code></p></li><li><p>释放锁：</p><ul><li><code>unlock tables</code></li><li>客户端断开连接</li></ul></li></ol><h3 id="元数据锁-mdl" tabindex="-1"><a class="header-anchor" href="#元数据锁-mdl" aria-hidden="true">#</a> 元数据锁（MDL）</h3><p>目的：避免执行DML和DDL语句的冲突问题。</p><p>不用手动加，加锁过程是系统自动控制，无需显示使用，在访问一张表的时候会自动加上。</p><ul><li>对一张表进行 CRUD 操作时，加的是 <strong>MDL 读锁</strong>；</li><li>对一张表做结构变更操作（DDL）的时候，加的是 <strong>MDL 写锁</strong>；</li></ul><p>MDL 是为了保证当用户对表执行 CRUD 操作时，防止其他线程对这个表结构做了变更。</p><h3 id="意向锁" tabindex="-1"><a class="header-anchor" href="#意向锁" aria-hidden="true">#</a> 意向锁</h3><p>目的：规避行锁和表锁之间在加锁时的冲突问题，避免表锁在加锁的时候逐行地去检查这张表行锁的情况。</p><p>不用手动加，是系统自动控制</p><ul><li><p>意向共享锁 IS</p><p>与表锁共享锁（read）兼容，与表锁排他锁互斥</p></li><li><p>意向排他锁 IX</p></li></ul><p>意向锁之间不互斥</p><h3 id="auto-inc-锁" tabindex="-1"><a class="header-anchor" href="#auto-inc-锁" aria-hidden="true">#</a> AUTO-INC 锁</h3><p>目的：实现主键自增</p>',22),d=[p];function t(h,n){return a(),i("div",null,d)}const c=e(r,[["render",t],["__file","2. 表级锁.html.vue"]]);export{c as default};
