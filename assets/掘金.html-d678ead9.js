import{_ as i,V as e,W as a,Z as l}from"./framework-e5d7a6b2.js";const r={},n=l('<h1 id="掘金" tabindex="-1"><a class="header-anchor" href="#掘金" aria-hidden="true">#</a> 掘金</h1><h3 id="技术选型" tabindex="-1"><a class="header-anchor" href="#技术选型" aria-hidden="true">#</a> 技术选型</h3><p>后端</p><ul><li>Spring Boot 2.8, Spring Cloud Gateway, open feign</li><li>sa-token</li><li>MySQL, Redis, Redisson</li><li>mapstruct, hutool</li><li>knife4j</li><li>腾讯云cos</li></ul><h3 id="系统业务" tabindex="-1"><a class="header-anchor" href="#系统业务" aria-hidden="true">#</a> 系统业务</h3><p>发帖、关注、评分（隐式）</p><p>用户注册、登录、注销</p><p>关注用户</p><p>用户点赞、收藏、点踩文章</p><h3 id="人员分工" tabindex="-1"><a class="header-anchor" href="#人员分工" aria-hidden="true">#</a> 人员分工</h3><ul><li>前端两个同学</li><li>后端两个同学</li></ul><h3 id="项目亮点" tabindex="-1"><a class="header-anchor" href="#项目亮点" aria-hidden="true">#</a> 项目亮点</h3><p>一款类掘金的知识分享平台。利用 TrustSVD 社交推荐算法，实现个性化推荐。</p><ol><li>使用 Spring Cloud 基于Spring Cloud + Nacos 实现项目的微服务化，根据业务划分为用户、文章、文件和推送四个服务，提高项目的可拓展性和容错性。</li><li>使用 TrustSVD 社交推荐算法，实现智能推荐 + Timeline 的 Feed 流，实现个性化推荐的同时又避免信息茧房，同时一定程度上解决了推荐系统的冷启动问题。</li><li>基于 Spring Scheduler 实现每日 TrustSVD 推荐数据重新计算，保证推荐的准确性，提升用户的访问体验，并通过 Redisson 分布式锁保证集群中同一时刻的定时任务只执行一次。</li><li>使用腾讯云 COS 存储来集中存管用户图片，并通过限制大小、校验后缀等方式预防文件上传漏洞，增强安全性。</li><li>定义统一的数据返回类和全局异常处理逻辑，规范了数据的传输以及异常的处理。</li><li>对于项目中的推荐系统的配置对象，采用 双检锁单例模式 进行管理，从而复用对象，避免了重复创建对象的开销，便于集中维护管理。</li><li>使用 MD5 + 随机加盐 算法保证用户密码不被泄漏，提高系统的安全性。</li><li>使用 MapStruct 进行 JavaBean 映射的管理，提升性能和代码的精简性。</li></ol><p>由于传统的MD5加密，黑客可以通过查散列值字典（例如彩虹表），得到某用户的密码。因此目前可以用MD5加密配合上随机盐值，可极大的防止密码被破解。</p>',15),t=[n];function d(h,s){return e(),a("div",null,t)}const c=i(r,[["render",d],["__file","掘金.html.vue"]]);export{c as default};
