import{_ as a,V as s,W as e,a0 as n}from"./framework-705b829b.js";const l={},t=n(`<h1 id="全局锁" tabindex="-1"><a class="header-anchor" href="#全局锁" aria-hidden="true">#</a> 全局锁</h1><p>对整个数据库实例加锁，加锁以后整个实例处于只读状态，后续的DML写操作、DDL语句，以及更新操作的事物提交语句都将被阻塞。</p><p>典型使用场景：全库的逻辑备份，对所有表进行锁定，从而获取一致性视图，保证数据的完整性。</p><p>加全局锁语句：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>flush <span class="token keyword">tables</span> <span class="token keyword">with</span> <span class="token keyword">read</span> <span class="token keyword">lock</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>释放锁：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">unlock</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>数据库备份</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysqldump <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p1234</span> itcast <span class="token operator">&gt;</span> itcast.sql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>特点</p><p>数据库中加全局锁，是一个比较重的操作，存在以下问题：</p><ol><li>如果再主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆。</li><li>如果在从库上备份，那么在备份期间从库不能执行主库同步过来的二进制日志(binlog)，会导致主从延迟。</li></ol><p>解决方案：</p><p>在InnoDB引擎中，可以在备份时加上参数--single-transaction来完成不加锁的一致性备份，通过快照读实现的</p>`,14),i=[t];function p(d,o){return s(),e("div",null,i)}const c=a(l,[["render",p],["__file","1. 全局锁.html.vue"]]);export{c as default};
