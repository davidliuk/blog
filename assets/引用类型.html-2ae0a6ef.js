import{_ as e,V as a,W as r,Z as n}from"./framework-e5d7a6b2.js";const h={},d=n('<h1 id="引用类型" tabindex="-1"><a class="header-anchor" href="#引用类型" aria-hidden="true">#</a> 引用类型</h1><h2 id="强引用" tabindex="-1"><a class="header-anchor" href="#强引用" aria-hidden="true">#</a> 强引用</h2><p>普通变量赋值即为强引用，如</p><p><code>A a = new A();</code></p><h3 id="回收特点" tabindex="-1"><a class="header-anchor" href="#回收特点" aria-hidden="true">#</a> 回收特点</h3><p>当内存空间不足，Java虚拟机宁愿抛出OutOfMemoryError错误，使程序异常终止，也不会靠回收具有强引用的对象，来解决内存不足的问题。通过 GC Root 的引用链，如果强引用不到该对象，该对象才能被回收。</p><p>如果想中断或者回收强引用对象可以显式地将引用赋值为null(a=null)，这样的话JVM就会在合适的时间，进行垃圾回收。</p><h2 id="软引用" tabindex="-1"><a class="header-anchor" href="#软引用" aria-hidden="true">#</a> 软引用</h2><p>引用和对象通过<code>SoftReference</code>建立关联</p><p><code>SoftReference a = new SoftReference(new A());</code></p><h3 id="回收特点-1" tabindex="-1"><a class="header-anchor" href="#回收特点-1" aria-hidden="true">#</a> 回收特点</h3><p><strong>“内存不够就回收，内存充足不回收”</strong></p><p>“适合做缓存”</p><p>2、当系统内存够用就保留不回收（及时发生了GC），内存不足时，会被回收</p><p>3、软引用自身不会被垃圾回收，因为GC Root还引用着，软引用自身需要配合引用队列来释放。</p><p>软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java虚拟机就会把这个软引用加入到与之关联的引用队列中。</p><p>4、软引用适合缓存使用的场景，当内存不够的时候，对象是被回收的。</p><h3 id="应用案例" tabindex="-1"><a class="header-anchor" href="#应用案例" aria-hidden="true">#</a> 应用案例</h3><p>缓存：</p><h2 id="弱引用" tabindex="-1"><a class="header-anchor" href="#弱引用" aria-hidden="true">#</a> 弱引用</h2><p><code>WeakReference a = new WeakReference(new A());</code></p><h3 id="回收特点-2" tabindex="-1"><a class="header-anchor" href="#回收特点-2" aria-hidden="true">#</a> 回收特点</h3><p><strong>“只要发生GC，一定被回收”</strong></p><p>2、如果仅有弱引用引用该对象时，只要发生垃圾回收，就会释放该对象</p><p>3、当一个对象仅仅被weak reference指向, 而没有任何其他strong reference指向的时候, 如果GC运行, 那么这个对象就会被回收。如果存在强引用同时与之关联，则进行垃圾回收时也不会回收该对象。</p><p>4、ThreadLocal和WeakHashMap内部都是使用了弱引用，用来保证那些不被用到的key值，在垃圾回收的时候可以被回收掉。</p><h2 id="虚引用" tabindex="-1"><a class="header-anchor" href="#虚引用" aria-hidden="true">#</a> 虚引用</h2><p><code>PhantomReference a = new PhantomReference(new A(), referenceQueue);</code></p><ol><li>也称为幽灵引用或者幻影引用，它是最弱的引用关系。无法通过虚引用来取得一个对象实例。</li><li>为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。PhantomReference类来实现虚引用。</li><li>必须配合引用队列一起使用，当虚引用所引用的对象被回收时（a对象、b对象），由 Reference Handler 线程将虚引用对象入队，这样就可以知道哪些对象被回收，从而对它们关联的资源做进一步处理</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>1、对于强引用，平时在编写代码时会经常使用。</p><p>2、而其他三种类型的引用，使用得最多就是软引用和弱引用，这两种既有相似之处又有区别，他们都来描述非必须对象。</p><p>3、被软引用关联的对象只有在内存不足时才会被回收，而被弱引用关联的对象在JVM进行垃圾回收时总会被回收。</p><p>4、Java中4种引用的级别由高到低依次为：强引用 &gt; 软引用 &gt; 弱引用 &gt; 虚引用</p>',34),c=[d];function t(o,i){return a(),r("div",null,c)}const s=e(h,[["render",t],["__file","引用类型.html.vue"]]);export{s as default};
