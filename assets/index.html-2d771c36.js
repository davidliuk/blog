import{_ as e,V as a,W as i,a0 as l}from"./framework-705b829b.js";const t={},r=l('<h1 id="线程安全" tabindex="-1"><a class="header-anchor" href="#线程安全" aria-hidden="true">#</a> 线程安全</h1><h2 id="并发编程三要素" tabindex="-1"><a class="header-anchor" href="#并发编程三要素" aria-hidden="true">#</a> 并发编程三要素</h2><ul><li>可见性，一个线程对共享变量修改，另一个线程能看到最新的结果</li><li>有序性，一个线程内代码按编写顺序执行（多线程下不能）</li><li>原子性，一个线程内多行代码以一个整体运行，期间不难有其他线程的代码插队</li></ul><p>volatile能够保证共享变量的可见性与有序性，但是并不难保证原子性</p><p>volatile关键字可以禁止指令进行重排序优化</p><p>原子性的实现</p><ul><li>锁</li><li>CAS</li></ul><p>指令交错，就会导致问题</p><h2 id="jmm" tabindex="-1"><a class="header-anchor" href="#jmm" aria-hidden="true">#</a> JMM</h2><p>JMM(Java内存模型)主要定义了对于一个共享变量，当另一个线程对这个共享变量执行写操作后，这个线程对这个共享变量的可见性。</p>',10),d=[r];function n(h,c){return a(),i("div",null,d)}const s=e(t,[["render",n],["__file","index.html.vue"]]);export{s as default};
