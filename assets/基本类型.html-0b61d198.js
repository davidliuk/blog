import{_ as e,V as a,W as d,Z as o}from"./framework-e5d7a6b2.js";const c={},r=o('<h1 id="基本类型" tabindex="-1"><a class="header-anchor" href="#基本类型" aria-hidden="true">#</a> 基本类型</h1><p>Java 中有 8 种基本数据类型，分别为：</p><ul><li>6 种数字类型： <ul><li>4 种整数型：<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code></li><li>2 种浮点型：<code>float</code>、<code>double</code></li></ul></li><li>1 种字符类型：<code>char</code></li><li>1 种布尔型：<code>boolean</code></li></ul><h2 id="数字精度" tabindex="-1"><a class="header-anchor" href="#数字精度" aria-hidden="true">#</a> 数字精度</h2><h3 id="浮点数丢精" tabindex="-1"><a class="header-anchor" href="#浮点数丢精" aria-hidden="true">#</a> 浮点数丢精</h3><h3 id="大整数存储" tabindex="-1"><a class="header-anchor" href="#大整数存储" aria-hidden="true">#</a> 大整数存储</h3><h2 id="包装类型" tabindex="-1"><a class="header-anchor" href="#包装类型" aria-hidden="true">#</a> 包装类型</h2><h3 id="缓存机制" tabindex="-1"><a class="header-anchor" href="#缓存机制" aria-hidden="true">#</a> 缓存机制</h3><p><code>Byte</code>,<code>Short</code>,<code>Integer</code>,<code>Long</code> 这 4 种包装类默认创建了数值 <strong>[-128，127]</strong> 的相应类型的缓存数据，<code>Character</code> 创建了数值在 <strong>[0,127]</strong> 范围的缓存数据，<code>Boolean</code> 直接返回 <code>True</code> or <code>False</code>。</p><p>记住：<strong>所有整型包装类对象之间值的比较，全部使用 equals 方法比较</strong>。</p><h3 id="自动装箱和自动拆箱" tabindex="-1"><a class="header-anchor" href="#自动装箱和自动拆箱" aria-hidden="true">#</a> 自动装箱和自动拆箱</h3><p>从字节码中，我们发现装箱其实就是调用了 包装类的<code>valueOf()</code>方法，拆箱其实就是调用了 <code>xxxValue()</code>方法。</p>',12),h=[r];function t(i,n){return a(),d("div",null,h)}const s=e(c,[["render",t],["__file","基本类型.html.vue"]]);export{s as default};
