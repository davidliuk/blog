const n=JSON.parse(`{"key":"v-561de50c","path":"/cs/algo/summary/5.%20%E6%8E%92%E5%BA%8F.html","title":"排序","lang":"en-US","frontmatter":{"description":"排序 快速排序 partition算法 分治算法：整体有序再局部有序 取pivot，经验下选择中点是最好的 1,1,1,3 1 - 1 + - + 中心点只能是严格大或严格小才++--，等于的时候要交换，不然的话如果是全部相等的序列每次都不变 必须是left &lt;= right 不然会无限递归，而且要防止左右有交集 public void sortInterger(int[] A) { if (A == null || A.length == 0) { return; } quickSort(A, 0, A.length - 1); } void quickSort(int[] A, int start, int end) { if (start == end) { return; } int left = start, right = end; int pivot = A[(start + end) / 2]; // point 1 // partition算法 while (left &lt;= right) { // point 2 while (left &lt;= right &amp;&amp; A[left] &lt; pivot) { //point 3 left++; } while (left &lt;= right &amp;&amp; A[right] &gt; pivot) { right--; } if (left &lt;= right) { int temp = A[left]; A[left] = A[right]; A[right] = temp; left++; right--; } } quickSort(A, start, right); quickSort(A, left, end); }","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/cs/algo/summary/5.%20%E6%8E%92%E5%BA%8F.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"排序"}],["meta",{"property":"og:description","content":"排序 快速排序 partition算法 分治算法：整体有序再局部有序 取pivot，经验下选择中点是最好的 1,1,1,3 1 - 1 + - + 中心点只能是严格大或严格小才++--，等于的时候要交换，不然的话如果是全部相等的序列每次都不变 必须是left &lt;= right 不然会无限递归，而且要防止左右有交集 public void sortInterger(int[] A) { if (A == null || A.length == 0) { return; } quickSort(A, 0, A.length - 1); } void quickSort(int[] A, int start, int end) { if (start == end) { return; } int left = start, right = end; int pivot = A[(start + end) / 2]; // point 1 // partition算法 while (left &lt;= right) { // point 2 while (left &lt;= right &amp;&amp; A[left] &lt; pivot) { //point 3 left++; } while (left &lt;= right &amp;&amp; A[right] &gt; pivot) { right--; } if (left &lt;= right) { int temp = A[left]; A[left] = A[right]; A[right] = temp; left++; right--; } } quickSort(A, start, right); quickSort(A, left, end); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-01-01T04:24:51.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-01-01T04:24:51.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/cs/algo/summary/5.%20%E6%8E%92%E5%BA%8F.html"}]]},"headers":[{"level":3,"title":"快速排序","slug":"快速排序","link":"#快速排序","children":[]},{"level":3,"title":"归并排序","slug":"归并排序","link":"#归并排序","children":[]},{"level":3,"title":"快速选择","slug":"快速选择","link":"#快速选择","children":[]}],"git":{"createdTime":1670121259000,"updatedTime":1672547091000,"contributors":[{"name":"DavidLiu","email":"l729641074@163.com","commits":1},{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":2.13,"words":640},"localizedDate":"December 4, 2022","filePathRelative":"cs/algo/summary/5. 排序.md","excerpt":"<h1> 排序</h1>\\n<h3> 快速排序</h3>\\n<p>partition算法</p>\\n<p>分治算法：整体有序再局部有序</p>\\n<p>取pivot，经验下选择中点是最好的</p>\\n<p>1,1,1,3</p>\\n<p>1  -     1</p>\\n<p>+  - +</p>\\n<p>中心点只能是严格大或严格小才++--，等于的时候要交换，不然的话如果是全部相等的序列每次都不变</p>\\n<p>必须是left &lt;= right 不然会无限递归，而且要防止左右有交集</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">sortInterger</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token class-name\\">A</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">A</span> <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">||</span> <span class=\\"token class-name\\">A</span><span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n    <span class=\\"token function\\">quickSort</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">A</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">A</span><span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">quickSort</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token class-name\\">A</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> start<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> end<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>start <span class=\\"token operator\\">==</span> end<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n    <span class=\\"token keyword\\">int</span> left <span class=\\"token operator\\">=</span> start<span class=\\"token punctuation\\">,</span> right <span class=\\"token operator\\">=</span> end<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> pivot <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">A</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">(</span>start <span class=\\"token operator\\">+</span> end<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">/</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// point 1</span>\\n    \\n    <span class=\\"token comment\\">// partition算法</span>\\n    <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>left <span class=\\"token operator\\">&lt;=</span> right<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">// point 2</span>\\n        <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>left <span class=\\"token operator\\">&lt;=</span> right <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token class-name\\">A</span><span class=\\"token punctuation\\">[</span>left<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&lt;</span> pivot<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">//point 3</span>\\n            left<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>left <span class=\\"token operator\\">&lt;=</span> right <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token class-name\\">A</span><span class=\\"token punctuation\\">[</span>right<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&gt;</span> pivot<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            right<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>left <span class=\\"token operator\\">&lt;=</span> right<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">int</span> temp <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">A</span><span class=\\"token punctuation\\">[</span>left<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">A</span><span class=\\"token punctuation\\">[</span>left<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">A</span><span class=\\"token punctuation\\">[</span>right<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">A</span><span class=\\"token punctuation\\">[</span>right<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> temp<span class=\\"token punctuation\\">;</span>\\n            left<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n            right<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n    <span class=\\"token function\\">quickSort</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">A</span><span class=\\"token punctuation\\">,</span> start<span class=\\"token punctuation\\">,</span> right<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">quickSort</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">A</span><span class=\\"token punctuation\\">,</span> left<span class=\\"token punctuation\\">,</span> end<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
