import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a as i,o as n}from"./app-C_tIvXCt.js";const a={};function s(p,e){return n(),l("div",null,e[0]||(e[0]=[i('<h1 id="type" tabindex="-1"><a class="header-anchor" href="#type"><span>Type</span></a></h1><ul><li><p>let 变量（可以&quot;重新绑定&quot;）</p><ul><li><p>可变变量 mut</p></li><li><p>不可变变量</p></li></ul></li><li><p>const 常量（不可&quot;重新绑定&quot;）</p></li></ul><p>数据类型</p><p>基本类型：</p><ul><li>i32</li><li>u32</li><li>f64</li><li>bool</li><li>char</li></ul><p>函数</p><h2 id="所有权-ownership" tabindex="-1"><a class="header-anchor" href="#所有权-ownership"><span>所有权 Ownership</span></a></h2><h3 id="结构体-structs" tabindex="-1"><a class="header-anchor" href="#结构体-structs"><span>结构体 (Structs)</span></a></h3><h3 id="枚举-enums" tabindex="-1"><a class="header-anchor" href="#枚举-enums"><span>枚举 (Enums)</span></a></h3><h3 id="模式匹配-match" tabindex="-1"><a class="header-anchor" href="#模式匹配-match"><span>模式匹配 (match)</span></a></h3><h3 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理"><span>错误处理</span></a></h3><p>Rust 有两种主要的错误处理方式：<code>Result&lt;T, E&gt;</code> 和 <code>Option&lt;T&gt;</code>。</p><h1 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器"><span>迭代器</span></a></h1><h3 id="所有权规则" tabindex="-1"><a class="header-anchor" href="#所有权规则"><span>所有权规则</span></a></h3><p>所有权有以下三条规则：</p><ul><li>Rust 中的每个值都有一个变量，称为其所有者。</li><li>一次只能有一个所有者。</li><li>当所有者不在程序运行范围时，该值将被删除。</li></ul><p>Move</p><p>Clone</p>',18)]))}const c=t(a,[["render",s],["__file","type.html.vue"]]),h=JSON.parse(`{"path":"/se/lang/rust/type.html","title":"Type","lang":"en-US","frontmatter":{"description":"Type let 变量（可以\\"重新绑定\\"） 可变变量 mut 不可变变量 const 常量（不可\\"重新绑定\\"） 数据类型 基本类型： i32 u32 f64 bool char 函数 所有权 Ownership 结构体 (Structs) 枚举 (Enums) 模式匹配 (match) 错误处理 Rust 有两种主要的错误处理方式：Result<T, ...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/rust/type.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"Type"}],["meta",{"property":"og:description","content":"Type let 变量（可以\\"重新绑定\\"） 可变变量 mut 不可变变量 const 常量（不可\\"重新绑定\\"） 数据类型 基本类型： i32 u32 f64 bool char 函数 所有权 Ownership 结构体 (Structs) 枚举 (Enums) 模式匹配 (match) 错误处理 Rust 有两种主要的错误处理方式：Result<T, ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-05-29T23:04:59.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-29T23:04:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Type\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-29T23:04:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":2,"title":"所有权 Ownership","slug":"所有权-ownership","link":"#所有权-ownership","children":[{"level":3,"title":"结构体 (Structs)","slug":"结构体-structs","link":"#结构体-structs","children":[]},{"level":3,"title":"枚举 (Enums)","slug":"枚举-enums","link":"#枚举-enums","children":[]},{"level":3,"title":"模式匹配 (match)","slug":"模式匹配-match","link":"#模式匹配-match","children":[]},{"level":3,"title":"错误处理","slug":"错误处理","link":"#错误处理","children":[]},{"level":3,"title":"所有权规则","slug":"所有权规则","link":"#所有权规则","children":[]}]}],"git":{"createdTime":1748450106000,"updatedTime":1748559899000,"contributors":[{"name":"David","email":"l729641074@163.com","commits":1},{"name":"dawei.liu","email":"dawei.liu@bytedance.com","commits":1}]},"readingTime":{"minutes":0.5,"words":150},"filePathRelative":"se/lang/rust/type.md","localizedDate":"May 28, 2025","excerpt":"\\n<ul>\\n<li>\\n<p>let 变量（可以\\"重新绑定\\"）</p>\\n<ul>\\n<li>\\n<p>可变变量 mut</p>\\n</li>\\n<li>\\n<p>不可变变量</p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>const 常量（不可\\"重新绑定\\"）</p>\\n</li>\\n</ul>\\n<p>数据类型</p>\\n<p>基本类型：</p>\\n<ul>\\n<li>i32</li>\\n<li>u32</li>\\n<li>f64</li>\\n<li>bool</li>\\n<li>char</li>\\n</ul>\\n<p>函数</p>\\n<h2>所有权 Ownership</h2>\\n<h3>结构体 (Structs)</h3>","autoDesc":true}`);export{c as comp,h as data};
