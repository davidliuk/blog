const t=JSON.parse(`{"key":"v-e76cd190","path":"/se/lang/java/jvm/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5.html","title":"线上问题排查","lang":"en-US","frontmatter":{"description":"线上问题排查 CPU 过高/爆掉 JVM 调优过程中，如果 CPU 爆掉了，可以通过以下步骤进行排查： 使用 top 命令查看 CPU 占用率最高的进程，确定是哪个进程导致了 CPU 爆满。 使用 jstack 命令获取 Java 进程的线程堆栈信息，查看哪些线程正在运行，是否存在死循环、长时间等待等问题。 使用 jmap 命令获取 Java 进程的内存信息，查看堆内存使用情况、GC 情况等，是否存在内存泄漏等问题。 使用 jstat 命令获取 Java 进程的 GC 情况，查看 GC 频率、GC 时间等，是否存在频繁的 Full GC 等问题。 根据以上信息，确定问题所在，进行相应的优化和调整，例如优化代码、调整 JVM 参数、增加硬件资源等。","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/java/jvm/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"线上问题排查"}],["meta",{"property":"og:description","content":"线上问题排查 CPU 过高/爆掉 JVM 调优过程中，如果 CPU 爆掉了，可以通过以下步骤进行排查： 使用 top 命令查看 CPU 占用率最高的进程，确定是哪个进程导致了 CPU 爆满。 使用 jstack 命令获取 Java 进程的线程堆栈信息，查看哪些线程正在运行，是否存在死循环、长时间等待等问题。 使用 jmap 命令获取 Java 进程的内存信息，查看堆内存使用情况、GC 情况等，是否存在内存泄漏等问题。 使用 jstat 命令获取 Java 进程的 GC 情况，查看 GC 频率、GC 时间等，是否存在频繁的 Full GC 等问题。 根据以上信息，确定问题所在，进行相应的优化和调整，例如优化代码、调整 JVM 参数、增加硬件资源等。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-08-21T10:17:45.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-08-21T10:17:45.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/se/lang/java/jvm/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5.html"}]]},"headers":[{"level":2,"title":"CPU 过高/爆掉","slug":"cpu-过高-爆掉","link":"#cpu-过高-爆掉","children":[]}],"git":{"createdTime":1684318252000,"updatedTime":1692613065000,"contributors":[{"name":"liudawei47","email":"liudawei47@jd.com","commits":1},{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":0.93,"words":280},"localizedDate":"May 17, 2023","filePathRelative":"se/lang/java/jvm/问题排查.md","excerpt":"<h1> 线上问题排查</h1>\\n<h2> CPU 过高/爆掉</h2>\\n<p>JVM 调优过程中，如果 CPU 爆掉了，可以通过以下步骤进行排查：</p>\\n<ol>\\n<li>\\n<p>使用 top 命令查看 CPU 占用率最高的进程，确定是哪个进程导致了 CPU 爆满。</p>\\n</li>\\n<li>\\n<p>使用 jstack 命令获取 Java 进程的线程堆栈信息，查看哪些线程正在运行，是否存在死循环、长时间等待等问题。</p>\\n</li>\\n<li>\\n<p>使用 jmap 命令获取 Java 进程的内存信息，查看堆内存使用情况、GC 情况等，是否存在内存泄漏等问题。</p>\\n</li>\\n<li>\\n<p>使用 jstat 命令获取 Java 进程的 GC 情况，查看 GC 频率、GC 时间等，是否存在频繁的 Full GC 等问题。</p>\\n</li>\\n<li>\\n<p>根据以上信息，确定问题所在，进行相应的优化和调整，例如优化代码、调整 JVM 参数、增加硬件资源等。</p>\\n</li>\\n</ol>","autoDesc":true}`);export{t as data};
