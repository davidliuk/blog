const e=JSON.parse(`{"key":"v-e9f43e02","path":"/se/devops/unix/basic/6.%20process-ctrl.html","title":"6. 进程控制","lang":"en-US","frontmatter":{"description":"6. 进程控制 fork复制当前进程，状态和pc也完全一样，执行fork后面部分的程序 换代码、execute操作 Linux里面子进程的创建，不会创建 cow写时复制 redis持久化：fork下来复制，然后主线程的修改，写时复制 进程死亡的方式 自行死亡 执行完毕，如，c的main函数，返回值是进程返回值，返回给父进程看 被杀死 kill，软中断 kill -l 可以看到所有的信号，谁杀的、怎么死的 kill -9 xxx 出错没了，call down","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/devops/unix/basic/6.%20process-ctrl.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"6. 进程控制"}],["meta",{"property":"og:description","content":"6. 进程控制 fork复制当前进程，状态和pc也完全一样，执行fork后面部分的程序 换代码、execute操作 Linux里面子进程的创建，不会创建 cow写时复制 redis持久化：fork下来复制，然后主线程的修改，写时复制 进程死亡的方式 自行死亡 执行完毕，如，c的main函数，返回值是进程返回值，返回给父进程看 被杀死 kill，软中断 kill -l 可以看到所有的信号，谁杀的、怎么死的 kill -9 xxx 出错没了，call down"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-08-17T03:33:13.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-08-17T03:33:13.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/se/devops/unix/basic/6.%20process-ctrl.html"}]]},"headers":[{"level":2,"title":"进程死亡的方式","slug":"进程死亡的方式","link":"#进程死亡的方式","children":[]},{"level":2,"title":"多进程编程","slug":"多进程编程","link":"#多进程编程","children":[]},{"level":2,"title":"信号","slug":"信号","link":"#信号","children":[]}],"git":{"createdTime":1672663528000,"updatedTime":1692243193000,"contributors":[{"name":"liudawei47","email":"liudawei47@jd.com","commits":3},{"name":"davidliuk","email":"l729641074@163.com","commits":1},{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":4.56,"words":1367},"localizedDate":"January 2, 2023","filePathRelative":"se/devops/unix/basic/6. process-ctrl.md","excerpt":"<h1> 6. 进程控制</h1>\\n<p>fork复制当前进程，状态和pc也完全一样，执行fork后面部分的程序</p>\\n<p>换代码、execute操作</p>\\n<p>Linux里面子进程的创建，不会创建</p>\\n<p>cow写时复制</p>\\n<p>redis持久化：fork下来复制，然后主线程的修改，写时复制</p>\\n<h2> 进程死亡的方式</h2>\\n<ul>\\n<li>\\n<p>自行死亡</p>\\n<p>执行完毕，如，c的main函数，返回值是进程返回值，返回给父进程看</p>\\n</li>\\n<li>\\n<p>被杀死</p>\\n<p>kill，软中断</p>\\n<p>kill -l 可以看到所有的信号，谁杀的、怎么死的</p>\\n<p>kill -9 xxx</p>\\n</li>\\n<li>\\n<p>出错没了，call down</p>\\n</li>\\n</ul>","autoDesc":true}`);export{e as data};
