const e=JSON.parse(`{"key":"v-0befbfde","path":"/cs/database/redis/principal/memory-model/%E8%BF%87%E6%9C%9F%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5.html","title":"过期删除策略","lang":"en-US","frontmatter":{"description":"过期删除策略 惰性删除； 定期删除； 惰性删除 惰性删除策略的做法是，不主动删除过期键，每次从数据库访问 key 时，都检测 key 是否过期，如果过期则删除该 key。 惰性删除策略的优点： 因为每次访问时，才会检查 key 是否过期，所以此策略只会使用很少的系统资源，因此，惰性删除策略对 CPU 时间最友好。 惰性删除策略的缺点：","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/cs/database/redis/principal/memory-model/%E8%BF%87%E6%9C%9F%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"过期删除策略"}],["meta",{"property":"og:description","content":"过期删除策略 惰性删除； 定期删除； 惰性删除 惰性删除策略的做法是，不主动删除过期键，每次从数据库访问 key 时，都检测 key 是否过期，如果过期则删除该 key。 惰性删除策略的优点： 因为每次访问时，才会检查 key 是否过期，所以此策略只会使用很少的系统资源，因此，惰性删除策略对 CPU 时间最友好。 惰性删除策略的缺点："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-03-05T13:59:03.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-03-05T13:59:03.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/cs/database/redis/principal/memory-model/%E8%BF%87%E6%9C%9F%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5.html"}]]},"headers":[{"level":2,"title":"惰性删除","slug":"惰性删除","link":"#惰性删除","children":[]},{"level":2,"title":"定期删除","slug":"定期删除","link":"#定期删除","children":[]}],"git":{"createdTime":1678024743000,"updatedTime":1678024743000,"contributors":[{"name":"davidliuk","email":"l729641074@163.com","commits":1}]},"readingTime":{"minutes":1.98,"words":595},"localizedDate":"March 5, 2023","filePathRelative":"cs/database/redis/principal/memory-model/过期删除策略.md","excerpt":"<h1> 过期删除策略</h1>\\n<ul>\\n<li>惰性删除；</li>\\n<li>定期删除；</li>\\n</ul>\\n<h2> 惰性删除</h2>\\n<p>惰性删除策略的做法是，<strong>不主动删除过期键，每次从数据库访问 key 时，都检测 key 是否过期，如果过期则删除该 key。</strong></p>\\n<p>惰性删除策略的<strong>优点</strong>：</p>\\n<ul>\\n<li>因为每次访问时，才会检查 key 是否过期，所以此策略只会使用很少的系统资源，因此，惰性删除策略对 CPU 时间最友好。</li>\\n</ul>\\n<p>惰性删除策略的<strong>缺点</strong>：</p>","autoDesc":true}`);export{e as data};
