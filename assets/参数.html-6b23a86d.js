import{_ as a,V as s,W as n,Z as e}from"./framework-e5d7a6b2.js";const t={},c=e('<h1 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h1><h2 id="占位符" tabindex="-1"><a class="header-anchor" href="#占位符" aria-hidden="true">#</a> 占位符</h2><ul><li><p><code>${}</code>是 Properties 文件中的变量占位符，它可以用于标签属性值和 sql 内部，属于<strong>静态文本替换</strong>，比如${driver}会被静态替换为<code>com.mysql.jdbc. Driver</code>。</p><p>字符串拼接</p></li><li><p><code>#{}</code>是 sql 的参数占位符，MyBatis 会将 sql 中的<code>#{}</code>替换为? 号，在 sql 执行前会使用 PreparedStatement 的参数设置方法，按序给 sql 的? 号占位符设置参数值，比如 ps.setInt(0, parameterValue)，<code>#{item.name}</code> 的取值方式为使用反射从参数对象中获取 item 对象的 name 属性值，相当于 <code>param.getItem().getName()</code>。</p></li></ul><p>在 MyBatis 中，<code>#{}</code>和<code>${}</code>都是用于 SQL 语句中的占位符，但它们的使用方式和含义是不同的。</p><p><code>#{}</code>是预编译的占位符，它会将传入的参数进行预编译处理，防止 SQL 注入攻击。在 SQL 语句中，<code>#{}</code>用于表示一个占位符，例如：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>getUserById<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  SELECT * FROM users WHERE id = #{id}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的<code>#{id}</code>表示一个预编译的占位符，MyBatis 会将传入的<code>id</code>参数进行预编译处理，然后将其替换到 SQL 语句中。</p><p><code>${}</code>是字符串拼接的占位符，它不会对传入的参数进行预编译处理，存在 SQL 注入攻击的风险。在 SQL 语句中，<code>${}</code>用于表示一个占位符，例如：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>getUserByName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  SELECT * FROM users WHERE name = &#39;${name}&#39;\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的<code>${name}</code>表示一个字符串拼接的占位符，MyBatis 会将传入的<code>name</code>参数直接拼接到 SQL 语句中，存在 SQL 注入攻击的风险。</p><p>总之，<code>#{}</code>和<code>${}</code>都是用于 SQL 语句中的占位符，但它们的使用方式和含义是不同的。<code>#{}</code>是预编译的占位符，用于防止 SQL 注入攻击，而<code>${}</code>是字符串拼接的占位符，存在 SQL 注入攻击的风险。在使用 MyBatis 时，应该尽量使用<code>#{}</code>来防止 SQL 注入攻击。</p>',11),o=[c];function p(l,d){return s(),n("div",null,o)}const u=a(t,[["render",p],["__file","参数.html.vue"]]);export{u as default};
