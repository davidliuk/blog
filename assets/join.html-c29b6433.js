import{_ as n,V as s,W as a,Z as e}from"./framework-e5d7a6b2.js";const t={},p=e(`<h1 id="连接" tabindex="-1"><a class="header-anchor" href="#连接" aria-hidden="true">#</a> 连接</h1><table><thead><tr><th>连接类型</th><th>说明</th></tr></thead><tbody><tr><td>INNER JOIN 内连接</td><td>（默认连接方式）只有当两个表都存在满足条件的记录时才会返回行。</td></tr><tr><td>LEFT JOIN / LEFT OUTER JOIN 左(外)连接</td><td>返回左表中的所有行，即使右表中没有满足条件的行也是如此。</td></tr><tr><td>RIGHT JOIN / RIGHT OUTER JOIN 右(外)连接</td><td>返回右表中的所有行，即使左表中没有满足条件的行也是如此。</td></tr><tr><td>FULL JOIN / FULL OUTER JOIN 全(外)连接</td><td>只要其中有一个表存在满足条件的记录，就返回行。</td></tr><tr><td>SELF JOIN</td><td>将一个表连接到自身，就像该表是两个表一样。为了区分两个表，在 SQL 语句中需要至少重命名一个表。</td></tr><tr><td>CROSS JOIN</td><td>交叉连接，从两个或者多个连接表中返回记录集的笛卡尔积。</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
    a<span class="token punctuation">.</span>Name <span class="token string">&#39;Employee&#39;</span>
<span class="token keyword">FROM</span>
    Employee a<span class="token punctuation">,</span>
    Employee b
<span class="token keyword">WHERE</span>
    a<span class="token punctuation">.</span>ManagerId <span class="token operator">=</span> b<span class="token punctuation">.</span>Id
        <span class="token operator">AND</span> a<span class="token punctuation">.</span>Salary <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>Salary
<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
     a<span class="token punctuation">.</span>NAME <span class="token keyword">AS</span> Employee
<span class="token keyword">FROM</span> Employee <span class="token keyword">AS</span> a <span class="token keyword">JOIN</span> Employee <span class="token keyword">AS</span> b
     <span class="token keyword">ON</span> a<span class="token punctuation">.</span>ManagerId <span class="token operator">=</span> b<span class="token punctuation">.</span>Id
     <span class="token operator">AND</span> a<span class="token punctuation">.</span>Salary <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>Salary
<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MySQL 中的 UNION 和 JOIN 是两种不同的操作，它们的作用和使用场景也不同。</p><p>UNION 是用于合并两个或多个 SELECT 语句的结果集，它会将多个结果集合并成一个结果集，并去除重复的行。UNION 操作的语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> table1
<span class="token keyword">UNION</span> <span class="token punctuation">[</span><span class="token keyword">ALL</span><span class="token punctuation">]</span>
<span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> table2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>UNION</code> 表示合并两个结果集并去除重复的行，<code>UNION ALL</code> 表示合并两个结果集但不去除重复的行。</p><p>JOIN 是用于将两个或多个表中的数据进行关联的操作，它会根据指定的条件将两个表中的数据进行匹配，并返回匹配的结果。JOIN 操作的语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">FROM</span> table1
<span class="token keyword">JOIN</span> table2 <span class="token keyword">ON</span> condition<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>JOIN</code> 表示内连接，只返回两个表中匹配的行，<code>LEFT JOIN</code> 和 <code>RIGHT JOIN</code> 表示左连接和右连接，会返回左表或右表中的所有行，即使没有匹配的行。</p><p>总的来说，UNION 用于合并结果集，而 JOIN 用于关联表中的数据。在使用时需要根据具体的需求选择合适的操作。</p>`,12),o=[p];function l(c,d){return s(),a("div",null,o)}const u=n(t,[["render",l],["__file","join.html.vue"]]);export{u as default};
