const e=JSON.parse(`{"key":"v-512485fb","path":"/se/lang/java/JUC/aqs/lock/%E4%B9%90%E8%A7%82%E9%94%81.html","title":"乐观锁","lang":"en-US","frontmatter":{"description":"乐观锁 代表：AtomicInteger，使用 cas（Unsafe）来保证原子性 核心是：无需加锁，每次只有一个线程能够成功修改共享变量，其他失败的线程不需要停止，不断重复直至成功 由于线程一直运行，不需要阻塞，因此不涉及线程上下文切换 它需要多核 cpu 支持，且核心数不应超过 cpu 核数 缺点： 只能保证一个变量的原子操作 解决：AtomicReference 1、乐观锁：假定没有冲突，在更新数据时比较发现不一致时，则读取新值修改后重试更新。（自旋锁就是一种乐观锁）","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/java/JUC/aqs/lock/%E4%B9%90%E8%A7%82%E9%94%81.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"乐观锁"}],["meta",{"property":"og:description","content":"乐观锁 代表：AtomicInteger，使用 cas（Unsafe）来保证原子性 核心是：无需加锁，每次只有一个线程能够成功修改共享变量，其他失败的线程不需要停止，不断重复直至成功 由于线程一直运行，不需要阻塞，因此不涉及线程上下文切换 它需要多核 cpu 支持，且核心数不应超过 cpu 核数 缺点： 只能保证一个变量的原子操作 解决：AtomicReference 1、乐观锁：假定没有冲突，在更新数据时比较发现不一致时，则读取新值修改后重试更新。（自旋锁就是一种乐观锁）"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-04-11T10:23:43.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-04-11T10:23:43.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/se/lang/java/JUC/aqs/lock/%E4%B9%90%E8%A7%82%E9%94%81.html"}]]},"headers":[{"level":2,"title":"CAS 算法","slug":"cas-算法","link":"#cas-算法","children":[]},{"level":2,"title":"Atomic","slug":"atomic","link":"#atomic","children":[]}],"git":{"createdTime":1680492546000,"updatedTime":1681208623000,"contributors":[{"name":"davidliuk","email":"l729641074@163.com","commits":1},{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":2.65,"words":795},"localizedDate":"April 3, 2023","filePathRelative":"se/lang/java/JUC/aqs/lock/乐观锁.md","excerpt":"<h1> 乐观锁</h1>\\n<p>代表：AtomicInteger，使用 cas（Unsafe）来保证原子性</p>\\n<ul>\\n<li>核心是：无需加锁，每次只有一个线程能够成功修改共享变量，其他失败的线程不需要停止，不断重复直至成功</li>\\n<li>由于线程一直运行，不需要阻塞，因此不涉及线程上下文切换</li>\\n<li>它需要多核 cpu 支持，且核心数不应超过 cpu 核数</li>\\n</ul>\\n<p>缺点：</p>\\n<ul>\\n<li>只能保证一个变量的原子操作</li>\\n<li>解决：AtomicReference</li>\\n</ul>\\n<p>1、乐观锁：假定没有冲突，在更新数据时比较发现不一致时，则读取新值修改后重试更新。（自旋锁就是一种乐观锁）</p>","autoDesc":true}`);export{e as data};
