import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as h,c as e,d as p}from"./app-9107e99b.js";const i={},r=p('<h2 id="搜索的概念" tabindex="-1"><a class="header-anchor" href="#搜索的概念" aria-hidden="true">#</a> 搜索的概念</h2><p>搜索中需要解决的基本问题：</p><p>（1）是否一定能找到一个解。<br> （2）找到的解是否是最佳解。<br> （3）时间与空间复杂性如何。<br> （4）是否终止运行或是否会陷入一个死循环。</p><p>搜索策略</p><p>（1）育目搜索：在不具有对特定问题的任何有关信息的条件下，按固定的步骤（依次或随机调用操作算子）进行的搜索。</p><p>（2）启发式搜索：考虑特定问题领域可应用的知识，动态地确定调用操作算子的步骤，优先选择较适合的操作算子，尽量减少不必要的搜索，以求尽快地到达结束状态。</p><h2 id="状态空间的搜索策略" tabindex="-1"><a class="header-anchor" href="#状态空间的搜索策略" aria-hidden="true">#</a> 状态空间的搜索策略</h2><h3 id="状态空间的表示法" tabindex="-1"><a class="header-anchor" href="#状态空间的表示法" aria-hidden="true">#</a> 状态空间的表示法</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/截屏2022-09-24 12.00.42.png" alt="截屏2022-09-24 12.00.42" loading="lazy"></p><h3 id="状态空间的图描述" tabindex="-1"><a class="header-anchor" href="#状态空间的图描述" aria-hidden="true">#</a> 状态空间的图描述</h3><p>eg. 旅行商问题，最短哈密尔顿回路</p><h2 id="盲目的图搜索策略" tabindex="-1"><a class="header-anchor" href="#盲目的图搜索策略" aria-hidden="true">#</a> 盲目的图搜索策略</h2><h3 id="回溯策略" tabindex="-1"><a class="header-anchor" href="#回溯策略" aria-hidden="true">#</a> 回溯策略</h3><p>PS(path states)表：保存当前搜索路径上的状态。如果找到了目的</p><p>NPS(new path states)表：</p><p>NSS(no solvable states)表：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/截屏2022-09-24 12.26.36.png" alt="截屏2022-09-24 12.26.36" loading="lazy"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/截屏2022-09-24 12.23.46.png" alt="截屏2022-09-24 12.23.46" loading="lazy"></p><h3 id="宽度优先搜索策略" tabindex="-1"><a class="header-anchor" href="#宽度优先搜索策略" aria-hidden="true">#</a> 宽度优先搜索策略</h3><p>宽度优先搜索(breadth-first search，广度优先搜索)：以接近起始节点的程度（深度）为依据，进行逐层扩展的节点搜索方法。</p><h3 id="深度优先搜索策略" tabindex="-1"><a class="header-anchor" href="#深度优先搜索策略" aria-hidden="true">#</a> 深度优先搜索策略</h3><h2 id="启发式搜索策略" tabindex="-1"><a class="header-anchor" href="#启发式搜索策略" aria-hidden="true">#</a> 启发式搜索策略</h2><p>启发式图搜索策略：重排OPEN表</p><p>种类：A，A*</p><p>问题简单时，不需要用启发式信息</p><p>使用启发式的情况：</p><ul><li><p>一个问题由于存在问题陈述和数据获取的模糊性，可能会使他没有一个确定的解</p></li><li><p>指数级增长的情况，如 TPS</p><p>井字棋</p></li></ul><p>h(n)启发函数：</p><p>A*算法：启发函数h(x)小于等于h*(n)时，被称为A*算法</p><p>如果某问题有解，则利用A*一定可以搜索到最优解</p><h2 id="最短路径算法" tabindex="-1"><a class="header-anchor" href="#最短路径算法" aria-hidden="true">#</a> 最短路径算法</h2><p>单源最短路最好的算法，稳定最短路</p><p>迪杰斯特拉</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/截屏2022-09-30 16.20.53.png" alt="截屏2022-09-30 16.20.53" loading="lazy"></p><p>需要堆结构</p><p>类似Prim</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/截屏2022-09-30 16.30.51.png" alt="截屏2022-09-30 16.30.51" loading="lazy"></p><p>缺点：不适用于有负权值的带权图</p>',38),n=[r];function t(d,c){return h(),e("div",null,n)}const l=a(i,[["render",t],["__file","5. 搜索求解策略.html.vue"]]);export{l as default};
