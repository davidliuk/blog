const e=JSON.parse(`{"key":"v-75f558e2","path":"/se/framework/spring/core/beans/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html","title":"生命周期","lang":"en-US","frontmatter":{"description":"生命周期 三个阶段 Spring Bean 的生命周期是从 Bean 实例化之后，即通过反射创建出对象之后，到 Bean 成为一个完整对象，最终存储到单例池中，这个过程被称为 Spring Bean 的生命周期。Spring Bean 的生命周期大体上分为三个阶段： Bean 的实例化阶段：Spring 框架会取出 BeanDefinition 的信息进行判断当前 Bean 的范围是否是 singleton 的是否不是延迟加载的，是否不是 FactoryBean 等，最终将一个普通的 singleton 的 Bean 通过反射进行实例化： Bean 的初始化阶段：Bean 创建之后还仅仅是个\\"半成品\\"，还需要对 Bean 实例的属性进行填充、执行一些 Aware 接口方法、执行 BeanPostProcessor,方法、执行 InitializingBean 接口的初始化方法、执行自定义初始化 init 方法等。该阶段是 Spring 最具技术含量和复杂度的阶段，Aop 增强功能，后面要学习的 Springl 的注解功能等、spring 高频面试题 Bean 的循环引用问题都是在这个阶段体现的： Bean 的完成阶段：经过初始化阶段，Bean 就成为了一个完整的 Spring Bean,被存储到单例池 singletonObjects 中去了，即完成了 Spring Bean 的整个生命周期。 销毁阶段","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/framework/spring/core/beans/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"生命周期"}],["meta",{"property":"og:description","content":"生命周期 三个阶段 Spring Bean 的生命周期是从 Bean 实例化之后，即通过反射创建出对象之后，到 Bean 成为一个完整对象，最终存储到单例池中，这个过程被称为 Spring Bean 的生命周期。Spring Bean 的生命周期大体上分为三个阶段： Bean 的实例化阶段：Spring 框架会取出 BeanDefinition 的信息进行判断当前 Bean 的范围是否是 singleton 的是否不是延迟加载的，是否不是 FactoryBean 等，最终将一个普通的 singleton 的 Bean 通过反射进行实例化： Bean 的初始化阶段：Bean 创建之后还仅仅是个\\"半成品\\"，还需要对 Bean 实例的属性进行填充、执行一些 Aware 接口方法、执行 BeanPostProcessor,方法、执行 InitializingBean 接口的初始化方法、执行自定义初始化 init 方法等。该阶段是 Spring 最具技术含量和复杂度的阶段，Aop 增强功能，后面要学习的 Springl 的注解功能等、spring 高频面试题 Bean 的循环引用问题都是在这个阶段体现的： Bean 的完成阶段：经过初始化阶段，Bean 就成为了一个完整的 Spring Bean,被存储到单例池 singletonObjects 中去了，即完成了 Spring Bean 的整个生命周期。 销毁阶段"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-05-17T10:10:52.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-05-17T10:10:52.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/se/framework/spring/core/beans/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html"}]]},"headers":[{"level":2,"title":"三个阶段","slug":"三个阶段","link":"#三个阶段","children":[]},{"level":2,"title":"实例化阶段","slug":"实例化阶段","link":"#实例化阶段","children":[]},{"level":2,"title":"初始化阶段","slug":"初始化阶段","link":"#初始化阶段","children":[{"level":3,"title":"循环依赖","slug":"循环依赖","link":"#循环依赖","children":[]},{"level":3,"title":"解决 Spring 循环依赖问题只用一二级缓存行不行？","slug":"解决-spring-循环依赖问题只用一二级缓存行不行","link":"#解决-spring-循环依赖问题只用一二级缓存行不行","children":[]},{"level":3,"title":"那么如何解决 B 依赖的 A 和最终的 A 不是同一个对象这种冲突？","slug":"那么如何解决-b-依赖的-a-和最终的-a-不是同一个对象这种冲突","link":"#那么如何解决-b-依赖的-a-和最终的-a-不是同一个对象这种冲突","children":[]},{"level":3,"title":"什么时候下 Spring 解决不了循环依赖？","slug":"什么时候下-spring-解决不了循环依赖","link":"#什么时候下-spring-解决不了循环依赖","children":[]}]}],"git":{"createdTime":1684318252000,"updatedTime":1684318252000,"contributors":[{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":7.06,"words":2118},"localizedDate":"May 17, 2023","filePathRelative":"se/framework/spring/core/beans/生命周期.md","excerpt":"<h1> 生命周期</h1>\\n<h2> 三个阶段</h2>\\n<p><img src=\\"https://cdn.jsdelivr.net/gh/davidliuk/images@master/blog/截屏2023-04-05 22.11.05.png\\" alt=\\"截屏2023-04-05 22.11.05\\"></p>\\n<p>Spring Bean 的生命周期是从 Bean 实例化之后，即通过反射创建出对象之后，到 Bean 成为一个完整对象，最终存储到单例池中，这个过程被称为 Spring Bean 的生命周期。Spring Bean 的生命周期大体上分为三个阶段：</p>\\n<ul>\\n<li>Bean 的实例化阶段：Spring 框架会取出 BeanDefinition 的信息进行判断当前 Bean 的范围是否是 singleton 的是否不是延迟加载的，是否不是 FactoryBean 等，最终将一个普通的 singleton 的 Bean 通过反射进行实例化：</li>\\n<li><strong>Bean 的初始化阶段</strong>：Bean 创建之后还仅仅是个\\"半成品\\"，还需要对 Bean 实例的属性进行填充、执行一些 Aware 接口方法、执行 BeanPostProcessor,方法、执行 InitializingBean 接口的初始化方法、执行自定义初始化 init 方法等。该阶段是 Spring 最具技术含量和复杂度的阶段，Aop 增强功能，后面要学习的 Springl 的注解功能等、spring 高频面试题 Bean 的循环引用问题都是在这个阶段体现的：</li>\\n<li>Bean 的完成阶段：经过初始化阶段，Bean 就成为了一个完整的 Spring Bean,被存储到单例池 singletonObjects 中去了，即完成了 Spring Bean 的整个生命周期。</li>\\n<li>销毁阶段</li>\\n</ul>","autoDesc":true}`);export{e as data};
