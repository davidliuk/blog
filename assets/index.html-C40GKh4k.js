import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,d as n,o as a}from"./app-DIqbhby7.js";const i={};function o(s,e){return a(),r("div",null,e[0]||(e[0]=[n('<h1 id="design-pattern" tabindex="-1"><a class="header-anchor" href="#design-pattern"><span>Design Pattern</span></a></h1><blockquote><p><a href="https://refactoring.guru/design-patterns" target="_blank" rel="noopener noreferrer">参考教程</a></p></blockquote><p>GoF 23</p><ul><li><p>Creational Design Patterns 创建型</p></li><li><p>Structural Design Patterns 结构型</p><ul><li><strong>Decorator Pattern</strong>: The Decorator Pattern allows you to add new behaviors or responsibilities to objects without altering their existing code. It’s like adding layers of wrapping to a gift.</li><li><strong>Adapter Pattern</strong>: The Adapter Pattern allows one class to work with another class that has a different interface. It acts as a bridge between two incompatible interfaces.</li><li><strong>Proxy Pattern</strong>: The Proxy Pattern provides a placeholder of another object to control access to it. It’s like having a remote control for a TV; you interact with the remote instead of directly with the TV.</li></ul></li><li><p>Behavioral Design Patterns 行为型</p><ul><li><strong>Observer Pattern:</strong> The Observer Pattern establishes a relationship where one thing (called the subject) is watched by several other things (knows as observers).</li><li><strong>State Pattern:</strong> The State Pattern enables an object to modify how it behaves as its internal state changes.</li><li><strong>Strategy Pattern:</strong> The Strategy Pattern involves defining a group of different algorithm and making it possible to choose and switch between them as needed while a program is running.</li><li><strong>Template Method Pattern:</strong> The Template Method is like providing a recipe with some fixed steps (skeleton), but allowing different cooks (subclasses) to add their unique ingredients or flavors (override specific parts) without changing the basic cooking instructions (overall structure).</li></ul></li></ul>',4)]))}const d=t(i,[["render",o],["__file","index.html.vue"]]),g=JSON.parse(`{"path":"/se/design/pattern/","title":"Design Pattern","lang":"en-US","frontmatter":{"description":"Design Pattern 参考教程 GoF 23 Creational Design Patterns 创建型 Structural Design Patterns 结构型 Decorator Pattern: The Decorator Pattern allows you to add new behaviors or responsibili...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/design/pattern/"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"Design Pattern"}],["meta",{"property":"og:description","content":"Design Pattern 参考教程 GoF 23 Creational Design Patterns 创建型 Structural Design Patterns 结构型 Decorator Pattern: The Decorator Pattern allows you to add new behaviors or responsibili..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-22T03:17:27.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-22T03:17:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Design Pattern\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-22T03:17:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[],"git":{"createdTime":1692874145000,"updatedTime":1732245447000,"contributors":[{"name":"David Liu","email":"liudawei@seas.upenn.edu","commits":1},{"name":"davidliu","email":"liudawei47@jd.com","commits":1},{"name":"liudawei47","email":"liudawei47@jd.com","commits":1},{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":0.78,"words":234},"filePathRelative":"se/design/pattern/README.md","localizedDate":"August 24, 2023","excerpt":"\\n<blockquote>\\n<p><a href=\\"https://refactoring.guru/design-patterns\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">参考教程</a></p>\\n</blockquote>\\n<p>GoF 23</p>\\n<ul>\\n<li>\\n<p>Creational Design Patterns 创建型</p>\\n</li>\\n<li>\\n<p>Structural Design Patterns 结构型</p>\\n<ul>\\n<li><strong>Decorator Pattern</strong>: The Decorator Pattern allows you to add new behaviors or responsibilities to objects without altering their existing code. It’s like adding layers of wrapping to a gift.</li>\\n<li><strong>Adapter Pattern</strong>: The Adapter Pattern allows one class to work with another class that has a different interface. It acts as a bridge between two incompatible interfaces.</li>\\n<li><strong>Proxy Pattern</strong>: The Proxy Pattern provides a placeholder of another object to control access to it. It’s like having a remote control for a TV; you interact with the remote instead of directly with the TV.</li>\\n</ul>\\n</li>\\n<li>\\n<p>Behavioral Design Patterns 行为型</p>\\n<ul>\\n<li><strong>Observer Pattern:</strong> The Observer Pattern establishes a relationship where one thing (called the subject) is watched by several other things (knows as observers).</li>\\n<li><strong>State Pattern:</strong> The State Pattern enables an object to modify how it behaves as its internal state changes.</li>\\n<li><strong>Strategy Pattern:</strong> The Strategy Pattern involves defining a group of different algorithm and making it possible to choose and switch between them as needed while a program is running.</li>\\n<li><strong>Template Method Pattern:</strong> The Template Method is like providing a recipe with some fixed steps (skeleton), but allowing different cooks (subclasses) to add their unique ingredients or flavors (override specific parts) without changing the basic cooking instructions (overall structure).</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{d as comp,g as data};
