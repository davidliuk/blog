const e=JSON.parse(`{"key":"v-1a0953b3","path":"/se/framework/spring/mvc/Spring%20MVC.html","title":"Spring MVC","lang":"en-US","frontmatter":{"description":"Spring MVC Spring MVC 的核心组件有哪些？ 记住了下面这些组件，也就记住了 SpringMVC 的工作原理。 DispatcherServlet ：核心的中央处理器，负责接收请求、分发，并给予客户端响应。 HandlerMapping ：处理器映射器，根据 uri 去匹配查找能处理的 Handler ，并会将请求涉及到的拦截器和 Handler 一起封装。 HandlerAdapter ：处理器适配器，根据 HandlerMapping 找到的 Handler ，适配执行对应的 Handler； Handler ：请求处理器，处理实际请求的处理器。 ViewResolver ：视图解析器，根据 Handler 返回的逻辑视图 / 视图，解析并渲染真正的视图，并传递给 DispatcherServlet 响应客户端","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/framework/spring/mvc/Spring%20MVC.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"Spring MVC"}],["meta",{"property":"og:description","content":"Spring MVC Spring MVC 的核心组件有哪些？ 记住了下面这些组件，也就记住了 SpringMVC 的工作原理。 DispatcherServlet ：核心的中央处理器，负责接收请求、分发，并给予客户端响应。 HandlerMapping ：处理器映射器，根据 uri 去匹配查找能处理的 Handler ，并会将请求涉及到的拦截器和 Handler 一起封装。 HandlerAdapter ：处理器适配器，根据 HandlerMapping 找到的 Handler ，适配执行对应的 Handler； Handler ：请求处理器，处理实际请求的处理器。 ViewResolver ：视图解析器，根据 Handler 返回的逻辑视图 / 视图，解析并渲染真正的视图，并传递给 DispatcherServlet 响应客户端"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-05-17T10:10:52.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-05-17T10:10:52.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/se/framework/spring/mvc/Spring%20MVC.html"}]]},"headers":[{"level":3,"title":"Spring MVC 的核心组件有哪些？","slug":"spring-mvc-的核心组件有哪些","link":"#spring-mvc-的核心组件有哪些","children":[]},{"level":3,"title":"工作原理","slug":"工作原理","link":"#工作原理","children":[]},{"level":2,"title":"Interceptor 和 Filter","slug":"interceptor-和-filter","link":"#interceptor-和-filter","children":[{"level":3,"title":"Interceptor","slug":"interceptor","link":"#interceptor","children":[]},{"level":3,"title":"Filter","slug":"filter","link":"#filter","children":[]},{"level":3,"title":"Filter 和 Interceptor 的区别","slug":"filter-和-interceptor-的区别","link":"#filter-和-interceptor-的区别","children":[]}]},{"level":2,"title":"Filter","slug":"filter-1","link":"#filter-1","children":[]},{"level":2,"title":"区别","slug":"区别","link":"#区别","children":[]}],"git":{"createdTime":1684318252000,"updatedTime":1684318252000,"contributors":[{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":6.56,"words":1968},"localizedDate":"May 17, 2023","filePathRelative":"se/framework/spring/mvc/Spring MVC.md","excerpt":"<h1> Spring MVC</h1>\\n<h3> Spring MVC 的核心组件有哪些？</h3>\\n<p>记住了下面这些组件，也就记住了 SpringMVC 的工作原理。</p>\\n<ul>\\n<li><strong><code>DispatcherServlet</code></strong> ：<strong>核心的中央处理器</strong>，负责接收请求、分发，并给予客户端响应。</li>\\n<li><strong><code>HandlerMapping</code></strong> ：<strong>处理器映射器</strong>，根据 uri 去匹配查找能处理的 <code>Handler</code> ，并会将请求涉及到的拦截器和 <code>Handler</code> 一起封装。</li>\\n<li><strong><code>HandlerAdapter</code></strong> ：<strong>处理器适配器</strong>，根据 <code>HandlerMapping</code> 找到的 <code>Handler</code> ，适配执行对应的 <code>Handler</code>；</li>\\n<li><strong><code>Handler</code></strong> ：<strong>请求处理器</strong>，处理实际请求的处理器。</li>\\n<li><strong><code>ViewResolver</code></strong> ：<strong>视图解析器</strong>，根据 <code>Handler</code> 返回的逻辑视图 / 视图，解析并渲染真正的视图，并传递给 <code>DispatcherServlet</code> 响应客户端</li>\\n</ul>","autoDesc":true}`);export{e as data};
