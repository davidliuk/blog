import{_ as i,V as l,W as e,a0 as a}from"./framework-705b829b.js";const s={},d=a(`<h1 id="分布式锁" tabindex="-1"><a class="header-anchor" href="#分布式锁" aria-hidden="true">#</a> 分布式锁</h1><p>满足分布式系统或集群模式下多进程可见并且互斥的锁。</p><ul><li>多进场可见</li><li>互斥</li><li>高可用</li><li>高性能</li><li>安全性</li><li>锁自身的特性：公平非公平等</li></ul><p>三种常见方式对比：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/截屏2023-02-08 11.12.18.png" alt="截屏2023-02-08 11.12.18" loading="lazy"></p><h3 id="redis实现" tabindex="-1"><a class="header-anchor" href="#redis实现" aria-hidden="true">#</a> Redis实现</h3><div class="language-redis line-numbers-mode" data-ext="redis"><pre class="language-redis"><code># 添加锁，NX是互斥，EX是超时时间
SET lock thread1 EX 10 NX
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>存在问题：</p><ol><li>设置超时时间</li><li></li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/截屏2023-02-08 13.10.05.png" alt="截屏2023-02-08 13.10.05" loading="lazy"></p><p>缺点：</p><ul><li><p>不可重入</p><p>同一个线程无法多次获取同一把锁</p></li><li><p>不可重试</p><p>获取锁只尝试一次就返回false</p></li><li><p>超时释放</p></li><li><p>主从一致性问题</p></li></ul>`,12),n=[d];function c(r,t){return l(),e("div",null,n)}const o=i(s,[["render",c],["__file","distributed-lock.html.vue"]]);export{o as default};
