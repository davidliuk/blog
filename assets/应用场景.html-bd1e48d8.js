import{_ as p,V as e,W as t,a0 as a}from"./framework-705b829b.js";const _={},c=a('<h1 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h1><p>aop称为是面向切面编程，而他的aop原理呢就是：在执行某些代码之前执行另外的代码，是程序变的灵活，扩展性更灵活，可以随意的删除和添加某些功能！</p><p>一，性能统计／计数</p><p>将与业务无关的代码，使用AOP拦截他们。</p><p>二，事务处理</p><p>调用方法前开启事务， 调用方法后提交关闭事务</p><p>三，缓存处理</p><p>简单的＂方法缓存＂可以把＂方法名－参数＂作为Key，拦截器拦截方法根据＂方法名－参数＂去缓存系统查询，如果存在就直接返回，不需要执行方法真正的逻辑～</p><p>四，日志打印</p><p>五，数据加加密/签名／验签名等场景</p><p>在支付行业往往对安全性要求比较高，我们在保存／接收／发送数据前先要对数据进行验签／签名／加密等操作，都需要做特殊处理。</p><p>比如一个手机号，我们可以通过一个＂拦截器＂对手机号，身份证号这种敏感信息做这种特殊处理；</p><p>六，权限控制</p><p>springSecurity</p>',14),r=[c];function o(n,s){return e(),t("div",null,r)}const d=p(_,[["render",o],["__file","应用场景.html.vue"]]);export{d as default};
