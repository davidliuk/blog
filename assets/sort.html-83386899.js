import{_ as a,V as s,W as n,Z as e}from"./framework-e5d7a6b2.js";const t={},p=e(`<h1 id="排序" tabindex="-1"><a class="header-anchor" href="#排序" aria-hidden="true">#</a> 排序</h1><p><code>order by</code>后面可以根多个字段及其升降序，如果为标明则MySQL采用默认升序的策略进行排序。</p><p>对字符串用默认的升降序排序得到的是按字典序排列的结果</p><h2 id="默认排序" tabindex="-1"><a class="header-anchor" href="#默认排序" aria-hidden="true">#</a> 默认排序</h2><h3 id="升序" tabindex="-1"><a class="header-anchor" href="#升序" aria-hidden="true">#</a> 升序</h3><p><code>order by id asc</code></p><h3 id="降序" tabindex="-1"><a class="header-anchor" href="#降序" aria-hidden="true">#</a> 降序</h3><p><code>order by id desc</code></p><h2 id="自定排序" tabindex="-1"><a class="header-anchor" href="#自定排序" aria-hidden="true">#</a> 自定排序</h2><p>利用<code>field()</code>函数，来指定排序顺序</p><p><code>order by field(id, 5, 2, 3)</code></p><p>下面是一段示例，SQL语句与对应的Mybatis映射。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> project_case <span class="token keyword">where</span>
case_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">113</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">)</span>
<span class="token keyword">order</span> <span class="token keyword">by</span> field<span class="token punctuation">(</span>case_id<span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">113</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectSortedProjectCaseByIds<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>String<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ProjectCaseResult<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    SELECT * FROM project_case where
    case_id in
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>caseIdList<span class="token punctuation">&quot;</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>caseId<span class="token punctuation">&quot;</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(<span class="token punctuation">&quot;</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>)<span class="token punctuation">&quot;</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>,<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        #{caseId}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>
    order by field
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>caseIdList<span class="token punctuation">&quot;</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>caseId<span class="token punctuation">&quot;</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(case_id,<span class="token punctuation">&quot;</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>)<span class="token punctuation">&quot;</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>,<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        #{caseId}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProjectCase</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectSortedProjectCaseByIds</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;caseIdList&quot;</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> caseIdList<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="字符串排序" tabindex="-1"><a class="header-anchor" href="#字符串排序" aria-hidden="true">#</a> 字符串排序</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>tasks<span class="token punctuation">\`</span></span> <span class="token keyword">order</span> <span class="token keyword">by</span> FIELD<span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token string">&#39;ready&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;failure&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;success&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> execute_time <span class="token keyword">desc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><p><code>cast( 要排序的字段名 as integer)</code> ，注意 integer 小写</p><p>整数和小数都可以处理</p></li><li><p><code>to_number(要排序的字段名) </code></p></li><li><p><code>order by to_number(regexp_substr(salary,&#39;[0-9]*[0-9]&#39;,1)) desc</code>，regexp_substr 为截取方法，1为起始位置</p></li></ol><p>其中，正则表达式函数</p><p><code>REGEXP_SUBSTR(srcstr, pattern, position, occurrence, modifier)</code></p><ul><li><p>srcstr ：需要进行正则处理的字符串</p></li><li><p>pattern ：进行匹配的正则表达式</p></li><li><p>position ：起始位置，从第几个字符开始正则表达式匹配（默认为1）</p></li><li><p>occurrence ：标识第几个匹配组，默认为1</p></li><li><p>modifier ：模式（&#39;i&#39;不区分大小写进行检索；&#39;c&#39;区分大小写进行检索。默认为&#39;c&#39;。）</p></li></ul><h2 id="排序窗口函数" tabindex="-1"><a class="header-anchor" href="#排序窗口函数" aria-hidden="true">#</a> 排序窗口函数</h2><h3 id="rank-over" tabindex="-1"><a class="header-anchor" href="#rank-over" aria-hidden="true">#</a> rank() over</h3><p>作用：查出指定条件后的进行排名，条件相同排名相同，排名间断不连续。 说明：例如学生排名，使用这个函数，成绩相同的两名是并列，下一位同学空出所占的名次。即：1 1 3 4 5 5 7</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> a<span class="token punctuation">.</span>Score <span class="token keyword">as</span> Score<span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>Score<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">from</span> Scores b <span class="token keyword">where</span> b<span class="token punctuation">.</span>Score <span class="token operator">&gt;</span> a<span class="token punctuation">.</span>Score<span class="token punctuation">)</span> <span class="token keyword">as</span> Rank
<span class="token keyword">from</span> Scores a
<span class="token keyword">order</span> <span class="token keyword">by</span> a<span class="token punctuation">.</span>Score <span class="token keyword">DESC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dense-rank-over" tabindex="-1"><a class="header-anchor" href="#dense-rank-over" aria-hidden="true">#</a> dense_rank() over</h3><p>作用：查出指定条件后的进行排名，条件相同排名相同，排名间断不连续。 说明：和rank() over 的作用相同，区别在于dense_rank() over 排名是密集连续的。例如学生排名，使用这个函数，成绩相同的两名是并列，下一位同学接着下一个名次。即：1 1 2 3 4 5 5 6</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> a<span class="token punctuation">.</span>Score <span class="token keyword">as</span> Score<span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> b<span class="token punctuation">.</span>Score<span class="token punctuation">)</span> <span class="token keyword">from</span> Scores b <span class="token keyword">where</span> b<span class="token punctuation">.</span>Score <span class="token operator">&gt;=</span> a<span class="token punctuation">.</span>Score<span class="token punctuation">)</span> <span class="token keyword">as</span> Rank
<span class="token keyword">from</span> Scores a
<span class="token keyword">order</span> <span class="token keyword">by</span> a<span class="token punctuation">.</span>Score <span class="token keyword">DESC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="row-number-over" tabindex="-1"><a class="header-anchor" href="#row-number-over" aria-hidden="true">#</a> row_number() over</h3><p>作用：查出指定条件后的进行排名，条件相同排名也不相同，排名间断不连续。 说明：这个函数不需要考虑是否并列，即使根据条件查询出来的数值相同也会进行连续排序。即：1 2 3 4 5 6</p><h3 id="ntile-group-num-over" tabindex="-1"><a class="header-anchor" href="#ntile-group-num-over" aria-hidden="true">#</a> ntile(\${group_num}) over</h3><p>Ntile() 将所有记录分成group_num个组，每组序号一样</p><p>用于做分位数，如4分位数，可以把数组排序后分成4个部分，每个部分的序号相同</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span> ntile<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span><span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> number <span class="token punctuation">)</span> <span class="token keyword">as</span> row_num
<span class="token keyword">from</span> num 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用小提示" tabindex="-1"><a class="header-anchor" href="#使用小提示" aria-hidden="true">#</a> 使用小提示</h3><p>dense_rank() over 后面跟排序的依据的列，下面是用了一个排序好的列(order by score desc)。 注意：如果select中有一列是用rank()这类函数，其他的列都会按着他这列规定好的顺序排。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> score<span class="token punctuation">,</span> dense_rank<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> score <span class="token keyword">desc</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">&#39;rank&#39;</span>  <span class="token comment">#这个rank之所以要加引号，因为rank本身是个函数，直接写rank会报错</span>
<span class="token keyword">from</span> scores<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>刘志钊 74</li><li>刘昊 84</li><li>陈钱 89</li><li>段佳宁 90</li><li>张恒为 93</li><li>jiangjinbo 95</li><li>刘利明 100</li><li>yuangege 101</li><li>臧家名 110</li><li>谭善如 116</li><li>xuna 125</li><li>tangguoyao 155</li><li>liaomoran 156</li><li>guqiyuan 170</li><li>houyihang 178</li><li>乔畅 204</li><li>整重阳 237</li></ol>`,38),o=[p];function c(l,i){return s(),n("div",null,o)}const u=a(t,[["render",c],["__file","sort.html.vue"]]);export{u as default};
