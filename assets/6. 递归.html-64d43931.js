const n=JSON.parse(`{"key":"v-1c54dc3b","path":"/cs/algo/summary/6.%20%E9%80%92%E5%BD%92.html","title":"递归","lang":"en-US","frontmatter":{"description":"递归 递归的算法 解决的问题 类似剥洋葱，每次操作类似，但是问题的规模变小了 只需要考虑当前层和里面一层的关系、最里层的实现的情况 递归三要素 递归的定义：入参、出参、代表的意思 递归的拆解： 递归的出口： 使用递归来写二分法 private int binarySearch(int[] nums, int start, int end, int target) { if (start &gt; end) { return -1; } int mid = start + (end - start) / 2; if (nums[mid] == target) { return mid; } if (nums[mid] &lt; target) { return binarySearch(nums, mid + 1, end, target); } \\treturn binarySearch(nums, start, mid - 1, target); }","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/cs/algo/summary/6.%20%E9%80%92%E5%BD%92.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"递归"}],["meta",{"property":"og:description","content":"递归 递归的算法 解决的问题 类似剥洋葱，每次操作类似，但是问题的规模变小了 只需要考虑当前层和里面一层的关系、最里层的实现的情况 递归三要素 递归的定义：入参、出参、代表的意思 递归的拆解： 递归的出口： 使用递归来写二分法 private int binarySearch(int[] nums, int start, int end, int target) { if (start &gt; end) { return -1; } int mid = start + (end - start) / 2; if (nums[mid] == target) { return mid; } if (nums[mid] &lt; target) { return binarySearch(nums, mid + 1, end, target); } \\treturn binarySearch(nums, start, mid - 1, target); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-01-01T04:24:51.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-01-01T04:24:51.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/cs/algo/summary/6.%20%E9%80%92%E5%BD%92.html"}]]},"headers":[],"git":{"createdTime":1670121259000,"updatedTime":1672547091000,"contributors":[{"name":"DavidLiu","email":"l729641074@163.com","commits":1},{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":1.68,"words":503},"localizedDate":"December 4, 2022","filePathRelative":"cs/algo/summary/6. 递归.md","excerpt":"<h1> 递归</h1>\\n<p>递归的算法</p>\\n<p>解决的问题</p>\\n<p>类似剥洋葱，每次操作类似，但是问题的规模变小了</p>\\n<p>只需要考虑当前层和里面一层的关系、最里层的实现的情况</p>\\n<p>递归三要素</p>\\n<ol>\\n<li>\\n<p>递归的定义：入参、出参、代表的意思</p>\\n</li>\\n<li>\\n<p>递归的拆解：</p>\\n</li>\\n<li>\\n<p>递归的出口：</p>\\n</li>\\n</ol>\\n<p>使用递归来写二分法</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">binarySearch</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> nums<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> start<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> end<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> target<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>start <span class=\\"token operator\\">&gt;</span> end<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n    <span class=\\"token keyword\\">int</span> mid <span class=\\"token operator\\">=</span> start <span class=\\"token operator\\">+</span> <span class=\\"token punctuation\\">(</span>end <span class=\\"token operator\\">-</span> start<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">/</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">[</span>mid<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">==</span> target<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> mid<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">[</span>mid<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&lt;</span> target<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">binarySearch</span><span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">,</span> mid <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> end<span class=\\"token punctuation\\">,</span> target<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token function\\">binarySearch</span><span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">,</span> start<span class=\\"token punctuation\\">,</span> mid <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> target<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
