import{_ as n,V as a,W as r,X as e,Y as p,$ as i,Z as l,E as o}from"./framework-e5d7a6b2.js";const s={},d=l('<h1 id="设计" tabindex="-1"><a class="header-anchor" href="#设计" aria-hidden="true">#</a> 设计</h1><p>主要考虑三个点：</p><ul><li></li></ul><h2 id="范式" tabindex="-1"><a class="header-anchor" href="#范式" aria-hidden="true">#</a> 范式</h2><p>数据库范式是一种规范化数据库设计的方法，它通过将数据分解成更小的、更规范化的表来减少数据冗余和提高数据一致性。常见的数据库范式有以下几种：</p><ol><li><p>第一范式（1NF）：确保每个表中的每个列都是原子的，即不可再分的。这可以通过将多值属性拆分成单值属性来实现。</p></li><li><p>第二范式（2NF）：确保每个表中的每个非主键列都<strong>完全依赖</strong>于主键。如果一个表中有多个主键，那么每个非主键列都应该依赖于所有主键。</p></li><li><p>第三范式（3NF）：确保每个表中的每个非主键列都<strong>不传递依赖</strong>于主键。如果一个非主键列依赖于另一个非主键列，那么应该将其拆分成一个单独的表。</p></li></ol><p>除了上述三种范式，还有更高级别的范式，如巴斯-科德范式（BCNF）和第四范式（4NF）。但是，过度规范化可能会导致性能下降，因此在设计数据库时需要权衡规范化和性能之间的关系。</p><h2 id="约束" tabindex="-1"><a class="header-anchor" href="#约束" aria-hidden="true">#</a> 约束</h2><h2 id="索引" tabindex="-1"><a class="header-anchor" href="#索引" aria-hidden="true">#</a> 索引</h2><p>1.建表规范</p><p>-- 数据库名、表名，全部使用小写字母,使用&quot;_&quot;下划线连接且长度小于12,做到见名知意</p><p>2.建议使用 innodb 引擎,这也是MySQL的默认引擎</p><p>3.字段类型选择</p><p>-- 建议所有的表都有一个自增id ,可以经常作为主键</p><p>-- 存储非负数用 unsigned,因为对于同样的字节数,存储范围更大</p><p>-- 整型定义中不加长度,直接使用 int, 而不是 in(n).</p><p>-- 字符集选择 utf-8</p><p>-- timestamp和datetime都是精确到毫秒,优先选择timestamp,因为前者只占用4个字节,而后者占用8个字节</p><p>-- 如果可以,所有字段最好都用 not null, 因为 null 字段被索引,需要额外的 1个字节;使索引丶索引统计丶值的比较变得更加复杂.如果是索引字段,一定要定义为 not null , null值 可用 &#39;0&#39;来代替.</p><p>4.建立索引注意事项</p><p>--索引名称必须使用小写</p><p>--单张表的索引数量控制在5个以内,因为 innoDB使用b+tree(B+树结构)存储,在update丶delete丶insert时需要对 b+tree进行调整,过多的索引会减慢更新的速度</p><p>-- 唯一索引不和主键重复</p><p>-- 经常作为 where 条件的字段最好添加索引</p>',24),c={href:"https://blog.csdn.net/weixin_50966947/article/details/126766449",target:"_blank",rel:"noopener noreferrer"};function h(_,u){const t=o("ExternalLinkIcon");return a(),r("div",null,[d,e("p",null,[e("a",c,[p("https://blog.csdn.net/weixin_50966947/article/details/126766449"),i(t)])])])}const m=n(s,[["render",h],["__file","设计.html.vue"]]);export{m as default};
