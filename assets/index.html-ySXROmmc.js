import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as n,o as s}from"./app-CybQbXIt.js";const i={};function p(r,a){return s(),t("div",null,a[0]||(a[0]=[n('<h1 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h1><ul><li>前缀树/字典树</li><li>后缀树</li><li>后缀数组</li></ul><h2 id="前缀树" tabindex="-1"><a class="header-anchor" href="#前缀树"><span>前缀树</span></a></h2><p>字典树</p><h2 id="后缀数组" tabindex="-1"><a class="header-anchor" href="#后缀数组"><span>后缀数组</span></a></h2><p>在字符串处理中，后缀树和后缀数组（Suffix Array）都是非常有力的工具。</p><p>后缀数组是后缀树的一个非常精巧的替代品，比后缀树容易实现，可以实现后缀树的很多功能，时间复杂度也不逊色，比后缀树所占用的空间也小很多。在算法竞赛中，后缀数组比后缀树更为实用。</p><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h3><p>① 后缀。</p><p>后缀指从某个位置开始到字符串末尾的一个特殊子串。字符串s 从第i 个字符开始的后缀被表示为Suffix(i)，也可以称之为下标为i 的后缀。字符串s =“aabaaaab”，其所有后缀如下：</p><p>② 后缀数组。</p><p>将所有后缀都从小到大排序之后，将排好序的后缀的下标i 放入数组中，该数组就叫作后缀数组。将上面的所有后缀都按字典序排序之后，取其下标i ，即可得到后缀数组：</p><p>③ 排名数组。</p><p>排名数组指下标为i 的后缀排序后的名次，例如在上面例子中排序后的下标和名次。若rank[i]=num，则下标为i 的后缀排序后的名次为num：</p><h3 id="构建" tabindex="-1"><a class="header-anchor" href="#构建"><span>构建</span></a></h3><p>构建后缀数组有两种方法：</p><ul><li>DC3算法</li><li>倍增算法</li></ul><p>DC3算法的时间复杂度为O (n )，倍增算法的时间复杂度为O (n logn )。一般n &gt;10^6时，DC3算法比倍增算法运行速度快，但是DC3算法的常数和代码量较大，因此倍增算法比较常用。</p><p>倍增算法，对字符串从每个下标开始的长度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">2^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span> 的子串进行排序，得到排名。k 从0开始，每次都增加1，相当于长度增加了1倍。当2^k ≥n 时，从每个下标开始的长度为2^k 的子串都相当于所有后缀。每次子串排序都利用上一次子串的排名得到。</p>',19)]))}const m=e(i,[["render",p],["__file","index.html.vue"]]),c=JSON.parse(`{"path":"/algo/summary/structure/linear/array/string/","title":"字符串","lang":"en-US","frontmatter":{"description":"字符串 前缀树/字典树 后缀树 后缀数组 前缀树 字典树 后缀数组 在字符串处理中，后缀树和后缀数组（Suffix Array）都是非常有力的工具。 后缀数组是后缀树的一个非常精巧的替代品，比后缀树容易实现，可以实现后缀树的很多功能，时间复杂度也不逊色，比后缀树所占用的空间也小很多。在算法竞赛中，后缀数组比后缀树更为实用。 概念 ① 后缀。 后缀指从某...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/algo/summary/structure/linear/array/string/"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"字符串"}],["meta",{"property":"og:description","content":"字符串 前缀树/字典树 后缀树 后缀数组 前缀树 字典树 后缀数组 在字符串处理中，后缀树和后缀数组（Suffix Array）都是非常有力的工具。 后缀数组是后缀树的一个非常精巧的替代品，比后缀树容易实现，可以实现后缀树的很多功能，时间复杂度也不逊色，比后缀树所占用的空间也小很多。在算法竞赛中，后缀数组比后缀树更为实用。 概念 ① 后缀。 后缀指从某..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-23T18:49:10.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-23T18:49:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"字符串\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-23T18:49:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":2,"title":"前缀树","slug":"前缀树","link":"#前缀树","children":[]},{"level":2,"title":"后缀数组","slug":"后缀数组","link":"#后缀数组","children":[{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":3,"title":"构建","slug":"构建","link":"#构建","children":[]}]}],"git":{"createdTime":1732244737000,"updatedTime":1732387750000,"contributors":[{"name":"David Liu","email":"liudawei@seas.upenn.edu","commits":1}]},"readingTime":{"minutes":1.76,"words":529},"filePathRelative":"algo/summary/structure/linear/array/string/README.md","localizedDate":"November 22, 2024","excerpt":"\\n<ul>\\n<li>前缀树/字典树</li>\\n<li>后缀树</li>\\n<li>后缀数组</li>\\n</ul>\\n<h2>前缀树</h2>\\n<p>字典树</p>\\n<h2>后缀数组</h2>\\n<p>在字符串处理中，后缀树和后缀数组（Suffix Array）都是非常有力的工具。</p>\\n<p>后缀数组是后缀树的一个非常精巧的替代品，比后缀树容易实现，可以实现后缀树的很多功能，时间复杂度也不逊色，比后缀树所占用的空间也小很多。在算法竞赛中，后缀数组比后缀树更为实用。</p>\\n<h3>概念</h3>\\n<p>① 后缀。</p>\\n<p>后缀指从某个位置开始到字符串末尾的一个特殊子串。字符串s 从第i 个字符开始的后缀被表示为Suffix(i)，也可以称之为下标为i 的后缀。字符串s =“aabaaaab”，其所有后缀如下：</p>","autoDesc":true}`);export{m as comp,c as data};
