const n=JSON.parse(`{"key":"v-373a2774","path":"/cs/algo/summary/structure/linear/linked-list/2.%20%E5%9F%BA%E6%9C%AC%E6%8A%80%E5%B7%A7.html","title":"基本技巧","lang":"en-US","frontmatter":{"description":"基本技巧 Basic Linked List Skills traversal 迭代遍历 // 写法1 ListNode p = head; // while (p != null) { // TODO p = p.next; } // 写法2，不推荐，因为局部变量，且边界不好控制，且移动语句受限 for (ListNode p = head; p != null; p = p.next)","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/cs/algo/summary/structure/linear/linked-list/2.%20%E5%9F%BA%E6%9C%AC%E6%8A%80%E5%B7%A7.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"基本技巧"}],["meta",{"property":"og:description","content":"基本技巧 Basic Linked List Skills traversal 迭代遍历 // 写法1 ListNode p = head; // while (p != null) { // TODO p = p.next; } // 写法2，不推荐，因为局部变量，且边界不好控制，且移动语句受限 for (ListNode p = head; p != null; p = p.next)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-02-01T13:44:44.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-02-01T13:44:44.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/cs/algo/summary/structure/linear/linked-list/2.%20%E5%9F%BA%E6%9C%AC%E6%8A%80%E5%B7%A7.html"}]]},"headers":[],"git":{"createdTime":1675259084000,"updatedTime":1675259084000,"contributors":[{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":0.68,"words":203},"localizedDate":"February 1, 2023","filePathRelative":"cs/algo/summary/structure/linear/linked-list/2. 基本技巧.md","excerpt":"<h1> 基本技巧</h1>\\n<p>Basic Linked List Skills</p>\\n<ol>\\n<li>\\n<p>traversal</p>\\n<ul>\\n<li>\\n<p>迭代遍历</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">// 写法1</span>\\n<span class=\\"token class-name\\">ListNode</span> p <span class=\\"token operator\\">=</span> head<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// </span>\\n<span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>p <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// TODO</span>\\n    \\n    p <span class=\\"token operator\\">=</span> p<span class=\\"token punctuation\\">.</span>next<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 写法2，不推荐，因为局部变量，且边界不好控制，且移动语句受限</span>\\n<span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ListNode</span> p <span class=\\"token operator\\">=</span> head<span class=\\"token punctuation\\">;</span> p <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span> p <span class=\\"token operator\\">=</span> p<span class=\\"token punctuation\\">.</span>next<span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}`);export{n as data};
