import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,d as n,o as i}from"./app-B6s9NXTg.js";const t={};function l(c,e){return i(),o("div",null,e[0]||(e[0]=[n('<h1 id="bean" tabindex="-1"><a class="header-anchor" href="#bean"><span>Bean</span></a></h1><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h2><ul><li>Bean 容器找到配置文件中 Spring Bean 的定义。（加载 BeanDefination）</li><li>Bean 容器利用 Java Reflection API 创建一个 Bean 的实例。</li><li>如果涉及到一些属性值 利用 <code>set()</code>方法设置一些属性值。</li><li>如果 Bean 实现了 <code>BeanNameAware</code> 接口，调用 <code>setBeanName()</code>方法，传入 Bean 的名字。</li><li>如果 Bean 实现了 <code>BeanClassLoaderAware</code> 接口，调用 <code>setBeanClassLoader()</code>方法，传入 <code>ClassLoader</code>对象的实例。</li><li>如果 Bean 实现了 <code>BeanFactoryAware</code> 接口，调用 <code>setBeanFactory()</code>方法，传入 <code>BeanFactory</code>对象的实例。</li><li>与上面的类似，如果实现了其他 <code>*.Aware</code>接口，就调用相应的方法。</li><li>如果有和加载这个 Bean 的 Spring 容器相关的 <code>BeanPostProcessor</code> 对象，执行<code>postProcessBeforeInitialization()</code> 方法</li><li>如果 Bean 实现了<code>InitializingBean</code>接口，执行<code>afterPropertiesSet()</code>方法。</li><li>如果 Bean 在配置文件中的定义包含 init-method 属性，执行指定的方法。</li><li>如果有和加载这个 Bean 的 Spring 容器相关的 <code>BeanPostProcessor</code> 对象，执行<code>postProcessAfterInitialization()</code> 方法</li><li>当要销毁 Bean 的时候，如果 Bean 实现了 <code>DisposableBean</code> 接口，执行 <code>destroy()</code> 方法。</li><li>当要销毁 Bean 的时候，如果 Bean 在配置文件中的定义包含 destroy-method 属性，执行指定的方法。</li></ul><p>步骤</p><ol><li>通过构造器或工厂方法创建 Bean 实例</li><li>为 Bean 的属性设置值和对其他 Bean 的引用</li><li>将 Bean 实 例 传 递 给 Bean 后 置 处 理 器 的 postProcessBeforeInitialization 方 法</li><li>调用 Bean 的初始化方法(init-method)</li><li>将 Bean 实 例 传 递 给 Bean 后 置 处 理 器 的 postProcessAfterInitialization 方法</li><li>Bean 可以使用了</li><li>当容器关闭时, 调用 Bean 的销毁方法(destroy-method)</li></ol><h3 id="管理生命周期事件" tabindex="-1"><a class="header-anchor" href="#管理生命周期事件"><span>管理生命周期事件</span></a></h3><p>Spring 框架提供了以下四种方式来管理 bean 的生命周期事件:</p><ul><li>@PostConstruct 和@PreDestroy 注解方式</li><li>InitializingBean 和 DisposableBean 回调接口 <ol><li>初始化之后调用的回调方法。</li><li>销毁之前调用的回调方法。</li></ol></li><li>针对特殊行为的其他 Aware 接口</li><li>Bean 配置文件中的 Custom init()方法和 destroy()方法</li></ul>',8)]))}const s=a(t,[["render",l],["__file","基本概念.html.vue"]]),B=JSON.parse(`{"path":"/se/lang/java/framework/spring/core/beans/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html","title":"Bean","lang":"en-US","frontmatter":{"description":"Bean 生命周期 Bean 容器找到配置文件中 Spring Bean 的定义。（加载 BeanDefination） Bean 容器利用 Java Reflection API 创建一个 Bean 的实例。 如果涉及到一些属性值 利用 set()方法设置一些属性值。 如果 Bean 实现了 BeanNameAware 接口，调用 setBeanNa...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/java/framework/spring/core/beans/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"Bean"}],["meta",{"property":"og:description","content":"Bean 生命周期 Bean 容器找到配置文件中 Spring Bean 的定义。（加载 BeanDefination） Bean 容器利用 Java Reflection API 创建一个 Bean 的实例。 如果涉及到一些属性值 利用 set()方法设置一些属性值。 如果 Bean 实现了 BeanNameAware 接口，调用 setBeanNa..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-09T18:37:53.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-09T18:37:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Bean\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-09T18:37:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":2,"title":"生命周期","slug":"生命周期","link":"#生命周期","children":[{"level":3,"title":"管理生命周期事件","slug":"管理生命周期事件","link":"#管理生命周期事件","children":[]}]}],"git":{"createdTime":1680492546000,"updatedTime":1731177473000,"contributors":[{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro-3.local","commits":1}]},"readingTime":{"minutes":1.65,"words":495},"filePathRelative":"se/lang/java/framework/spring/core/beans/基本概念.md","localizedDate":"April 3, 2023","excerpt":"\\n<h2>生命周期</h2>\\n<ul>\\n<li>Bean 容器找到配置文件中 Spring Bean 的定义。（加载 BeanDefination）</li>\\n<li>Bean 容器利用 Java Reflection API 创建一个 Bean 的实例。</li>\\n<li>如果涉及到一些属性值 利用 <code>set()</code>方法设置一些属性值。</li>\\n<li>如果 Bean 实现了 <code>BeanNameAware</code> 接口，调用 <code>setBeanName()</code>方法，传入 Bean 的名字。</li>\\n<li>如果 Bean 实现了 <code>BeanClassLoaderAware</code> 接口，调用 <code>setBeanClassLoader()</code>方法，传入 <code>ClassLoader</code>对象的实例。</li>\\n<li>如果 Bean 实现了 <code>BeanFactoryAware</code> 接口，调用 <code>setBeanFactory()</code>方法，传入 <code>BeanFactory</code>对象的实例。</li>\\n<li>与上面的类似，如果实现了其他 <code>*.Aware</code>接口，就调用相应的方法。</li>\\n<li>如果有和加载这个 Bean 的 Spring 容器相关的 <code>BeanPostProcessor</code> 对象，执行<code>postProcessBeforeInitialization()</code> 方法</li>\\n<li>如果 Bean 实现了<code>InitializingBean</code>接口，执行<code>afterPropertiesSet()</code>方法。</li>\\n<li>如果 Bean 在配置文件中的定义包含 init-method 属性，执行指定的方法。</li>\\n<li>如果有和加载这个 Bean 的 Spring 容器相关的 <code>BeanPostProcessor</code> 对象，执行<code>postProcessAfterInitialization()</code> 方法</li>\\n<li>当要销毁 Bean 的时候，如果 Bean 实现了 <code>DisposableBean</code> 接口，执行 <code>destroy()</code> 方法。</li>\\n<li>当要销毁 Bean 的时候，如果 Bean 在配置文件中的定义包含 destroy-method 属性，执行指定的方法。</li>\\n</ul>","autoDesc":true}`);export{s as comp,B as data};
