import{_ as e,V as a,W as t,Z as i}from"./framework-e5d7a6b2.js";const r={},h=i('<h1 id="collection-接口" tabindex="-1"><a class="header-anchor" href="#collection-接口" aria-hidden="true">#</a> Collection 接口</h1><h2 id="list-接口" tabindex="-1"><a class="header-anchor" href="#list-接口" aria-hidden="true">#</a> List 接口</h2><ul><li>Vector，List 接口旧的实现，是线程安全的，方法前都</li><li>ArrayList</li><li>LinkedList</li></ul><p>（Stack是继承自Vector的类，但是一般不推荐使用，ArrayDeque更快）</p><h3 id="arraylist" tabindex="-1"><a class="header-anchor" href="#arraylist" aria-hidden="true">#</a> ArrayList</h3><h4 id="初始容量" tabindex="-1"><a class="header-anchor" href="#初始容量" aria-hidden="true">#</a> 初始容量</h4><p>如果是无参构造，初始容量是0，加入第一个元素的时候会扩容成10。</p><h4 id="扩容机制" tabindex="-1"><a class="header-anchor" href="#扩容机制" aria-hidden="true">#</a> 扩容机制</h4><p>当装满的时候，会扩容数组大小为1.5倍。</p><h2 id="set-接口" tabindex="-1"><a class="header-anchor" href="#set-接口" aria-hidden="true">#</a> Set 接口</h2><h3 id="比较-hashset、linkedhashset-和-treeset-三者的异同" tabindex="-1"><a class="header-anchor" href="#比较-hashset、linkedhashset-和-treeset-三者的异同" aria-hidden="true">#</a> 比较 HashSet、LinkedHashSet 和 TreeSet 三者的异同</h3><ul><li>HashSet 是 Set 接口的主要实现类 ，HashSet 的底层是 HashMap，线程不安全的，可以存储 null 值;</li><li>LinkedHashSet 是 HashSet 的子类，能够按照添加的顺序遍历;</li><li>TreeSet 底层使用红黑树，能够按照添加元素的顺序进行遍历，排序的方式有自然排序和定制排序。</li></ul>',12),s=[h];function l(d,n){return a(),t("div",null,s)}const o=e(r,[["render",l],["__file","collection.html.vue"]]);export{o as default};
