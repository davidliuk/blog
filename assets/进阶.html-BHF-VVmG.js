import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as i,o as t}from"./app-wjKRSZHj.js";const c={};function d(n,p){return t(),o("div",null,p[0]||(p[0]=[i('<h1 id="进阶" tabindex="-1"><a class="header-anchor" href="#进阶"><span>进阶</span></a></h1><h2 id="是否能够使用动态规划的核心" tabindex="-1"><a class="header-anchor" href="#是否能够使用动态规划的核心"><span>是否能够使用动态规划的核心</span></a></h2><p>是否存在一种状态表示方法</p><p>可以使得状态之间的依赖关系可以被拓扑排序（DAG）<br> 推论：动态规划处理的状态要有方向性（才不会有循环依赖）</p><blockquote><p>看不懂没关系，之后做题慢慢带着这个推论去体会</p></blockquote><h3 id="坐标" tabindex="-1"><a class="header-anchor" href="#坐标"><span>坐标</span></a></h3><p>停在原地的方案数</p><p>状态：<code>dp[i][j]</code>表示走了i次以后，走到坐标j的路径数</p><p>方法：把所有可能会影响到结果的信息都往状态数组里丢</p><p>时间复杂度：通用计算公式O状态总数计算每个状态的时间)</p><h3 id="子序列" tabindex="-1"><a class="header-anchor" href="#子序列"><span>子序列</span></a></h3><p>子序列 Subsequence</p><p>题目一般会让你找最长子序列或者子序列的个数之类的子序列属于一维坐标型DP</p><p>dp表示以下标ⅰ作为结尾的子序列的最优值/方案数/何行性</p><p>问：n个数的数组有多少个subsequences?(数量级) O2n</p><hr><p>不同的子序列</p><blockquote><p>给定一个小写字母组成的字符串S，问S中不同的非空子序列的个数</p></blockquote><p>状态：<code>f[i]</code>表示以下标 i 字符结尾的不同子序列有多少个</p><p>转移：<code>f[i]=sum{f[j]|a[i] not in f[j+1,i-1]}</code></p><p>边界：<code>f[i]=1, a[i]是第一次出现</code></p><hr><h3 id="和" tabindex="-1"><a class="header-anchor" href="#和"><span>和</span></a></h3><p>题目中有若平个数之和<code>&gt;</code>或者<code>&lt;</code>的限制条件</p><p>一般使用背包型DP</p><hr><p>盈利计划</p><p>有n个项目，G个人</p><p>每个项目需要用<code>group[i]</code>个人，可以获得<code>profit[i]</code>的利润</p><p>一个人不能同时参与多个项目</p><p>求利润最少为P的方案总数</p><p>求方案数、有和信息</p><p>和=&gt;背包DP</p><p>有哪些信息应该放到状态中？</p><p>多选：项目数、人数、利润</p><p>状态：<code>f[i][j][k]</code>表示前i个项目，用了j个人，获得至少k的收益的方案总数</p><p>转移：<code>f[i][j][k]=f[i-1][j][k]+f[i-1][j-g[i-1][k-p[i-1]]]</code></p><p>边界：<code>f[0][0][0]=1</code></p><p>答案：</p><p>注：group[i-1]是第i个项目需要用的人数（第i个数index-=i-1)</p><p>j&gt;=group[i-]时才可以选择做第i个项目</p><p>如果k-profit[i-1]&lt;0则让这个维度的数值=0</p><p>可以滚i</p><hr><p>老鼠游戏</p><blockquote><p>坐标型+状态型（需要知道来这里之前的一步的状态）</p></blockquote><p>状态：<code>f[i][j]</code>表示从0跳奇/偶数步(j)到坐标i位置的方案数</p><p>转移：<code>f[i][j]=0|arr[i]==1, sum{f[i-k][1-j]}</code></p><p>边界：<code>f[0][0]=1</code></p><p>优化：可以滚动i，开5个大小，因为最多需要从4步前拿状态</p><hr><p>全1正方形</p><blockquote><p>求一个01矩阵中，全为1的正方形个数</p><p>坐标型2维</p></blockquote><hr><p>浮点数组合和</p><blockquote><p>给 n 个 &gt;= 0 的 float, 每个数可以向上或者向下取整，调整目标是所有数之和为target，代价是每个数调整后差值绝对值，问最小调整代价所对应的具体方案</p><p>分组01背包，每组是一个数，组内两个方案向上或向下</p><p><code>prev[i][j]</code>存具体的选择，倒推法</p></blockquote><p>状态：<code>f[i][j]</code>表示前i个数，凑出j的和，最小的调整代价是多少</p><p>转移：</p><p>边界：</p><hr><p>合并石头的最低成本</p><blockquote><p>一条直线上有 N 堆石头，每次可以合并连续的 K 堆石头，代价是 K 堆石头之和，问最终需要合并成一堆的最小代价之和</p><p>区间dp</p></blockquote><p>状态：<code>f[i][j][k]</code>表示i到j这一段合并为k堆石子的最小代价</p><p>转移：<code>f[i][j][k]=min{f[i][x][k-1]+f[x][j][1]}+sum(i,j)</code></p><p>答案：<code>f[0][n-1][1]</code></p><hr><p>跳跃游戏</p><p>状态：<code>f[i]</code>表示前i个位置最大可以跳到哪里</p><p>转移：<code>f[i]=max{f[i-1],nums[i-1]+i-1|f[i-1]&gt;i-1}</code></p><p>边界：<code>f[0]=0</code></p><p>答案：<code>f[n]&gt;=n-1</code></p><p>滚i，开2或者一个变量即可</p><p>贪心法只能解决这两题，动规n2但是很有通用性</p><p>状态：<code>f[i]</code>表示可以跳到坐标i</p><p>转移：<code>f[i]=or{j+nums[j]&gt;=i}</code></p><p>边界：<code>f[0]=true</code></p><p>答案：<code>f[n-1]</code></p><hr><p>跳跃游戏II</p><p>问一开始站在 index=0 一直向右跳<strong>最少</strong>跳几次跳到 index = n-1</p><p>状态：<code>f[i]</code>表示前i个位置最大可以跳到哪里</p><p>转移：<code>f[i]=max{f[i-1],nums[i-1]+i-1|f[i-1]&gt;i-1}</code></p><p>边界：<code>f[0]=0</code></p><p>答案：</p><hr><p>状态：<code>f[i]</code>表示跳到坐标i最小步数</p><p>转移：<code>f[i]=min{f[j]|f[j]+nums[j]&gt;=i}+1</code></p><p>边界：<code>f[0]=0</code></p><p>答案：<code>f[n-1]</code></p><hr><p>找到最大的全1正方形</p><p>找到最大的对角线全1其他全0的正方形</p><p>最大矩形的不行，这种需要单调栈</p>',93)]))}const l=e(c,[["render",d],["__file","进阶.html.vue"]]),s=JSON.parse(`{"path":"/algo/summary/optimise/dynamic-programming/%E8%BF%9B%E9%98%B6/%E8%BF%9B%E9%98%B6.html","title":"进阶","lang":"en-US","frontmatter":{"description":"进阶 是否能够使用动态规划的核心 是否存在一种状态表示方法 可以使得状态之间的依赖关系可以被拓扑排序（DAG） 推论：动态规划处理的状态要有方向性（才不会有循环依赖） 看不懂没关系，之后做题慢慢带着这个推论去体会 坐标 停在原地的方案数 状态：dp[i][j]表示走了i次以后，走到坐标j的路径数 方法：把所有可能会影响到结果的信息都往状态数组里丢 时间...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/algo/summary/optimise/dynamic-programming/%E8%BF%9B%E9%98%B6/%E8%BF%9B%E9%98%B6.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"进阶"}],["meta",{"property":"og:description","content":"进阶 是否能够使用动态规划的核心 是否存在一种状态表示方法 可以使得状态之间的依赖关系可以被拓扑排序（DAG） 推论：动态规划处理的状态要有方向性（才不会有循环依赖） 看不懂没关系，之后做题慢慢带着这个推论去体会 坐标 停在原地的方案数 状态：dp[i][j]表示走了i次以后，走到坐标j的路径数 方法：把所有可能会影响到结果的信息都往状态数组里丢 时间..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-22T03:05:37.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-22T03:05:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"进阶\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-22T03:05:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":2,"title":"是否能够使用动态规划的核心","slug":"是否能够使用动态规划的核心","link":"#是否能够使用动态规划的核心","children":[{"level":3,"title":"坐标","slug":"坐标","link":"#坐标","children":[]},{"level":3,"title":"子序列","slug":"子序列","link":"#子序列","children":[]},{"level":3,"title":"和","slug":"和","link":"#和","children":[]}]}],"git":{"createdTime":1732244737000,"updatedTime":1732244737000,"contributors":[{"name":"David Liu","email":"liudawei@seas.upenn.edu","commits":1}]},"readingTime":{"minutes":4.06,"words":1217},"filePathRelative":"algo/summary/optimise/dynamic-programming/进阶/进阶.md","localizedDate":"November 22, 2024","excerpt":"\\n<h2>是否能够使用动态规划的核心</h2>\\n<p>是否存在一种状态表示方法</p>\\n<p>可以使得状态之间的依赖关系可以被拓扑排序（DAG）<br>\\n推论：动态规划处理的状态要有方向性（才不会有循环依赖）</p>\\n<blockquote>\\n<p>看不懂没关系，之后做题慢慢带着这个推论去体会</p>\\n</blockquote>\\n<h3>坐标</h3>\\n<p>停在原地的方案数</p>\\n<p>状态：<code>dp[i][j]</code>表示走了i次以后，走到坐标j的路径数</p>\\n<p>方法：把所有可能会影响到结果的信息都往状态数组里丢</p>\\n<p>时间复杂度：通用计算公式O状态总数计算每个状态的时间)</p>","autoDesc":true}`);export{l as comp,s as data};
