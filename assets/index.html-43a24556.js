import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,d as e}from"./app-9107e99b.js";const t={},i=e(`<h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><h3 id="rabbitmq有哪些重要角色" tabindex="-1"><a class="header-anchor" href="#rabbitmq有哪些重要角色" aria-hidden="true">#</a> rabbitmq有哪些重要角色？</h3><ul><li>生产者：消息的创建者，负责创建和推送数据到消息服务器</li><li>消费者：消息的接收方，用于处理数据和确认消息</li><li>代理：就是RabbitMQ本身，用于扮演快递的角色，本身并不生产消息</li></ul><h3 id="rabbitmq有哪些重要组件" tabindex="-1"><a class="header-anchor" href="#rabbitmq有哪些重要组件" aria-hidden="true">#</a> rabbitmq有哪些重要组件？</h3><ul><li>ConnectionFactory(连接管理器)：应用程序与RabbitMQ之间建立连接的管理器</li><li>BrokerBroker是RabbitMQ的核心组件，它接收来自生产者的消息并将其路由到消费者。Broker还负责管理队列、交换机和绑定等对象。RabbitMQ Broker可以在单个节点上运行，也可以在多个节点上运行以实现高可用性和负载均衡。</li><li>Channel(信道)：消息推送使用的通道</li><li>Exchange(交换器)：用于接受、分配消息</li><li>Queue(队列)：用于存储生产者的消息</li><li>RoutingKey(路由键)：生产者将消息发送给交换器的时候，会指定一个RoutingKey,用来指定这个消息的路由规则，这个RoutingKey需要与交换器类型和绑定键(BindingKey)联合使用才能最终生效。</li><li>BindKey(绑定键)：用于把交换器的消息绑定到队列上</li></ul><h2 id="基本操作" tabindex="-1"><a class="header-anchor" href="#基本操作" aria-hidden="true">#</a> 基本操作</h2><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p>启动命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--hostname</span> mq1 <span class="token parameter variable">--name</span> rabbitmq <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_USER</span><span class="token operator">=</span>david <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_PASS</span><span class="token operator">=</span>DavidLiu7 <span class="token parameter variable">-p</span> <span class="token number">15672</span>:15672 <span class="token parameter variable">-p</span> <span class="token number">5672</span>:5672 rabbitmq:3-management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>虚拟主机：多租户隔离</p><h2 id="流程" tabindex="-1"><a class="header-anchor" href="#流程" aria-hidden="true">#</a> 流程</h2><p>消息发送流程：</p><ol><li>建立Connection</li><li>创建Channel</li><li>利用Channel声明队列</li><li>利用Channel向队列发送消息</li></ol><p>消息接收流程：</p><ol><li>建立Connection</li><li>创建Channel</li><li>利用Channel声明队列</li><li>定义consumer的消费行为handleDelivery()</li><li>利用Channel讲消费者与队列绑定</li></ol><h2 id="amqp" tabindex="-1"><a class="header-anchor" href="#amqp" aria-hidden="true">#</a> AMQP</h2><p>什么是AMQP?</p><ul><li>应用间消息通信的一种协议，与语言和平台无关。</li></ul><p>添加spring-amqp的依赖</p><p>或者spring-boot-starter-amqp</p><p>SpringAMQP如何发送消息？</p><ul><li>引入amgp的starter依赖</li><li>配置RabbitMO地址</li><li>利用RabbitTemplate的convertAndSend方法</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringAMQPTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowaired</span>
    <span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSimpleQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> queueName <span class="token operator">=</span> <span class="token string">&quot;simple.queue&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;hello, spring amqp!&quot;</span><span class="token punctuation">;</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringRabbitListener</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queue <span class="token operator">=</span> <span class="token string">&quot;simple.queue&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listenSimpleQueueMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),p=[i];function l(o,c){return a(),s("div",null,p)}const d=n(t,[["render",l],["__file","index.html.vue"]]);export{d as default};
