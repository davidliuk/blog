import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as t,o}from"./app-DQpqR3jB.js";const a={};function n(l,p){return o(),i("div",null,p[0]||(p[0]=[t('<h1 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h1><p>aop 称为是面向切面编程，而他的 aop 原理呢就是：在执行某些代码之前执行另外的代码，是程序变的灵活，扩展性更灵活，可以随意的删除和添加某些功能！</p><p>一，性能统计／计数</p><p>将与业务无关的代码，使用 AOP 拦截他们。</p><p>二，事务处理</p><p>调用方法前开启事务， 调用方法后提交关闭事务</p><p>三，缓存处理</p><p>简单的＂方法缓存＂可以把＂方法名－参数＂作为 Key，拦截器拦截方法根据＂方法名－参数＂去缓存系统查询，如果存在就直接返回，不需要执行方法真正的逻辑～</p><p>四，日志打印</p><p>五，数据加加密/签名／验签名等场景</p><p>在支付行业往往对安全性要求比较高，我们在保存／接收／发送数据前先要对数据进行验签／签名／加密等操作，都需要做特殊处理。</p><p>比如一个手机号，我们可以通过一个＂拦截器＂对手机号，身份证号这种敏感信息做这种特殊处理；</p><p>六，权限控制</p><p>SpringSecurity</p><ol><li><p>Authentication 权限</p></li><li><p>Caching 缓存</p></li><li><p>Context passing 内容传递</p></li><li><p>Error handling 错误处理</p></li><li><p>Lazy loading 　懒加载</p></li><li><p>Debugging 　　调试</p></li><li><p>logging, tracing, profiling and monitoring 　记录跟踪　优化　校准</p></li><li><p>Performance optimization 　性能优化</p></li><li><p>Persistence 　　持久化</p></li><li><p>Resource pooling 　资源池</p></li><li><p>Synchronization 　同步</p></li><li><p>Transactions 事务、</p></li></ol><p>aop 几个应用场景：</p><ol><li>用于日志打印</li><li>用于全局异常处理拦截</li><li>返回值统一处理</li><li>多数据源切换</li></ol>',17)]))}const s=e(a,[["render",n],["__file","应用场景.html.vue"]]),m=JSON.parse(`{"path":"/se/lang/java/framework/spring/core/aop/%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.html","title":"应用场景","lang":"en-US","frontmatter":{"description":"应用场景 aop 称为是面向切面编程，而他的 aop 原理呢就是：在执行某些代码之前执行另外的代码，是程序变的灵活，扩展性更灵活，可以随意的删除和添加某些功能！ 一，性能统计／计数 将与业务无关的代码，使用 AOP 拦截他们。 二，事务处理 调用方法前开启事务， 调用方法后提交关闭事务 三，缓存处理 简单的＂方法缓存＂可以把＂方法名－参数＂作为 Key...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/java/framework/spring/core/aop/%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"应用场景"}],["meta",{"property":"og:description","content":"应用场景 aop 称为是面向切面编程，而他的 aop 原理呢就是：在执行某些代码之前执行另外的代码，是程序变的灵活，扩展性更灵活，可以随意的删除和添加某些功能！ 一，性能统计／计数 将与业务无关的代码，使用 AOP 拦截他们。 二，事务处理 调用方法前开启事务， 调用方法后提交关闭事务 三，缓存处理 简单的＂方法缓存＂可以把＂方法名－参数＂作为 Key..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-09T18:37:53.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-09T18:37:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"应用场景\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-09T18:37:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[],"git":{"createdTime":1684318252000,"updatedTime":1731177473000,"contributors":[{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro-3.local","commits":1}]},"readingTime":{"minutes":1.36,"words":408},"filePathRelative":"se/lang/java/framework/spring/core/aop/应用场景.md","localizedDate":"May 17, 2023","excerpt":"\\n<p>aop 称为是面向切面编程，而他的 aop 原理呢就是：在执行某些代码之前执行另外的代码，是程序变的灵活，扩展性更灵活，可以随意的删除和添加某些功能！</p>\\n<p>一，性能统计／计数</p>\\n<p>将与业务无关的代码，使用 AOP 拦截他们。</p>\\n<p>二，事务处理</p>\\n<p>调用方法前开启事务， 调用方法后提交关闭事务</p>\\n<p>三，缓存处理</p>\\n<p>简单的＂方法缓存＂可以把＂方法名－参数＂作为 Key，拦截器拦截方法根据＂方法名－参数＂去缓存系统查询，如果存在就直接返回，不需要执行方法真正的逻辑～</p>\\n<p>四，日志打印</p>\\n<p>五，数据加加密/签名／验签名等场景</p>","autoDesc":true}`);export{s as comp,m as data};
