const t=JSON.parse(`{"key":"v-5d3368b8","path":"/se/lang/java/basic/oop/Untitled.html","title":"面向对象","lang":"en-US","frontmatter":{"description":"面向对象 三大特征 封装 继承 多态 深拷贝和浅拷贝区别了解吗？什么是引用拷贝？ 关于深拷贝和浅拷贝区别，我这里先给结论： 浅拷贝：浅拷贝会在堆上创建一个新的对象（区别于引用拷贝的一点），不过，如果原对象内部的属性是引用类型的话，浅拷贝会直接复制内部对象的引用地址，也就是说拷贝对象和原对象共用同一个内部对象。 深拷贝 ：深拷贝会完全复制整个对象，包括这个对象所包含的内部对象。","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/java/basic/oop/Untitled.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"面向对象"}],["meta",{"property":"og:description","content":"面向对象 三大特征 封装 继承 多态 深拷贝和浅拷贝区别了解吗？什么是引用拷贝？ 关于深拷贝和浅拷贝区别，我这里先给结论： 浅拷贝：浅拷贝会在堆上创建一个新的对象（区别于引用拷贝的一点），不过，如果原对象内部的属性是引用类型的话，浅拷贝会直接复制内部对象的引用地址，也就是说拷贝对象和原对象共用同一个内部对象。 深拷贝 ：深拷贝会完全复制整个对象，包括这个对象所包含的内部对象。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-03-23T13:33:44.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-03-23T13:33:44.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/se/lang/java/basic/oop/Untitled.html"}]]},"headers":[{"level":3,"title":"三大特征","slug":"三大特征","link":"#三大特征","children":[]},{"level":3,"title":"深拷贝和浅拷贝区别了解吗？什么是引用拷贝？","slug":"深拷贝和浅拷贝区别了解吗-什么是引用拷贝","link":"#深拷贝和浅拷贝区别了解吗-什么是引用拷贝","children":[]}],"git":{"createdTime":1679321449000,"updatedTime":1679578424000,"contributors":[{"name":"davidliuk","email":"l729641074@163.com","commits":2}]},"readingTime":{"minutes":0.82,"words":245},"localizedDate":"March 20, 2023","filePathRelative":"se/lang/java/basic/oop/Untitled.md","excerpt":"<h1> 面向对象</h1>\\n<h3> 三大特征</h3>\\n<h4> 封装</h4>\\n<h4> 继承</h4>\\n<h4> 多态</h4>\\n<h3> 深拷贝和浅拷贝区别了解吗？什么是引用拷贝？</h3>\\n<p>关于深拷贝和浅拷贝区别，我这里先给结论：</p>\\n<ul>\\n<li><strong>浅拷贝</strong>：浅拷贝会在堆上创建一个新的对象（区别于引用拷贝的一点），不过，如果原对象内部的属性是引用类型的话，浅拷贝会直接复制内部对象的引用地址，也就是说拷贝对象和原对象共用同一个内部对象。</li>\\n<li><strong>深拷贝</strong> ：深拷贝会完全复制整个对象，包括这个对象所包含的内部对象。</li>\\n</ul>","autoDesc":true}`);export{t as data};
