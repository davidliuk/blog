const e=JSON.parse(`{"key":"v-8580ea64","path":"/course/block-chain/%E5%AE%9E%E9%AA%8C/%E5%AE%9E%E9%AA%8C1.html","title":"实验 1","lang":"en-US","frontmatter":{"description":"实验 1 关键在理解伪代码，怎么弄 写一个merkle tree 实验要求： 生成一个2^n个元素的集合，要求里面没有重复元素 要求用数组存构建这棵树（这样简单一些） hash函数选取一个，如md5或sha256、sha1 用库，千万不要自己实现 节点三类：清节点（记录区块的头和与自己有关的节点） 证明存在 返回证据（以及他们所在左右） 自下而上构建","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/course/block-chain/%E5%AE%9E%E9%AA%8C/%E5%AE%9E%E9%AA%8C1.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"实验 1"}],["meta",{"property":"og:description","content":"实验 1 关键在理解伪代码，怎么弄 写一个merkle tree 实验要求： 生成一个2^n个元素的集合，要求里面没有重复元素 要求用数组存构建这棵树（这样简单一些） hash函数选取一个，如md5或sha256、sha1 用库，千万不要自己实现 节点三类：清节点（记录区块的头和与自己有关的节点） 证明存在 返回证据（以及他们所在左右） 自下而上构建"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-11-22T09:56:03.000Z"}],["meta",{"property":"article:author","content":"David Liu"}],["meta",{"property":"article:modified_time","content":"2023-11-22T09:56:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"实验 1\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-22T09:56:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":3,"title":"证明存在","slug":"证明存在","link":"#证明存在","children":[]},{"level":3,"title":"证明不存在","slug":"证明不存在","link":"#证明不存在","children":[]}],"git":{"createdTime":1686210114000,"updatedTime":1700646963000,"contributors":[{"name":"davidliu","email":"liudawei47@jd.com","commits":1},{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":1.15,"words":345},"filePathRelative":"course/block-chain/实验/实验1.md","localizedDate":"June 8, 2023","excerpt":"<h1> 实验 1</h1>\\n<p>关键在理解伪代码，怎么弄</p>\\n<p>写一个merkle tree</p>\\n<p>实验要求：</p>\\n<ol>\\n<li>\\n<p>生成一个2^n个元素的集合，要求里面没有重复元素</p>\\n</li>\\n<li>\\n<p>要求用数组存构建这棵树（这样简单一些）</p>\\n</li>\\n<li>\\n<p>hash函数选取一个，如md5或sha256、sha1</p>\\n<p>用库，千万不要自己实现</p>\\n</li>\\n</ol>\\n<p>节点三类：清节点（记录区块的头和与自己有关的节点）</p>\\n<h3> 证明存在</h3>\\n<p>返回证据（以及他们所在左右）</p>\\n<p>自下而上构建</p>","autoDesc":true}`);export{e as data};
