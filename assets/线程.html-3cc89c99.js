import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as l,d as r}from"./app-9107e99b.js";const i={},d=r('<h1 id="线程" tabindex="-1"><a class="header-anchor" href="#线程" aria-hidden="true">#</a> 线程</h1><h2 id="线程的概念" tabindex="-1"><a class="header-anchor" href="#线程的概念" aria-hidden="true">#</a> 线程的概念</h2><h3 id="线程与进程的比较" tabindex="-1"><a class="header-anchor" href="#线程与进程的比较" aria-hidden="true">#</a> 线程与进程的比较</h3><p>线程与进程的比较如下：</p><ul><li>进程是资源（包括内存、打开的文件等）分配的单位，线程是 CPU 调度的单位；</li><li>进程拥有一个完整的资源平台，而线程只独享必不可少的资源，如寄存器和栈；</li><li>线程同样具有就绪、阻塞、执行三种基本状态，同样具有状态之间的转换关系；</li><li>线程能减少并发执行的时间和空间开销；</li></ul><p>对于，线程相比进程能减少开销，体现在：</p><ul><li>线程的创建时间比进程快，因为进程在创建的过程中，还需要资源管理信息，比如内存管理信息、文件管理信息，而线程在创建的过程中，不会涉及这些资源管理信息，而是共享它们；</li><li>线程的终止时间比进程快，因为线程释放的资源相比进程少很多；</li><li>同一个进程内的线程切换比进程切换快，因为线程具有相同的地址空间（虚拟内存共享），这意味着同一个进程的线程都具有同一个页表，那么在切换的时候不需要切换页表。而对于进程之间的切换，切换的时候要把页表给切换掉，而页表的切换过程开销是比较大的；</li><li>由于同一进程的各线程间共享内存和文件资源，那么在线程之间数据传递的时候，就不需要经过内核了，这就使得线程之间的数据交互效率更高了；</li></ul><p>所以，不管是时间效率，还是空间效率线程比进程都要高。</p><h3 id="线程上下文切换" tabindex="-1"><a class="header-anchor" href="#线程上下文切换" aria-hidden="true">#</a> 线程上下文切换</h3><p>线程在执行过程中会有自己的运行条件和状态（也称上下文），比如上文所说到过的程序计数器，栈信息等。当出现如下情况的时候，线程会从占用 CPU 状态中退出。</p><ul><li>主动让出 CPU，比如调用了 <code>sleep()</code>, <code>wait()</code> 等。</li><li>时间片用完，因为操作系统要防止一个线程或者进程长时间占用 CPU 导致其他线程或者进程饿死。</li><li>调用了阻塞类型的系统中断，比如请求 IO，线程被阻塞。</li><li>被终止或结束运行</li></ul><p>这其中前三种都会发生线程切换，线程切换意味着需要保存当前线程的上下文，留待线程下次占用 CPU 的时候恢复现场。并加载下一个将要占用 CPU 的线程上下文。这就是所谓的 <strong>上下文切换</strong>。</p><p>上下文切换是现代操作系统的基本功能，因其每次需要保存信息恢复信息，这将会占用 CPU，内存等系统资源进行处理，也就意味着效率会有一定损耗，如果频繁切换就会造成整体效率低下。</p><h2 id="线程的创建" tabindex="-1"><a class="header-anchor" href="#线程的创建" aria-hidden="true">#</a> 线程的创建</h2><p>Java 使用 Thread 类代表线程，所有的线程对象都必须是 Thread 类或其子类的实例。Java 可以用四种方式来创建线程，如下所示：</p><ol><li><p>继承 Thread 类创建线程</p></li><li><p>实现 Runnable 接口创建线程</p></li><li><p>使用 Callable 和 Future 创建线程</p></li><li><p>使用线程池例如用 Executor 框架</p></li></ol><h3 id="继承-thread-类创建线程类" tabindex="-1"><a class="header-anchor" href="#继承-thread-类创建线程类" aria-hidden="true">#</a> 继承 Thread 类创建线程类</h3><ol><li><p>定义 Thread 类的子类，并重写该类的 run 方法，该 run 方法的方法体就代表了线程要完成的任务。因此把 <code>run()</code> 方法称为执行体。</p></li><li><p>创建 Thread 子类的实例，即创建了线程对象。</p></li><li><p>调用线程对象的 <code>start()</code> 方法来启动该线程。</p></li></ol><h3 id="通过-runnable-接口创建线程类" tabindex="-1"><a class="header-anchor" href="#通过-runnable-接口创建线程类" aria-hidden="true">#</a> 通过 Runnable 接口创建线程类</h3><ol><li><p>定义 runnable 接口的实现类，并重写该接口的 run()方法，该 <code>run()</code> 方法的方法体同样是该线程的线程执行体。</p></li><li><p>创建 Runnable 实现类的实例，并依此实例作为 Thread 的 target 来创建 Thread 对象，该 Thread 对象才是真正的线程对象。</p></li><li><p>调用线程对象的 <code>start()</code> 方法来启动该线程。</p></li></ol><h3 id="通过-callable-和-future-创建线程" tabindex="-1"><a class="header-anchor" href="#通过-callable-和-future-创建线程" aria-hidden="true">#</a> 通过 Callable 和 Future 创建线程</h3><ol><li><p>创建 Callable 接口的实现类，并实现 call()方法，该 call()方法将作为线程执行体，并且有返回值。</p></li><li><p>创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable 对象，该 FutureTask 对象封装了该 Callable 对象的 call()方法的返回值。</p></li><li><p>使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。</p></li><li><p>调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值</p></li></ol><h3 id="实现-runnable-和实现-callable-接口的区别" tabindex="-1"><a class="header-anchor" href="#实现-runnable-和实现-callable-接口的区别" aria-hidden="true">#</a> 实现 Runnable 和实现 Callable 接口的区别</h3><p>实现 Runnable 和实现 Callable 接口的方式基本相同，不过是后者执行 call()方法有返回值，后者线程执行体 run()方法无返回值，因此可以把这两种方式归为一种。这种方式与继承 Thread 类的方法之间的差别如下：</p><ol><li><p>线程只是实现 Runnable 或实现 Callable 接口，还可以继承其他类。</p></li><li><p>这种方式下，多个线程可以共享一个 target 对象，非常适合多线程处理同一份资源的情形。</p></li><li><p>但是编程稍微复杂，如果需要访问当前线程，必须调用 Thread.currentThread()方法。</p></li><li><p>继承 Thread 类的线程类不能再继承其他父类（Java 单继承决定）。</p></li><li><p>前三种的线程如果创建关闭频繁会消耗系统资源影响性能，而使用线程池可以不用线程的时候放回线程池，用的时候再从线程池取，项目开发中主要使用线程池。</p></li></ol><h3 id="通过-executor-框架" tabindex="-1"><a class="header-anchor" href="#通过-executor-框架" aria-hidden="true">#</a> 通过 Executor 框架</h3><p>1.5 后引入的 Executor 框架的最大优点是把任务的提交和执行解耦。要执行任务的人只需把 Task 描述清楚，然后提交即可。这个 Task 是怎么被执行的，被谁执行的，什么时候执行的，提交的人就不用关心了。具体点讲，提交一个 Callable 对象给 ExecutorService（如最常用的线程池 ThreadPoolExecutor），将得到一个 Future 对象，调用 Future 对象的 get 方法等待执行结果就好了。Executor 框架的内部使用了线程池机制，它在 java.util.cocurrent 包下，通过该框架来控制线程的启动、执行和关闭，可以简化并发编程的操作。因此，在 Java 5 之后，通过 Executor 来启动线程比使用 Thread 的 start 方法更好，除了更易管理，效率更好（用线程池实现，节约开销）外，还有关键的一点：有助于避免 this 逃逸问题——如果我们在构造器中启动一个线程，因为另一个任务可能会在构造器结束之前开始执行，此时可能会访问到初始化了一半的对象用 Executor 在构造器中。</p><p>Executor 框架包括：</p><ul><li>ThreadPoolExecutor，Executor，Executors，ExecutorService，CompletionService，Future，Callable 等。</li></ul><p>Executor 接口中之定义了一个方法 execute（Runnable command），该方法接收一个 Runable 实例，它用来执行一个任务，任务即一个实现了 Runnable 接口的类。ExecutorService 接口继承自 Executor 接口，它提供了更丰富的实现多线程的方法，比如，ExecutorService 提供了关闭自己的方法，以及可为跟踪一个或多个异步任务执行状况而生成 Future 的方法。 可以调用 ExecutorService 的 <code>shutdown()</code> 方法来平滑地关闭 ExecutorService，调用该方法后，将导致 ExecutorService 停止接受任何新的任务且等待已经提交的任务执行完成(已经提交的任务会分两类：一类是已经在执行的，另一类是还没有开始执行的)，当所有已经提交的任务执行完毕后将会关闭 ExecutorService。因此我们一般用该接口来实现和管理多线程。</p><p>ExecutorService 的生命周期包括三种状态：运行、关闭、终止。创建后便进入运行状态，当调用了 <code>shutdown()</code> 方法时，便进入关闭状态，此时意味着 ExecutorService 不再接受新的任务，但它还在执行已经提交了的任务，当素有已经提交了的任务执行完后，便到达终止状态。如果不调用 <code>shutdown()</code> 方法，ExecutorService 会一直处在运行状态，不断接收新的任务，执行新的任务，服务器端一般不需要关闭它，保持一直运行即可。</p><h2 id="并发编程" tabindex="-1"><a class="header-anchor" href="#并发编程" aria-hidden="true">#</a> 并发编程</h2><h3 id="使用多线程可能带来什么问题" tabindex="-1"><a class="header-anchor" href="#使用多线程可能带来什么问题" aria-hidden="true">#</a> 使用多线程可能带来什么问题?</h3><p>并发编程的目的就是为了能提高程序的执行效率提高程序运行速度，但是并发编程并不总是能提高程序运行速度的，而且并发编程可能会遇到很多问题，比如：</p><ul><li>内存泄漏</li><li>死锁</li><li>线程不安全</li></ul><h3 id="如何理解线程安全和不安全" tabindex="-1"><a class="header-anchor" href="#如何理解线程安全和不安全" aria-hidden="true">#</a> 如何理解线程安全和不安全？</h3><p>线程安全和不安全是在多线程环境下对于同一份数据的访问是否能够保证其正确性和一致性的描述。</p><ul><li>线程安全指的是在多线程环境下，对于同一份数据，不管有多少个线程同时访问，都能保证这份数据的正确性和一致性。</li><li>线程不安全则表示在多线程环境下，对于同一份数据，多个线程同时访问时可能会导致数据混乱、错误或者丢失。</li></ul>',38),t=[d];function c(u,h){return a(),l("div",null,t)}const p=e(i,[["render",c],["__file","线程.html.vue"]]);export{p as default};
