import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as n}from"./app-DIqbhby7.js";const o={};function i(p,t){return n(),a("div",null,t[0]||(t[0]=[e("h1",{id:"适配器",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#适配器"},[e("span",null,"适配器")])],-1),e("p",null,"适配器模式可以通过创建一个适配器类，该适配器类实现接口并提供默认实现，然后已有的实现类可以继承适配器类而不是直接实现接口。这样，已有的实现类不需要修改，而只需要在需要覆盖新方法的实现类中实现新方法。",-1),e("p",null,[e("a",{href:"https://juejin.cn/post/7313418992310976549?utm_source=gold_browser_extension",target:"_blank",rel:"noopener noreferrer"},"教程")],-1)]))}const d=r(o,[["render",i],["__file","adapter.html.vue"]]),c=JSON.parse(`{"path":"/se/design/pattern/structural/adapter.html","title":"适配器","lang":"en-US","frontmatter":{"description":"适配器 适配器模式可以通过创建一个适配器类，该适配器类实现接口并提供默认实现，然后已有的实现类可以继承适配器类而不是直接实现接口。这样，已有的实现类不需要修改，而只需要在需要覆盖新方法的实现类中实现新方法。 教程","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/design/pattern/structural/adapter.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"适配器"}],["meta",{"property":"og:description","content":"适配器 适配器模式可以通过创建一个适配器类，该适配器类实现接口并提供默认实现，然后已有的实现类可以继承适配器类而不是直接实现接口。这样，已有的实现类不需要修改，而只需要在需要覆盖新方法的实现类中实现新方法。 教程"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-22T03:17:27.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-22T03:17:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"适配器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-22T03:17:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[],"git":{"createdTime":1704683174000,"updatedTime":1732245447000,"contributors":[{"name":"David Liu","email":"liudawei@seas.upenn.edu","commits":1}]},"readingTime":{"minutes":0.34,"words":102},"filePathRelative":"se/design/pattern/structural/adapter.md","localizedDate":"January 8, 2024","excerpt":"\\n<p>适配器模式可以通过创建一个适配器类，该适配器类实现接口并提供默认实现，然后已有的实现类可以继承适配器类而不是直接实现接口。这样，已有的实现类不需要修改，而只需要在需要覆盖新方法的实现类中实现新方法。</p>\\n<p><a href=\\"https://juejin.cn/post/7313418992310976549?utm_source=gold_browser_extension\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">教程</a></p>\\n","autoDesc":true}`);export{d as comp,c as data};
