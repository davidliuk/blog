import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,d as e,o as a}from"./app-CrF8c6p-.js";const l={};function n(d,t){return a(),s("div",null,t[0]||(t[0]=[e(`<h1 id="关键字" tabindex="-1"><a class="header-anchor" href="#关键字"><span>关键字</span></a></h1><table><thead><tr><th style="text-align:left;">分类</th><th style="text-align:left;">关键字</th></tr></thead><tbody><tr><td style="text-align:left;">访问控制</td><td style="text-align:left;">private protected public</td></tr><tr><td style="text-align:left;">类，方法和变量修饰符</td><td style="text-align:left;">abstract class extends final implements interface native new static strictfp synchronized transient volatile enum</td></tr><tr><td style="text-align:left;">程序控制</td><td style="text-align:left;">break continue return do while if else for instanceof switch case default assert</td></tr><tr><td style="text-align:left;">错误处理</td><td style="text-align:left;">try catch throw throws finally</td></tr><tr><td style="text-align:left;">包相关</td><td style="text-align:left;">import package</td></tr><tr><td style="text-align:left;">基本类型</td><td style="text-align:left;">boolean byte char double float int long short</td></tr><tr><td style="text-align:left;">变量引用</td><td style="text-align:left;">super this void</td></tr><tr><td style="text-align:left;">保留字</td><td style="text-align:left;">goto const</td></tr></tbody></table><p>instanceof 是 Java 的一个二元操作符，类似于 ==，&gt;，&lt; 等操作符。</p><p>instanceof 是 Java 的保留关键字。它的作用是测试它左边的对象是否是它右边的类的实例，返回 boolean 的数据类型。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> list </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Stack</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(list </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">instanceof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Stack);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // true</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(list </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">instanceof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Vector);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // true</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(list </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">instanceof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ArrayList);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // false</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(list </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">instanceof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> List);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tips：所有的关键字都是小写的，在 IDE 中会以特殊颜色显示。</p><p><code>default</code> 这个关键字很特殊，既属于程序控制，也属于类，方法和变量修饰符，还属于访问控制。</p><ul><li>在程序控制中，当在 <code>switch</code> 中匹配不到任何情况时，可以使用 <code>default</code> 来编写默认匹配的情况。</li><li>在类，方法和变量修饰符中，从 JDK8 开始引入了默认方法，可以使用 <code>default</code> 关键字来定义一个方法的默认实现。</li><li>在访问控制中，如果一个方法前没有任何修饰符，则默认会有一个修饰符 <code>default</code>，但是这个修饰符加上了就会报错。</li></ul><p>⚠️ 注意 ：虽然 <code>true</code>, <code>false</code>, 和 <code>null</code> 看起来像关键字但实际上他们是字面值，同时你也不可以作为标识符来使用。</p><hr><p>final</p><ul><li>字段</li><li>变量</li><li>方法</li><li>类</li></ul>`,12)]))}const p=i(l,[["render",n],["__file","关键字.html.vue"]]),k=JSON.parse(`{"path":"/se/lang/java/basic/%E5%85%B3%E9%94%AE%E5%AD%97.html","title":"关键字","lang":"en-US","frontmatter":{"description":"关键字 instanceof 是 Java 的一个二元操作符，类似于 ==，>，< 等操作符。 instanceof 是 Java 的保留关键字。它的作用是测试它左边的对象是否是它右边的类的实例，返回 boolean 的数据类型。 Tips：所有的关键字都是小写的，在 IDE 中会以特殊颜色显示。 default 这个关键字很特殊，既属于程序控制，也属...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/java/basic/%E5%85%B3%E9%94%AE%E5%AD%97.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"关键字"}],["meta",{"property":"og:description","content":"关键字 instanceof 是 Java 的一个二元操作符，类似于 ==，>，< 等操作符。 instanceof 是 Java 的保留关键字。它的作用是测试它左边的对象是否是它右边的类的实例，返回 boolean 的数据类型。 Tips：所有的关键字都是小写的，在 IDE 中会以特殊颜色显示。 default 这个关键字很特殊，既属于程序控制，也属..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-22T02:01:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-22T02:01:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"关键字\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-22T02:01:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[],"git":{"createdTime":1679578424000,"updatedTime":1732240892000,"contributors":[{"name":"David Liu","email":"liudawei@seas.upenn.edu","commits":1},{"name":"davidliuk","email":"l729641074@163.com","commits":1},{"name":"liudawei47","email":"liudawei47@jd.com","commits":1},{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":1.36,"words":409},"filePathRelative":"se/lang/java/basic/关键字.md","localizedDate":"March 23, 2023","excerpt":"\\n<table>\\n<thead>\\n<tr>\\n<th style=\\"text-align:left\\">分类</th>\\n<th style=\\"text-align:left\\">关键字</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\\"text-align:left\\">访问控制</td>\\n<td style=\\"text-align:left\\">private protected public</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">类，方法和变量修饰符</td>\\n<td style=\\"text-align:left\\">abstract class extends final implements interface native new static strictfp synchronized transient volatile enum</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">程序控制</td>\\n<td style=\\"text-align:left\\">break continue return do while if else for instanceof switch case default assert</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">错误处理</td>\\n<td style=\\"text-align:left\\">try catch throw throws finally</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">包相关</td>\\n<td style=\\"text-align:left\\">import package</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">基本类型</td>\\n<td style=\\"text-align:left\\">boolean byte char double float int long short</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">变量引用</td>\\n<td style=\\"text-align:left\\">super this void</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\">保留字</td>\\n<td style=\\"text-align:left\\">goto const</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}`);export{p as comp,k as data};
