import{_ as t,V as a,W as e,a0 as d}from"./framework-705b829b.js";const r={},i=d('<h1 id="线索" tabindex="-1"><a class="header-anchor" href="#线索" aria-hidden="true">#</a> 线索</h1><ul><li>递推</li><li>分类</li><li>有序</li><li>收敛</li></ul><h2 id="收敛" tabindex="-1"><a class="header-anchor" href="#收敛" aria-hidden="true">#</a> 收敛</h2><p>逐级递减，可选状态空间逐级减少</p><p>出现位置</p><ul><li><p>排列，每次能选的少一个</p></li><li><p>环图，设置单调收敛变量，保证每个节点只能被访问一次</p><p>如hashmap的visited</p></li></ul><h2 id="有序" tabindex="-1"><a class="header-anchor" href="#有序" aria-hidden="true">#</a> 有序</h2><h2 id="递推" tabindex="-1"><a class="header-anchor" href="#递推" aria-hidden="true">#</a> 递推</h2><p>只要DFS、BFS存在的地方都有递推</p><table><thead><tr><th>核心概念</th><th>简单解释</th></tr></thead><tbody><tr><td>状态：状态定义</td><td>由实体状态和限制状态组成</td></tr><tr><td>边界：边界节点</td><td>边界节点 → 不依赖于任何状态点的已知点</td></tr><tr><td>递推：递推公式</td><td>不同节点的递推公式可以不同！！！</td></tr><tr><td>方向：拓扑排序</td><td>拓扑排序的方向确定</td></tr></tbody></table><h2 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h2><p>树：分类结构，可以根据不同维度进行分类，并且类别不能重合</p><p>在动规的地方详细讲解</p>',13),h=[i];function l(n,c){return a(),e("div",null,h)}const o=t(r,[["render",l],["__file","index.html.vue"]]);export{o as default};
