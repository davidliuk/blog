const e=JSON.parse(`{"key":"v-a11b5298","path":"/se/tools/resume/%E7%AE%80%E5%8E%86.html","title":"","lang":"en-US","frontmatter":{"description":"Trace Note 主要工作： 登录模块：利用AOP实现注解校验用户登陆状态及用户权限。使用 Redis 实现分布式 Session，解决集群间登录态同步问题； Trace查询：使用 Redis 对高频访问店铺进行缓存，降低 DB 压力同时提升 90% 的数据查询性能。 使用模版模式实现了通用缓存访问静态方法，并解决了缓存雪崩、缓存穿透和缓存击穿的问题。 使用 Redis 的 Geo + Hash 数据结构分类存储附近商户，并使用 Geo Search 命令实现高性能商户查询及按距离排序。 使用 Redis ZSet 数据结构存储用户点赞信息，保证用户只能点赞一次，并基于 ZSet 记录点赞的时间。 使用 Redis Set 数据结构实现用户关注、共同关注功能（交集），实测相对于 DB 查询性能提升 xx%，并使用 Redis AOF + 业务层日志防止关注数据丢失。 使用 Redis BitMap 实现用户连续签到统计功能，相对于传统关系库存储，节约 xx% 的内存并提升 xx% 的查询性能。（需要自己实际测试对比数据） 基于推模式实现关注 Feed 流，保证了新点评消息的及时可达，并减少用户访问的等待时间。 个性化饰品抢购：使用 Redis + Lua 脚本实现库存预检，并通过 RabbitMQ 实现订单的异步创建，解决了超卖问题、实现一人一单。实现相比传统数据库，秒杀性能提高了 xx%。 对于项目中的 JSON 格式化处理对象，采用 双检锁单例模式 进行管理，从而复用对象，避免了重复创建对象的开销，便于集中维护管理。","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/tools/resume/%E7%AE%80%E5%8E%86.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:description","content":"Trace Note 主要工作： 登录模块：利用AOP实现注解校验用户登陆状态及用户权限。使用 Redis 实现分布式 Session，解决集群间登录态同步问题； Trace查询：使用 Redis 对高频访问店铺进行缓存，降低 DB 压力同时提升 90% 的数据查询性能。 使用模版模式实现了通用缓存访问静态方法，并解决了缓存雪崩、缓存穿透和缓存击穿的问题。 使用 Redis 的 Geo + Hash 数据结构分类存储附近商户，并使用 Geo Search 命令实现高性能商户查询及按距离排序。 使用 Redis ZSet 数据结构存储用户点赞信息，保证用户只能点赞一次，并基于 ZSet 记录点赞的时间。 使用 Redis Set 数据结构实现用户关注、共同关注功能（交集），实测相对于 DB 查询性能提升 xx%，并使用 Redis AOF + 业务层日志防止关注数据丢失。 使用 Redis BitMap 实现用户连续签到统计功能，相对于传统关系库存储，节约 xx% 的内存并提升 xx% 的查询性能。（需要自己实际测试对比数据） 基于推模式实现关注 Feed 流，保证了新点评消息的及时可达，并减少用户访问的等待时间。 个性化饰品抢购：使用 Redis + Lua 脚本实现库存预检，并通过 RabbitMQ 实现订单的异步创建，解决了超卖问题、实现一人一单。实现相比传统数据库，秒杀性能提高了 xx%。 对于项目中的 JSON 格式化处理对象，采用 双检锁单例模式 进行管理，从而复用对象，避免了重复创建对象的开销，便于集中维护管理。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-03-29T11:46:59.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-03-29T11:46:59.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/se/tools/resume/%E7%AE%80%E5%8E%86.html"}]]},"headers":[{"level":2,"title":"Trace Note","slug":"trace-note","link":"#trace-note","children":[]},{"level":2,"title":"掘金","slug":"掘金","link":"#掘金","children":[]}],"git":{"createdTime":1679578424000,"updatedTime":1680090419000,"contributors":[{"name":"davidliuk","email":"l729641074@163.com","commits":2}]},"readingTime":{"minutes":3.75,"words":1125},"localizedDate":"March 23, 2023","filePathRelative":"se/tools/resume/简历.md","excerpt":"<h2> Trace Note</h2>\\n<p>主要工作：</p>\\n<ol>\\n<li>登录模块：利用AOP实现注解校验用户登陆状态及用户权限。使用 Redis 实现分布式 Session，解决集群间登录态同步问题；</li>\\n<li>Trace查询：使用 Redis 对高频访问店铺进行缓存，降低 DB 压力同时提升 90% 的数据查询性能。</li>\\n<li>使用模版模式实现了通用缓存访问静态方法，并解决了缓存雪崩、缓存穿透和缓存击穿的问题。</li>\\n<li>使用 Redis 的 Geo + Hash 数据结构分类存储附近商户，并使用 Geo Search 命令实现高性能商户查询及按距离排序。</li>\\n<li>使用 Redis ZSet 数据结构存储用户点赞信息，保证用户只能点赞一次，并基于 ZSet 记录点赞的时间。</li>\\n<li>使用 Redis Set 数据结构实现用户关注、共同关注功能（交集），实测相对于 DB 查询性能提升 xx%，并使用 Redis AOF + 业务层日志防止关注数据丢失。</li>\\n<li>使用 Redis BitMap 实现用户连续签到统计功能，相对于传统关系库存储，节约 xx% 的内存并提升 xx% 的查询性能。（需要自己实际测试对比数据）</li>\\n<li>基于推模式实现关注 Feed 流，保证了新点评消息的及时可达，并减少用户访问的等待时间。</li>\\n<li>个性化饰品抢购：使用 Redis + Lua 脚本实现库存预检，并通过 RabbitMQ 实现订单的异步创建，解决了超卖问题、实现一人一单。实现相比传统数据库，秒杀性能提高了 xx%。</li>\\n<li>对于项目中的 JSON 格式化处理对象，采用 双检锁单例模式 进行管理，从而复用对象，避免了重复创建对象的开销，便于集中维护管理。</li>\\n</ol>","autoDesc":true}`);export{e as data};
