const e=JSON.parse(`{"key":"v-52eb1abc","path":"/se/lang/java/jvm/%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B.html","title":"引用类型","lang":"en-US","frontmatter":{"description":"引用类型 强引用 普通变量赋值即为强引用，如 A a = new A(); 回收特点 当内存空间不足，Java 虚拟机宁愿抛出 OutOfMemoryError 错误，使程序异常终止，也不会靠回收具有强引用的对象，来解决内存不足的问题。通过 GC Root 的引用链，如果强引用不到该对象，该对象才能被回收。 如果想中断或者回收强引用对象可以显式地将引用赋值为 null(a=null)，这样的话 JVM 就会在合适的时间，进行垃圾回收。 软引用","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/java/jvm/%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"引用类型"}],["meta",{"property":"og:description","content":"引用类型 强引用 普通变量赋值即为强引用，如 A a = new A(); 回收特点 当内存空间不足，Java 虚拟机宁愿抛出 OutOfMemoryError 错误，使程序异常终止，也不会靠回收具有强引用的对象，来解决内存不足的问题。通过 GC Root 的引用链，如果强引用不到该对象，该对象才能被回收。 如果想中断或者回收强引用对象可以显式地将引用赋值为 null(a=null)，这样的话 JVM 就会在合适的时间，进行垃圾回收。 软引用"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-04-11T10:23:43.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-04-11T10:23:43.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/se/lang/java/jvm/%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B.html"}]]},"headers":[{"level":2,"title":"强引用","slug":"强引用","link":"#强引用","children":[{"level":3,"title":"回收特点","slug":"回收特点","link":"#回收特点","children":[]}]},{"level":2,"title":"软引用","slug":"软引用","link":"#软引用","children":[{"level":3,"title":"回收特点","slug":"回收特点-1","link":"#回收特点-1","children":[]},{"level":3,"title":"应用案例","slug":"应用案例","link":"#应用案例","children":[]}]},{"level":2,"title":"弱引用","slug":"弱引用","link":"#弱引用","children":[{"level":3,"title":"回收特点","slug":"回收特点-2","link":"#回收特点-2","children":[]},{"level":3,"title":"应用案例","slug":"应用案例-1","link":"#应用案例-1","children":[]}]},{"level":2,"title":"虚引用","slug":"虚引用","link":"#虚引用","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1681208623000,"updatedTime":1681208623000,"contributors":[{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":2.83,"words":848},"localizedDate":"April 11, 2023","filePathRelative":"se/lang/java/jvm/自动内存管理/引用类型.md","excerpt":"<h1> 引用类型</h1>\\n<h2> 强引用</h2>\\n<p>普通变量赋值即为强引用，如</p>\\n<p><code>A a = new A();</code></p>\\n<h3> 回收特点</h3>\\n<p>当内存空间不足，Java 虚拟机宁愿抛出 OutOfMemoryError 错误，使程序异常终止，也不会靠回收具有强引用的对象，来解决内存不足的问题。通过 GC Root 的引用链，如果强引用不到该对象，该对象才能被回收。</p>\\n<p>如果想中断或者回收强引用对象可以显式地将引用赋值为 null(a=null)，这样的话 JVM 就会在合适的时间，进行垃圾回收。</p>\\n<h2> 软引用</h2>","autoDesc":true}`);export{e as data};
