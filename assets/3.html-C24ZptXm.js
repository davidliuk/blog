import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as i,o as r}from"./app-Cv-jMnVl.js";const n={};function o(s,e){return r(),a("div",null,e[0]||(e[0]=[i('<h3 id="q1" tabindex="-1"><a class="header-anchor" href="#q1"><span>Q1</span></a></h3><p>3</p><p>An out variable from vertex shader outputs data is interpolated across the primitives and then provided as input to the in variable in the fragment shader for each pixel.</p><h3 id="q2" tabindex="-1"><a class="header-anchor" href="#q2"><span>Q2</span></a></h3><p>3</p><p>position arrays contains 18 elements;<br> normal arrays contains 18 elements;<br> Index array arrays contains 24 elements</p><h3 id="q3" tabindex="-1"><a class="header-anchor" href="#q3"><span>Q3</span></a></h3><p>2</p><p>CPU-side code indicates to the GPU which GPU-side objects to use by binding them with functions like glBindBuffer, glBindTexture, or glUseProgram, effectively telling the GPU which objects to operate on next. The CPU cannot directly access GPU-side objects because they reside in separate memory spaces; direct access would be inefficient and is abstracted away by the graphics API to manage communication over the bus efficiently.</p><h3 id="q4" tabindex="-1"><a class="header-anchor" href="#q4"><span>Q4</span></a></h3><p>4</p><p>The first line binds the buffer object <code>bufPos</code> as the current vertex buffer, making it the source of vertex data for subsequent operations.<br> The second line specifies that shader attribute <code>attPos</code> should read its data from the bound buffer, interpreting each vertex attributes as a four-component floating-point vector.<br> This tells the GPU how to fetch and interpret vertex data from the buffer during rendering.</p>',12)]))}const p=t(n,[["render",o],["__file","3.html.vue"]]),l=JSON.parse(`{"path":"/education/ms/5600/quiz/3.html","title":"","lang":"en-US","frontmatter":{"description":"Q1 3 An out variable from vertex shader outputs data is interpolated across the primitives and then provided as input to the in variable in the fragment shader for each pixel. Q...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/education/ms/5600/quiz/3.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:description","content":"Q1 3 An out variable from vertex shader outputs data is interpolated across the primitives and then provided as input to the in variable in the fragment shader for each pixel. Q..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-09T03:55:12.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-09T03:55:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-09T03:55:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":3,"title":"Q1","slug":"q1","link":"#q1","children":[]},{"level":3,"title":"Q2","slug":"q2","link":"#q2","children":[]},{"level":3,"title":"Q3","slug":"q3","link":"#q3","children":[]},{"level":3,"title":"Q4","slug":"q4","link":"#q4","children":[]}],"git":{"createdTime":1728657843000,"updatedTime":1731124512000,"contributors":[{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro-3.local","commits":1}]},"readingTime":{"minutes":0.62,"words":187},"filePathRelative":"education/ms/5600/quiz/3.md","localizedDate":"October 11, 2024","excerpt":"<h3>Q1</h3>\\n<p>3</p>\\n<p>An out variable from vertex shader outputs data is interpolated across the primitives and then provided as input to the in variable in the fragment shader for each pixel.</p>\\n<h3>Q2</h3>\\n<p>3</p>\\n<p>position arrays contains 18 elements;<br>\\nnormal arrays contains 18 elements;<br>\\nIndex array arrays contains  24 elements</p>","autoDesc":true}`);export{p as comp,l as data};
