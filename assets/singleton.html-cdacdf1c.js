const e=JSON.parse('{"key":"v-19e39c72","path":"/se/design/pattern/creational/singleton.html","title":"singleton","lang":"en-US","frontmatter":{"description":"singleton 原理 是一种创建型模式，一个类只允许创建一个实例对象，那这个类就是个单例类。 要点 构造函数私有化，避免外部通过 new 创建实例； 考虑对象创建时的线程安全问题； 考虑是否支持延迟加载； 考虑 getInstance()性能是否高（是否加锁） 考虑序列化和反序列化是否会破坏单例 考虑反射攻击单例 实现 饿汉式 线程安全, ``","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/design/pattern/creational/singleton.html"}],["meta",{"property":"og:site_name","content":"David\'s Blog"}],["meta",{"property":"og:title","content":"singleton"}],["meta",{"property":"og:description","content":"singleton 原理 是一种创建型模式，一个类只允许创建一个实例对象，那这个类就是个单例类。 要点 构造函数私有化，避免外部通过 new 创建实例； 考虑对象创建时的线程安全问题； 考虑是否支持延迟加载； 考虑 getInstance()性能是否高（是否加锁） 考虑序列化和反序列化是否会破坏单例 考虑反射攻击单例 实现 饿汉式 线程安全, ``"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-08-24T10:49:05.000Z"}],["meta",{"property":"article:author","content":"David Liu"}],["meta",{"property":"article:modified_time","content":"2023-08-24T10:49:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"singleton\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-24T10:49:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":2,"title":"要点","slug":"要点","link":"#要点","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[{"level":3,"title":"饿汉式","slug":"饿汉式","link":"#饿汉式","children":[]},{"level":3,"title":"懒汉式","slug":"懒汉式","link":"#懒汉式","children":[]},{"level":3,"title":"DCL","slug":"dcl","link":"#dcl","children":[]},{"level":3,"title":"静态内部类","slug":"静态内部类","link":"#静态内部类","children":[]},{"level":3,"title":"枚举","slug":"枚举","link":"#枚举","children":[]}]}],"git":{"createdTime":1692874145000,"updatedTime":1692874145000,"contributors":[{"name":"liudawei47","email":"liudawei47@jd.com","commits":1}]},"readingTime":{"minutes":2.76,"words":829},"filePathRelative":"se/design/pattern/creational/singleton.md","localizedDate":"August 24, 2023","excerpt":"<h1> singleton</h1>\\n\\n<p>原理<br>\\n是一种创建型模式，一个类只允许创建一个实例对象，那这个类就是个单例类。</p>\\n<h2> 要点</h2>\\n<ol>\\n<li>构造函数私有化，避免外部通过 new 创建实例；</li>\\n<li>考虑对象创建时的线程安全问题；</li>\\n<li>考虑是否支持延迟加载；</li>\\n<li>考虑 getInstance()性能是否高（是否加锁）</li>\\n<li>考虑序列化和反序列化是否会破坏单例</li>\\n<li>考虑反射攻击单例</li>\\n</ol>\\n<h2> 实现</h2>\\n<h3> 饿汉式</h3>\\n<p><code>线程安全</code>, ``</p>","autoDesc":true}');export{e as data};
