const a=JSON.parse(`{"key":"v-e090e414","path":"/se/lang/java/basic/class/%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB.html","title":"匿名内部类","lang":"en-US","frontmatter":{"description":"匿名内部类 无自己的构造方法，但是可以有初始化块 常用于： 一个final的HashMap初始化，可以直接一条语句写完很方便。 Map&lt;State, State[]&gt; table = new HashMap&lt;State, State[]&gt;() {{ put(State.START, new State[]{State.START, State.SIGNED, State.IN_NUMBER, State.END}); put(State.SIGNED, new State[]{State.END, State.END, State.IN_NUMBER, State.END}); put(State.IN_NUMBER, new State[]{State.END, State.END, State.IN_NUMBER, State.END}); put(State.END, new State[]{State.END, State.END, State.END, State.END}); }}; 拓展PriorityQueue功能，让他可以直接引用别人的数组且有自己的比较器，来不占用别人的空间，实现原地堆排序（Onlogn, O1），普通的int[]还是直接Arrays.sort即可，这个没法实现，哎，因为是private 常用于一个二维int按某一位比较，如：xx，实现不了，看来堆排序只能手撕了，不需要堆排的时候老老实实Arrays.sort吧 int[][] values; // values = xxx; PriorityQueue&lt;int[][]&gt; pq = new PriorityQueue&lt;int[][]&gt;((a, b) -&gt; a[1] - b[1]) {{ queue = values; size = values.size; heapify(); }};","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/java/basic/class/%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"匿名内部类"}],["meta",{"property":"og:description","content":"匿名内部类 无自己的构造方法，但是可以有初始化块 常用于： 一个final的HashMap初始化，可以直接一条语句写完很方便。 Map&lt;State, State[]&gt; table = new HashMap&lt;State, State[]&gt;() {{ put(State.START, new State[]{State.START, State.SIGNED, State.IN_NUMBER, State.END}); put(State.SIGNED, new State[]{State.END, State.END, State.IN_NUMBER, State.END}); put(State.IN_NUMBER, new State[]{State.END, State.END, State.IN_NUMBER, State.END}); put(State.END, new State[]{State.END, State.END, State.END, State.END}); }}; 拓展PriorityQueue功能，让他可以直接引用别人的数组且有自己的比较器，来不占用别人的空间，实现原地堆排序（Onlogn, O1），普通的int[]还是直接Arrays.sort即可，这个没法实现，哎，因为是private 常用于一个二维int按某一位比较，如：xx，实现不了，看来堆排序只能手撕了，不需要堆排的时候老老实实Arrays.sort吧 int[][] values; // values = xxx; PriorityQueue&lt;int[][]&gt; pq = new PriorityQueue&lt;int[][]&gt;((a, b) -&gt; a[1] - b[1]) {{ queue = values; size = values.size; heapify(); }};"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-01-12T03:47:01.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-01-12T03:47:01.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/se/lang/java/basic/class/%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB.html"}]]},"headers":[],"git":{"createdTime":1673495221000,"updatedTime":1673495221000,"contributors":[{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":0.79,"words":236},"localizedDate":"January 12, 2023","filePathRelative":"se/lang/java/basic/class/匿名内部类.md","excerpt":"<h1> 匿名内部类</h1>\\n<p>无自己的构造方法，但是可以有初始化块</p>\\n<p>常用于：</p>\\n<ol>\\n<li>\\n<p>一个final的HashMap初始化，可以直接一条语句写完很方便。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">Map</span><span class=\\"token operator\\">&lt;</span><span class=\\"token class-name\\">State</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">State</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">&gt;</span> table <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">HashMap</span><span class=\\"token operator\\">&lt;</span><span class=\\"token class-name\\">State</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">State</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">State</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">START</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">State</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">{</span><span class=\\"token class-name\\">State</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">START</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">State</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">SIGNED</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">State</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">IN_NUMBER</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">State</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">END</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">State</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">SIGNED</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">State</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">{</span><span class=\\"token class-name\\">State</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">END</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">State</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">END</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">State</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">IN_NUMBER</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">State</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">END</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">State</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">IN_NUMBER</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">State</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">{</span><span class=\\"token class-name\\">State</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">END</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">State</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">END</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">State</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">IN_NUMBER</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">State</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">END</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">State</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">END</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">State</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">{</span><span class=\\"token class-name\\">State</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">END</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">State</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">END</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">State</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">END</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">State</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">END</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>拓展PriorityQueue功能，让他可以直接引用别人的数组且有自己的比较器，来不占用别人的空间，实现原地堆排序（Onlogn, O1），普通的int[]还是直接Arrays.sort即可，这个没法实现，哎，因为是private</p>\\n<p>常用于一个二维int按某一位比较，如：xx，实现不了，看来堆排序只能手撕了，不需要堆排的时候老老实实Arrays.sort吧</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> values<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// values = xxx;</span>\\n<span class=\\"token class-name\\">PriorityQueue</span><span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">&gt;</span> pq <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">PriorityQueue</span><span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">,</span> b<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-&gt;</span> a<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">-</span> b<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">{</span>\\n    queue <span class=\\"token operator\\">=</span> values<span class=\\"token punctuation\\">;</span>\\n    size <span class=\\"token operator\\">=</span> values<span class=\\"token punctuation\\">.</span>size<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">heapify</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li></li>\\n</ol>","autoDesc":true}`);export{a as data};
