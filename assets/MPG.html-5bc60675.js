const e=JSON.parse(`{"key":"v-3ee5a1d1","path":"/se/lang/golang/MPG.html","title":"MPG","lang":"en-US","frontmatter":{"description":"MPG 在操作系统提供的内核线程之上，Go 搭建了一个特有的用户级线程模型。传统的函数调用是将函数指针存储在内存的栈空间上，但是栈空间只允许操作系统进行操作，我们能拿到的只限于堆内存，所以 Go 开发者在堆上申请一块内存，将寄存器 %rsp 以及寄存器 %rbp 指过去，从而将这块内存伪装成用户栈，从而巧妙地实现了并行运行用户级线程 goroutine。要聊 Go 的线程实现模型，必须要知道以下3个核心元素： M：machine 缩写，一个 M 代表一个内核线程。 P：processer 缩写，一个 P 代表执行一个 Go 代码片段所需的必要资源。 G：goroutine 缩写，一个 G 代表一个 Go 代码片段。","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/golang/MPG.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"MPG"}],["meta",{"property":"og:description","content":"MPG 在操作系统提供的内核线程之上，Go 搭建了一个特有的用户级线程模型。传统的函数调用是将函数指针存储在内存的栈空间上，但是栈空间只允许操作系统进行操作，我们能拿到的只限于堆内存，所以 Go 开发者在堆上申请一块内存，将寄存器 %rsp 以及寄存器 %rbp 指过去，从而将这块内存伪装成用户栈，从而巧妙地实现了并行运行用户级线程 goroutine。要聊 Go 的线程实现模型，必须要知道以下3个核心元素： M：machine 缩写，一个 M 代表一个内核线程。 P：processer 缩写，一个 P 代表执行一个 Go 代码片段所需的必要资源。 G：goroutine 缩写，一个 G 代表一个 Go 代码片段。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-08-17T03:33:13.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-08-17T03:33:13.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/se/lang/golang/MPG.html"}]]},"headers":[],"git":{"createdTime":1684318252000,"updatedTime":1692243193000,"contributors":[{"name":"liudawei47","email":"liudawei47@jd.com","commits":1},{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":0.74,"words":221},"localizedDate":"May 17, 2023","filePathRelative":"se/lang/golang/MPG.md","excerpt":"<h1> MPG</h1>\\n<p>在操作系统提供的内核线程之上，Go 搭建了一个特有的用户级线程模型。传统的函数调用是将函数指针存储在内存的栈空间上，但是栈空间只允许操作系统进行操作，我们能拿到的只限于堆内存，所以 Go 开发者在堆上申请一块内存，将寄存器 %rsp 以及寄存器 %rbp 指过去，从而将这块内存伪装成用户栈，从而巧妙地实现了并行运行用户级线程 goroutine。要聊 Go 的线程实现模型，必须要知道以下3个核心元素：</p>\\n<ul>\\n<li>M：machine 缩写，一个 M 代表一个内核线程。</li>\\n<li>P：processer 缩写，一个 P 代表执行一个 Go 代码片段所需的必要资源。</li>\\n<li>G：goroutine 缩写，一个 G 代表一个 Go 代码片段。</li>\\n</ul>","autoDesc":true}`);export{e as data};
