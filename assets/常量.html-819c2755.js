const t=JSON.parse(`{"key":"v-3a5d547e","path":"/se/lang/java/basic/class/%E5%B8%B8%E9%87%8F.html","title":"类定义和接口定义常量对比","lang":"en-US","frontmatter":{"description":"类定义和接口定义常量对比 类定义常量和接口定义常量: 类定义常量, 需要定义成final且定义一个private的构造方法, 这样做是为了不让其他类继承, 禁止实例化此类, 调用时直接以\\"类.常量\\"的方式调用. 接口中定义的\\"变量\\", 其实就是常量, 接口中的\\"变量\\"默认都是 \\"public static final\\"类型, 即为常量, 因此接口可以省略\\"public static final\\"而直接写成 \\"type variable\\".","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/java/basic/class/%E5%B8%B8%E9%87%8F.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"类定义和接口定义常量对比"}],["meta",{"property":"og:description","content":"类定义和接口定义常量对比 类定义常量和接口定义常量: 类定义常量, 需要定义成final且定义一个private的构造方法, 这样做是为了不让其他类继承, 禁止实例化此类, 调用时直接以\\"类.常量\\"的方式调用. 接口中定义的\\"变量\\", 其实就是常量, 接口中的\\"变量\\"默认都是 \\"public static final\\"类型, 即为常量, 因此接口可以省略\\"public static final\\"而直接写成 \\"type variable\\"."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-03-20T14:10:49.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-03-20T14:10:49.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/se/lang/java/basic/class/%E5%B8%B8%E9%87%8F.html"}]]},"headers":[],"git":{"createdTime":1678024743000,"updatedTime":1679321449000,"contributors":[{"name":"davidliuk","email":"l729641074@163.com","commits":2}]},"readingTime":{"minutes":1.39,"words":416},"localizedDate":"March 5, 2023","filePathRelative":"se/lang/java/basic/class/常量.md","excerpt":"<h1> 类定义和接口定义常量对比</h1>\\n<p>类定义常量和接口定义常量:</p>\\n<ol>\\n<li>类定义常量, 需要定义成final且定义一个private的构造方法, 这样做是为了不让其他类继承, 禁止实例化此类,</li>\\n</ol>\\n<p>调用时直接以\\"类.常量\\"的方式调用.</p>\\n<ol start=\\"2\\">\\n<li>接口中定义的\\"变量\\", 其实就是常量, 接口中的\\"变量\\"默认都是 \\"public static final\\"类型, 即为常量,</li>\\n</ol>\\n<p>因此接口可以省略\\"public static final\\"而直接写成 \\"type variable\\".</p>","autoDesc":true}`);export{t as data};
