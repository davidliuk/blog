import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as l,c as e,f as i}from"./app.a4707586.js";const o={},s=i('<h1 id="_6-进程控制" tabindex="-1"><a class="header-anchor" href="#_6-进程控制" aria-hidden="true">#</a> 6. 进程控制</h1><p>fork复制当前进程，状态和pc也完全一样，执行fork后面部分的程序</p><p>换代码、execute操作</p><p>Linux里面子进程的创建，不会创建</p><p>cow写时复制</p><p>redis持久化：fork下来然后修改，写时复制</p><p>进程死亡的方法：</p><ul><li><p>自行死亡</p><p>执行完毕，如，c的main函数，返回值是进程返回值，返回给父进程看</p></li><li><p>被杀死</p><p>kill，软中断</p><p>kill -l 可以看到所有的信号，谁杀的、怎么死的</p><p>kill -9 xxx</p></li><li><p>出错没了，call down</p></li></ul><p>多进程编程</p><p>fork的返回值是子进程的pid，-1说明创建失败</p><p>wait()可以等待子进程回来，也可以看看子进程怎么没的，而且还可以给子进程收尸</p><p>wait低7位是signumber，高8位是</p><p>父进程不看子进程的return value （wait）的返回，</p><p>内存泄漏，不可避免，</p><p>中断处理函数</p><p>sigkill和sig</p><p>信号</p><p>Ctrl c 2号</p><p>Ctrl z 挂起进程，然后再杀死</p><p>ps：process status</p><blockquote><p>-l long</p><p>UID，哪个用户运行的</p><p>PID，进程号</p><p>PPID，父进程号</p><p>S，进程状态</p><ul><li>S：sleep，进程挂起</li><li>R：running，正在运行</li><li>Z：zombie。子进程死了，父进程不看，就会变成僵尸，只保留一个死的状态；有多种解决方案</li></ul><p>PRI：优先级，小的优先级高，不能直接修改</p><p>NI：nice number，只能变大不能变小（只有root可以用），[-20, 19]，会加到原来的PRI上</p></blockquote><p>&amp;符号可以让进程在后台运行</p><p>killall 可以根据命令名去杀所有的这个命令带出来的进程</p><p>ps -el传统UNIX风格，可以看到所有的前台后台的进程</p><p>ps -l，可以看到当前shell下面的进程</p><p>top</p><p>swap 磁盘空间，内存管理里面的会提</p><p>uptime，可以嵌入到脚本里面</p><p>strace，观察一个进程进行的所有的系统调用，来看他在做什么，需要了解各种system call</p><p>lsof，list open file</p><blockquote><p>Lsof -u uid 看用户打开的文件</p><p>Lsof -p pid 看进程打开的文件</p></blockquote><p>指令</p><ul><li><p><code>ps -el，</code></p></li><li><p><code>strace</code>，看一个进程的所有的系统调用、对信号非常清楚</p><p>如果对系统调用不熟悉，可以用man 2 看系统调用</p></li><li><p><code>lsof</code></p></li></ul><p>如果父进程被杀死了，他的子进程会变成孤儿进程，PID变成1（init 1或者systemd）</p><p>动态链接库</p><p>.so的东西都是动态联机库（Windows下又dll）</p><p>动态链接：库不要放在程序里面，防止程序太大</p><p>如果别人load过了，就在内存里面直接使用（叫做动态链接）</p><p>生僻库编译的时候建议用静态链接，</p><p>根目录下别碰，usr下随便弄，安装也安装在usr下最好</p><p>现在新的红帽下，根目录下的文件都是符号链接到usr下的了</p><p>动态链接放到usr/bin里面就可以了</p><p>redis epoll，fork持久化</p><p>redis in action（redis实战）</p><p>CPU饱和（burst）没事，性能线性下降，就是排队时间增长就可以了</p><p>内存饱和很可怕，内存满了就要页置换，大家都在调页，CPU利用率断崖式下跌</p><p>copy on write</p><p>如何解决内存泄漏问题</p><p>ps top</p><p>前台：占用终端了</p><p>后台：运行的时候+&amp;符，这样就在后台不占用终端了、</p><p>Ctrl + z：让进程到后台，并且发出sigstop，让进程挂起</p><p>fg: foreground，把后台进程放到前台执行</p><p>bg: 把一个挂起的程序放到后台执行</p><p>jobs，可以看到后台运行了哪些</p>',55),t=[s];function r(c,a){return l(),e("div",null,t)}const d=p(o,[["render",r],["__file","6. process-ctrl.html.vue"]]);export{d as default};
