import{_ as i,V as a,W as e,Z as l}from"./framework-e5d7a6b2.js";const d={},r=l('<h1 id="全局-id-生成器" tabindex="-1"><a class="header-anchor" href="#全局-id-生成器" aria-hidden="true">#</a> 全局 ID 生成器</h1><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><h3 id="数据库自增主键的问题" tabindex="-1"><a class="header-anchor" href="#数据库自增主键的问题" aria-hidden="true">#</a> 数据库自增主键的问题</h3><ul><li>会泄露一些信息，如每天有多少单</li><li>可能会分库分表（分布式存储），如果是数据库的自增主键，那就无法保证 iid 的唯一性了</li></ul><h3 id="全局-id-生成器的特性" tabindex="-1"><a class="header-anchor" href="#全局-id-生成器的特性" aria-hidden="true">#</a> 全局 ID 生成器的特性</h3><p>分布式系统下用来生成全局唯一的 ID 的工具，要满足如下特性：</p><ul><li>唯一性</li><li>高可用：什么时候要 id 都能给</li><li>高性能</li><li>递增性：同时还可以有一个统计的效果</li><li>安全性：为增加安全性，我们加入一些其他信息防止被猜出来</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/截屏2023-02-07 09.48.57.png" alt="截屏2023-02-07 09.48.57"></p><h3 id="全局唯一-id-生存策略" tabindex="-1"><a class="header-anchor" href="#全局唯一-id-生存策略" aria-hidden="true">#</a> 全局唯一 ID 生存策略</h3><ul><li><p>UUID</p><ul><li><p>16 进制，字符串结构</p></li><li><p>缺点：没有自增性质</p></li></ul></li><li><p>Redis 自增</p><p>构造：时间戳+自增 id</p><p>每天一个 key，方便统计订单量，且防止整数溢出</p></li><li><p>snowflake 算法</p><p>与我们 Redis 的实现方案思路类似，但是 id 自增是机器内部的 id 的自增，需要维护机器内部的 id，分布式系统下比较麻烦，一般还是采用 redis 的方案</p><p>不依赖于 redis，单体的性能会更好</p><p>对于时钟依赖比较高，如果时间不准确会出现问题</p></li><li><p>数据库自增，单独一张表，专门负责做自增，分库分表的地方都从他这里取 id</p><p>原理上和 redis 自增一样，只是性能更差，一般不采用这个，如果使用的话，一般是批量获取 id，然后放入内存缓存起来，来提高性能</p></li></ul>',10),h=[r];function p(s,t){return a(),e("div",null,h)}const c=i(d,[["render",p],["__file","global-id.html.vue"]]);export{c as default};
