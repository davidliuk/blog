import{_ as d,V as c,W as p,X as e,Y as l,$ as a,Z as i,E as t}from"./framework-e5d7a6b2.js";const n={},r=i('<h1 id="_1-unix-常用指令" tabindex="-1"><a class="header-anchor" href="#_1-unix-常用指令" aria-hidden="true">#</a> 1. UNIX 常用指令</h1><h2 id="命令格式" tabindex="-1"><a class="header-anchor" href="#命令格式" aria-hidden="true">#</a> 命令格式</h2><p>三部分：</p><ul><li><p>cmd</p></li><li><p>option(s)</p><p>分类：</p><ul><li>-：简写</li><li>--：全称，增加可读性（脚本里面一般用全写）</li></ul><p>常见：</p><ul><li>-a: 全部的</li><li>-l: 长的、全部信息</li><li>-R: 递归的（删除文件夹等用）</li><li>-v: verbose 显示冗余信息，（普通的时候会省略一些东西），这个可以显示全</li></ul></li><li><p>args</p><p>参数可以有多个</p></li></ul><p>概念一致性：每处功能的</p><p>Linux是一种开源的操作系统，常用命令如下：</p><ol><li><code>ls</code>：列出当前目录下的文件和文件夹。</li><li><code>cd</code>：切换当前目录。</li><li><code>mkdir</code>：创建一个新的目录。</li><li><code>rm</code>：删除文件或目录。</li><li><code>cp</code>：复制文件或目录。</li><li><code>mv</code>：移动文件或目录。</li><li><code>cat</code>：查看文件内容。</li><li><code>grep</code>：在文件中查找指定的字符串。</li><li><code>chmod</code>：修改文件或目录的权限。</li><li><code>sudo</code>：以超级用户身份执行命令。</li></ol><p>Linux的运行原理是基于内核的，内核是操作系统的核心部分，它负责管理计算机的硬件资源和提供基本的服务。Linux内核是一个模块化的系统，可以根据需要加载不同的模块来提供不同的功能。Linux还有一个重要的特点是它是一个多用户系统，多个用户可以同时使用同一台计算机，每个用户都有自己的账户和权限。</p><p><code>top</code>命令是一个常用的Linux系统监控工具，可以实时显示系统的运行状态，包括CPU、内存、进程等信息。以下是一些常用的<code>top</code>命令选项：</p><ul><li><code>-d {{秒数}}</code>：指定刷新时间间隔，默认是3秒。</li><li><code>-u {{用户名}}</code>：只显示指定用户的进程。</li><li><code>-p {{进程ID}}</code>：只显示指定进程的信息。</li><li><code>M</code>：按内存使用量排序。</li><li><code>P</code>：按CPU使用量排序。</li><li><code>q</code>：退出<code>top</code>命令。</li></ul><p><code>top</code>命令的输出结果包括以下信息：</p><ul><li><code>top</code>：当前时间和系统运行时间。</li><li><code>Tasks</code>：进程总数、运行中的进程数、睡眠中的进程数等信息。</li><li><code>CPU</code>：CPU使用率、用户态CPU使用率、系统态CPU使用率等信息。</li><li><code>Mem</code>：内存使用情况，包括总内存、已用内存、空闲内存等信息。</li><li><code>Swap</code>：交换空间使用情况，包括总交换空间、已用交换空间、空闲交换空间等信息。</li><li><code>PID</code>：进程ID。</li><li><code>USER</code>：进程所属用户。</li><li><code>%CPU</code>：进程占用CPU的百分比。</li><li><code>%MEM</code>：进程占用内存的百分比。</li><li><code>TIME+</code>：进程运行时间。</li><li><code>COMMAND</code>：进程命令行。</li></ul><h2 id="指令分类" tabindex="-1"><a class="header-anchor" href="#指令分类" aria-hidden="true">#</a> 指令分类</h2><p>输入的时候，按tab键可以自动补齐</p><p>可以写脚本里，只写一次就方便了，全自动</p><p>man：教程文档</p><blockquote><p>Manual 可以找到所有的东西，包括全部的参考文档和C的函数文档 Unix 的原生的</p><p>Info ：GNU</p><p>see also 比较重要</p><p>eg. man epoll, man 7 ip</p><p>man -k</p><p>第一个可省略参数：手册第几章如3是C语言变成手册，一共8章</p><ol><li>cmd命令</li><li>系统调用，Linux原理，操作系统的接口，系统级编程时用，对外提供的接口</li><li>库函数（C语言的）</li><li>驱动设备</li><li>标准系统文件格式</li><li>游戏、没用</li><li>教材文件文档，如man 7 ip</li><li>如：man 8 mandb</li></ol></blockquote><h3 id="用户相关" tabindex="-1"><a class="header-anchor" href="#用户相关" aria-hidden="true">#</a> 用户相关</h3><p>whoami</p><p>su 切换用户</p><blockquote><p>switch user</p></blockquote><p>logout</p><blockquote><p>退出服务器</p></blockquote><h3 id="目录操作" tabindex="-1"><a class="header-anchor" href="#目录操作" aria-hidden="true">#</a> 目录操作</h3><p>mkdir 新增目录</p><blockquote><p>Make dir</p></blockquote><p>rm 删除</p><blockquote><p>-rf</p></blockquote><p>pwd 当前目录</p><blockquote><p>print working dir，</p></blockquote><p>ls 查看目录下文件</p><blockquote><p>list</p></blockquote><p>cd 切换目录</p><blockquote><p>Change dir</p></blockquote><h3 id="文件操作" tabindex="-1"><a class="header-anchor" href="#文件操作" aria-hidden="true">#</a> 文件操作</h3><h4 id="查找文件" tabindex="-1"><a class="header-anchor" href="#查找文件" aria-hidden="true">#</a> 查找文件</h4><p>find</p><h4 id="查看文件" tabindex="-1"><a class="header-anchor" href="#查看文件" aria-hidden="true">#</a> 查看文件</h4><p>cat</p>',39),s=e("p",null,"拼接，但是可以用来看内容",-1),h={href:"https://blog.csdn.net/qq_46416934/article/details/126747074",target:"_blank",rel:"noopener noreferrer"},u=i(`<p>head</p><p>tail</p><p>more</p><blockquote><p>看很多的文本，回车往下一行、空格向下一屏</p></blockquote><p>less</p><blockquote><p>j和k，看上和看下、空格向下一屏，按q出去</p><p>Unix服务器（生产环境）一般没有less</p></blockquote><h4 id="增" tabindex="-1"><a class="header-anchor" href="#增" aria-hidden="true">#</a> 增</h4><p>cp</p><blockquote><p>copy，复制一个文件</p><p>.和..分别是当前目录和上级目录</p><p>加-R 可以复制目录（recursal）</p></blockquote><h4 id="改" tabindex="-1"><a class="header-anchor" href="#改" aria-hidden="true">#</a> 改</h4><p>touch</p><blockquote></blockquote><p>mv</p><blockquote><p>重命名，后面一个跟新名称</p><p>移动目录，路径+/</p></blockquote><h3 id="文本操作" tabindex="-1"><a class="header-anchor" href="#文本操作" aria-hidden="true">#</a> 文本操作</h3><h4 id="查" tabindex="-1"><a class="header-anchor" href="#查" aria-hidden="true">#</a> 查</h4><p>grep</p><blockquote><p>检索命令，还支持正则表达式, <code>grep -r &lt;pattern&gt; /path/to</code></p></blockquote><h4 id="改-1" tabindex="-1"><a class="header-anchor" href="#改-1" aria-hidden="true">#</a> 改</h4><p>sed</p><blockquote><p>替换</p><p>sed &#39;s/stringa1/stringa2/g&#39; example.txt 将example.txt文件中的 &quot;string1&quot; 替换成 &quot;string2&quot;</p></blockquote><p><code>cut</code> 命令是一个用于裁剪文本的命令行工具。 <code>-d</code> 选项指定分隔符为 <code>:</code>， <code>-f1</code> 选项指定只显示每行的第一个字段</p><h4 id="统计" tabindex="-1"><a class="header-anchor" href="#统计" aria-hidden="true">#</a> 统计</h4><p>wc -l统计行数</p><p>Eg. <code>grep -r &quot;mysqli&quot; /path/to/src/ | cut -d: -f1 | wc -l</code></p><h3 id="进程相关" tabindex="-1"><a class="header-anchor" href="#进程相关" aria-hidden="true">#</a> 进程相关</h3><p>fork 创建子进程</p><p>top 进程资源占用情况</p><p>ps命令，用于将某个时间点的进程运行情况选取下来并输出，process之意</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-A ：所有的进程均显示出来
-a ：不与terminal有关的所有进程
-u ：有效用户的相关进程
-x ：一般与a参数一起使用，可列出较完整的信息
-l ：较长，较详细地将PID的信息列出

ps aux # 查看系统所有的进程数据
ps ax # 查看不与terminal有关的所有进程
ps -lA # 查看系统所有的进程数据
ps axjf # 查看连同一部分进程树状态
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>kill命令,用于向某个工作（%jobnumber）或者是某个PID（数字）传送一个信号，它通常与ps和jobs命令一起使用</p><p>命令格式 : kill[命令参数][进程id]</p><p>命令参数:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-l  信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称
-a  当处理当前进程时，不限制命令名和进程号的对应关系
-p  指定kill 命令只打印相关进程的进程号，而不发送任何信号
-s  指定发送信号
-u  指定用户
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>procs 显示进程数</strong></p><p>r 等待运行的进程。系统上的负载越多，等待运行 CPU 周期的进程数量越多。</p><p>b 不可中断睡眠的进程，也称为“被阻塞”的进程。这些进程最有可能等待 I/O，但也可能等待其他事情。</p><h3 id="性能分析" tabindex="-1"><a class="header-anchor" href="#性能分析" aria-hidden="true">#</a> 性能分析</h3><p>free：命令可以显示Linux系统中空闲的、已用的物理内存及swap内存,及被内核使用的buffer。</p><p>mpstat：用于获取 CPU 相关统计信息</p><p>iostat：性能评估的一个主要部分就是磁盘性能，iostat 命令提供了存储接口的性能指标。</p><p>vmstat：显示所有与内存和进程相关信息的命令</p><p>netstat：用于显示各种网络相关信息，如网络连接，路由表，接口状态 (Interface Statistics)，masquerade 连接，多播成员 (Multicast Memberships) 等等。</p><p><strong>wpd,free,buff,cache显示了内存值班</strong></p><p>wpd 虚拟内存或交换内存的数量（以 KB 为单位）</p><p>free 可用物理内存的数量（以 KB 为单位）</p><p>buff 用作缓冲区的内存数量（以 KB 为单位）</p><p>cache 用作缓存的物理内存数量（以 KB 为单位）</p>`,48),b={href:"https://www.cnblogs.com/xiaoxi-jinchen/p/16250684.html",target:"_blank",rel:"noopener noreferrer"},m=i('<h3 id="开关机" tabindex="-1"><a class="header-anchor" href="#开关机" aria-hidden="true">#</a> 开关机</h3><p>shutdown -h now 关闭系统(1) init 0 关闭系统(2) telinit 0 关闭系统(3) shutdown -h hours:minutes &amp; 按预定时间关闭系统 shutdown -c 取消按预定时间关闭系统 shutdown -r now 重启(1) reboot 重启(2) logout 注销 time 测算一个命令（即程序）的执行时间</p><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><p>epoll</p><blockquote><p>epoll的web server，IO多路复用</p></blockquote><p>echo</p><blockquote><p>print，经常用在shell脚本编程中，用来输出内容，默认，末尾换行</p></blockquote>',7);function x(k,q){const o=t("ExternalLinkIcon");return c(),p("div",null,[r,e("blockquote",null,[s,e("p",null,[e("a",h,[l("https://blog.csdn.net/qq_46416934/article/details/126747074"),a(o)])])]),u,e("p",null,[e("a",b,[l("https://www.cnblogs.com/xiaoxi-jinchen/p/16250684.html"),a(o)])]),m])}const f=d(n,[["render",x],["__file","1.1 basic-cmd.html.vue"]]);export{f as default};
