import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as i,o as n}from"./app-C_tIvXCt.js";const l={};function r(s,e){return n(),o("div",null,e[0]||(e[0]=[i('<h1 id="alpha" tabindex="-1"><a class="header-anchor" href="#alpha"><span>Alpha</span></a></h1><p>next week go through concept</p><p>As I mentioned yesterday, class next week will consist of Authoring Tool Design Doc presentations. Class on Mon (2/24) will be the Group 1 – 10 presentations while class on Wed (2/26) will be the Group 11-20 presentations.</p><p>Regarding the Design Doc presentations, here’s the format I would like you to follow for your <strong>7 minute, max</strong> presentation. NOTE: you should have no more than 5 slides.</p><p>Slide 1 - <strong>Overview</strong></p><ul><li><p>Name of your Authoring Tool</p></li><li><p>Group Members</p></li></ul><p>Slide 2 – <strong>Features and Capabilities</strong></p><ul><li><p>Need for tool</p></li><li><p>Bulleted list of main features and capabilities</p><ul><li>The intent of this slide is to tell the audience what your tool does, what it takes as inputs, what it produces as output, etc.</li></ul></li></ul><p>Slide 3 – <strong>Technical Approach</strong></p><ul><li><em>a <strong>VERY BRIEF</strong> description of the paper selected (i.e. Title, authors, SIGGRAPH year, main concepts)</em></li></ul><p>Slide 4 - <strong>Implementation Strategy</strong></p><ul><li><p><em>the intent of this slide is to describe your development approach</em></p><ul><li><p>for example,</p><ul><li><p>develop OpenGL test app to start, then develop C++ plugin</p></li><li><p>strictly MEL or Python scripting,</p></li><li><p>deep C++ Maya or Houdini integration</p></li></ul></li></ul></li><li><p>Use of third party software</p><ul><li>list specific libraries you might consider using <ul><li>see CIS6600 Canvas site for list of libraries previously used in the past in CIS6600 projects.</li></ul></li></ul></li></ul><hr><p><strong>Slide 3 – Technical Approach</strong></p><ul><li><strong>Paper Selected</strong>: <ul><li>“RigNet: Neural Rigging for Articulated Characters” (Xu et al., SIGGRAPH 2020)</li></ul></li><li>Main Concepts <ul><li>End-to-end <strong>graph neural network</strong> (GNN) pipeline for automated rigging</li><li>Predicts <strong>joint positions</strong>, <strong>skeleton connectivity</strong>, and <strong>skinning weights</strong></li><li>Uses <strong>attention-driven clustering</strong> for joint detection and a <strong>minimum spanning tree</strong> to create a valid skeleton</li><li>Produces high-quality rigs across diverse shapes, from humanoids to fantasy creatures</li></ul></li><li>x <ul><li>End-to-end <strong>graph neural network</strong> (GNN) pipeline for automated rigging</li><li>Predicts <strong>joint positions</strong>, <strong>skeleton connectivity</strong>, and <strong>skinning weights</strong></li><li>Uses <strong>attention-driven clustering</strong> for joint detection and a <strong>minimum spanning tree</strong> to create a valid skeleton</li><li>Produces high-quality rigs across diverse shapes, from humanoids to fantasy creatures</li></ul></li></ul><hr><p><strong>Slide 4 – Implementation Strategy</strong></p><ul><li>Overall Development Approach <ol><li>Write a <strong>Python-based plugin</strong> for Maya that handles data prep, UI, and rig generation</li><li>Integrate <strong>pre-trained PyTorch</strong> (RigNet) models for inference (joint placement, connectivity, skin weights)</li><li>Optional <strong>C++ components</strong> if certain geometry-processing steps need a speed boost</li><li>Implement RigNet pipeline to train the model</li><li>Integrate <strong>pre-trained PyTorch</strong> (RigNet) models for inference (joint placement, connectivity, skin weights)</li><li>Develop a <strong>Python plugin</strong> Maya with PyQt that handles UI and rig generation</li><li>Then develop the Python Plugin</li></ol></li><li>Use of Third-Party Software <ul><li><strong>PyTorch</strong>: for neural network inference</li><li><strong>Torch Geometric</strong>: specialized GNN operations (EdgeConv, pooling, etc.)</li><li><strong>Open3D</strong>: optional for volumetric geodesic or other geometry routines</li><li><strong>Conda</strong>: environment management to ensure consistent dependencies</li><li><strong>Maya Python API</strong>: to build a custom UI, convert meshes to GNN-friendly format, and create joints/skin clusters in Maya</li></ul></li></ul><p>Slide 4 - <strong>Implementation Strategy</strong></p><ul><li><p><em>the intent of this slide is to describe your development approach</em></p><ul><li><p>for example,</p><ul><li><p>develop OpenGL test app to start, then develop C++ plugin</p></li><li><p>strictly MEL or Python scripting,</p></li><li><p>deep C++ Maya or Houdini integration</p></li></ul></li></ul></li><li><p>Use of third party software</p><ul><li>list specific libraries you might consider using <ul><li>see CIS6600 Canvas site for list of libraries previously used in the past in CIS6600 projects.</li></ul></li></ul></li></ul>',20)]))}const g=t(l,[["render",r],["__file","pre.html.vue"]]),c=JSON.parse(`{"path":"/education/ms/6600/tool/pre/pre.html","title":"Alpha","lang":"en-US","frontmatter":{"description":"Alpha next week go through concept As I mentioned yesterday, class next week will consist of Authoring Tool Design Doc presentations. Class on Mon (2/24) will be the Group 1 – 1...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/education/ms/6600/tool/pre/pre.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"Alpha"}],["meta",{"property":"og:description","content":"Alpha next week go through concept As I mentioned yesterday, class next week will consist of Authoring Tool Design Doc presentations. Class on Mon (2/24) will be the Group 1 – 1..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-05-28T16:32:52.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-28T16:32:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Alpha\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-28T16:32:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[],"git":{"createdTime":1748449972000,"updatedTime":1748449972000,"contributors":[{"name":"David","email":"l729641074@163.com","commits":1}]},"readingTime":{"minutes":1.79,"words":537},"filePathRelative":"education/ms/6600/tool/pre/pre.md","localizedDate":"May 28, 2025","excerpt":"\\n<p>next week go through concept</p>\\n<p>As I mentioned yesterday, class next week will consist of Authoring Tool Design Doc presentations. Class on Mon (2/24) will be the Group 1 – 10 presentations while class on Wed (2/26) will be the Group 11-20 presentations.</p>\\n<p>Regarding the Design Doc presentations, here’s the format I would like you to follow for your <strong>7 minute, max</strong> presentation. NOTE: you should have no more than 5 slides.</p>","autoDesc":true}`);export{g as comp,c as data};
