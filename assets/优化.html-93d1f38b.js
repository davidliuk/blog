import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,d as e}from"./app-9107e99b.js";const t={},c=e(`<h1 id="优化" tabindex="-1"><a class="header-anchor" href="#优化" aria-hidden="true">#</a> 优化</h1><p>行锁优化</p><p>为 Map 的 Value 封装为一个结构体，其中包含一个读写锁，这样可以在读取的时候不会阻塞写入，提高并发性能</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Map <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>entry
    sync<span class="token punctuation">.</span>RWMutex
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="慢同步任务优化" tabindex="-1"><a class="header-anchor" href="#慢同步任务优化" aria-hidden="true">#</a> 慢同步任务优化</h2><p>由于同步任务，要求一致性，所以最新的同步任务必须执行，前面的较为旧的同步任务可以不执行，所以可以通过一个全局变量来控制，如果有新的同步任务，就把全局变量设置为 true，如果有旧的同步任务，就把全局变量设置为 false，这样就可以在同步任务的开头判断全局变量，如果是 false，就直接退出，不执行同步任务，这样就可以提高性能。</p><p>为了解决提交新的同步任务时，还有旧的同步任务正在执行的问题，可以通过设置为一个整数，每次提交新的同步任务，如果当前这个整数小于 2，就把这个整数加 1，每次同步任务执行完毕，就把这个整数减 1，这样就可以保证，只有最新的同步任务会执行，旧的同步任务不会执行。</p><p>在多线程并发提交任务时，为了防止出现并发安全问题，可以使用 sync.Mutex 来加锁，保证同一时间只有一个线程可以修改这个整数。</p>`,8),p=[c];function o(i,r){return n(),s("div",null,p)}const u=a(t,[["render",o],["__file","优化.html.vue"]]);export{u as default};
