const e=JSON.parse(`{"key":"v-d2b5ffd4","path":"/se/lang/java/JUC/thread/threadlocal.html","title":"ThreadLocal","lang":"en-US","frontmatter":{"description":"ThreadLocal 解决线程安全问题的另一种思路，之前是共享资源加锁或 CAS 重试，现在是线程隔离各用各的。 作用： 实现资源对象的线程隔离，让每个线程各用各的资源对象，避免争用引发的线程安全问题 实现了线程内的资源共享 局部变量：可以线程隔离，但是不能跨方法。Thread Local主要解决的就是这个跨方法的问题 线程关联的原理 ThreadLocal 并不是一个独立的存在, 它与 Thread 类是存在耦合的, java.lang.Thread 类针对 ThreadLocal 提供了如下支持：","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/java/JUC/thread/threadlocal.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"ThreadLocal"}],["meta",{"property":"og:description","content":"ThreadLocal 解决线程安全问题的另一种思路，之前是共享资源加锁或 CAS 重试，现在是线程隔离各用各的。 作用： 实现资源对象的线程隔离，让每个线程各用各的资源对象，避免争用引发的线程安全问题 实现了线程内的资源共享 局部变量：可以线程隔离，但是不能跨方法。Thread Local主要解决的就是这个跨方法的问题 线程关联的原理 ThreadLocal 并不是一个独立的存在, 它与 Thread 类是存在耦合的, java.lang.Thread 类针对 ThreadLocal 提供了如下支持："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-05-17T10:10:52.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-05-17T10:10:52.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/se/lang/java/JUC/thread/threadlocal.html"}]]},"headers":[{"level":2,"title":"线程关联的原理","slug":"线程关联的原理","link":"#线程关联的原理","children":[]},{"level":2,"title":"为什么 Map 的 key 要设置成弱引用呢？","slug":"为什么-map-的-key-要设置成弱引用呢","link":"#为什么-map-的-key-要设置成弱引用呢","children":[]},{"level":2,"title":"内存泄漏","slug":"内存泄漏","link":"#内存泄漏","children":[]},{"level":2,"title":"线程池脏读问题","slug":"线程池脏读问题","link":"#线程池脏读问题","children":[]},{"level":2,"title":"父子线程间共享","slug":"父子线程间共享","link":"#父子线程间共享","children":[]}],"git":{"createdTime":1684318252000,"updatedTime":1684318252000,"contributors":[{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":5.39,"words":1618},"localizedDate":"May 17, 2023","filePathRelative":"se/lang/java/JUC/thread/threadlocal.md","excerpt":"<h1> ThreadLocal</h1>\\n<p>解决线程安全问题的另一种思路，之前是共享资源加锁或 CAS 重试，现在是线程隔离各用各的。</p>\\n<p>作用：</p>\\n<ul>\\n<li>实现资源对象的线程隔离，让每个线程各用各的资源对象，避免争用引发的线程安全问题</li>\\n<li>实现了线程内的资源共享</li>\\n</ul>\\n<p>局部变量：可以线程隔离，但是不能跨方法。Thread Local主要解决的就是这个跨方法的问题</p>\\n<h2> 线程关联的原理</h2>\\n<p>ThreadLocal 并不是一个独立的存在, 它与 Thread 类是存在耦合的, java.lang.Thread 类针对 ThreadLocal 提供了如下支持：</p>","autoDesc":true}`);export{e as data};
