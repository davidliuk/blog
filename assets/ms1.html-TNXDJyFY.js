import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,o as e}from"./app-DIqbhby7.js";const l={};function t(h,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="milestone-1" tabindex="-1"><a class="header-anchor" href="#milestone-1"><span>Milestone 1</span></a></h1><blockquote><p>11.11</p></blockquote><h2 id="terrain" tabindex="-1"><a class="header-anchor" href="#terrain"><span>Terrain</span></a></h2><p>Noise</p><p>Berlin, Worley noise</p><p><strong>Summed Perlin noise terrain</strong></p><p>Increase number of grid lines</p><p>the lower freq the flatter</p><p>different freq and</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">vec4 offsetPos </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> vs_Pos </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> vec4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(vs_offset);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> dessertH </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> dessertHeight</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(xz);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> grassH </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> grassLandHeight</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(xz);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> biomeBlender</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(xz);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> smoothsep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, t);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // smooth between biome</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> h </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> mix</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(dessertH, grassH, t);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">offsetPos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">y</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> h;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>write</p><ul><li>grass</li><li>mountain</li></ul><p>noise and distribution</p><p>water 生成</p><p>y&lt;128&amp;&amp;empty-&gt;water</p><h2 id="chunk" tabindex="-1"><a class="header-anchor" href="#chunk"><span>Chunk</span></a></h2><p>chunk rendering</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Chunk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    std::array</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">BlockType, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">65536</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> m_blocks;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> minX, minZ;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    std::unordered_map</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Direction, Chunk</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, EnumHash</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> m_neighbors; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> InputBundle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> press</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="physics" tabindex="-1"><a class="header-anchor" href="#physics"><span>Physics</span></a></h2><p>Collision boxes</p><p>Const store <code>array&lt;vec3,12&gt;</code></p><p>every tick check distance between ground and</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Mini Minecraft</span></span>
<span class="line"><span>template&lt;class T&gt;</span></span>
<span class="line"><span>MutexPair {</span></span>
<span class="line"><span>	T sharedResource;</span></span>
<span class="line"><span>	std::mutex lock;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Main Thread</span></span>
<span class="line"><span>	vector&lt;Chunck*&gt; dataForNoiseWorkerThreads;</span></span>
<span class="line"><span>    tick() {</span></span>
<span class="line"><span>        1. update player position, velocity, collisions, etc</span></span>
<span class="line"><span>        2. check to see if we need to make more terrain based on where the player is when we send info to our parallel threads to be processed &quot;worker threads&quot;</span></span>
<span class="line"><span>        3. </span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>Opaque blocks</p><p>Transparent Blocks</p><ol><li>Draw all chunks&#39; opaque VBO data</li><li>Draw all chunks&#39; transparent VBO data</li></ol><hr><p>I implemented Efficient Terrain Rendering and Chunking by creating create() function for chunk to make it draws the terrain on a per-Chunk basis. To achieve this, I find the neighbor of every block in this chunk, and only draw faces that lie on the boundary between a transparent block and a filled block.</p><p>I implemented Procedural Terrain by creating GenerateTerrain() function for Terrain to generate and instantiate all chunk in the given range, and generate grassland, dessert and mountain terrains. To achieve this, I use Perlin noise to generate the height of grassland and dessert, then use biomeBlender to blend their height.</p>`,31)]))}const k=i(l,[["render",t],["__file","ms1.html.vue"]]),d=JSON.parse(`{"path":"/education/ms/5600/final/ms1.html","title":"Milestone 1","lang":"en-US","frontmatter":{"description":"Milestone 1 11.11 Terrain Noise Berlin, Worley noise Summed Perlin noise terrain Increase number of grid lines the lower freq the flatter different freq and write grass mountain...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/education/ms/5600/final/ms1.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"Milestone 1"}],["meta",{"property":"og:description","content":"Milestone 1 11.11 Terrain Noise Berlin, Worley noise Summed Perlin noise terrain Increase number of grid lines the lower freq the flatter different freq and write grass mountain..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-22T03:21:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-22T03:21:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Milestone 1\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-22T03:21:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":2,"title":"Terrain","slug":"terrain","link":"#terrain","children":[]},{"level":2,"title":"Chunk","slug":"chunk","link":"#chunk","children":[]},{"level":2,"title":"Physics","slug":"physics","link":"#physics","children":[]}],"git":{"createdTime":1730928664000,"updatedTime":1732245692000,"contributors":[{"name":"David Liu","email":"liudawei@seas.upenn.edu","commits":1}]},"readingTime":{"minutes":0.97,"words":290},"filePathRelative":"education/ms/5600/final/ms1.md","localizedDate":"November 6, 2024","excerpt":"\\n<blockquote>\\n<p>11.11</p>\\n</blockquote>\\n<h2>Terrain</h2>\\n<p>Noise</p>\\n<p>Berlin, Worley noise</p>\\n<p><strong>Summed Perlin noise terrain</strong></p>\\n<p>Increase number of grid lines</p>\\n<p>the lower freq the flatter</p>\\n<p>different freq and</p>\\n<div class=\\"language-c++ line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"c++\\" data-title=\\"c++\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">vec4 offsetPos </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">=</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> vs_Pos </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">+</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> vec4</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(vs_offset);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">float</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> dessertH </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">=</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> dessertHeight</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(xz);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">float</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> grassH </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">=</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> grassLandHeight</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(xz);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">float</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> t </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">=</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> biomeBlender</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(xz);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">t </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">=</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> smoothsep</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">0.4</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">0.6</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, t);</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> // smooth between biome</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">float</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> h </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">=</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> mix</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(dessertH, grassH, t);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">offsetPos</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">y</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> *=</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> h;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{k as comp,d as data};
