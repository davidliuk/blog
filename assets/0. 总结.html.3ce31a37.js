import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as s,f as e}from"./app.133d30c8.js";const p={},t=e(`<h2 id="按时间复杂度区分" tabindex="-1"><a class="header-anchor" href="#按时间复杂度区分" aria-hidden="true">#</a> 按时间复杂度区分</h2><p>a, max</p><p>int max = a[0];</p><p>for(int i = 0; i &lt; a.length; i++) {</p><p>​ max = Math.max(max, a[i])</p><p>}</p><p>1 2 3 4 5</p><p>12[345]678</p><p>3</p><p>1 2 3 4 5 6</p><p>2</p><p>2 1 3 4 2 3 5 3 6</p><p>| |</p><p>A k</p><p>4</p><p>1 2 3 4 5</p><p>| |</p><h3 id="on" tabindex="-1"><a class="header-anchor" href="#on" aria-hidden="true">#</a> On</h3><ul><li><p>打擂台，求max或者min</p></li><li><p>双指针</p><ul><li><p>背向双指针，回文串</p><p>1 2 3 4 3 2 1</p><p>​ II</p></li><li><p>同向双指针</p><ul><li><p>快慢指针（一个一步、一个两步）</p><p>链表，求中点、求交点、判求环</p></li><li><p>滑动窗口</p><ul><li><p>大小恒定的窗口</p><p>连续的k个数中的最值、中位数</p></li><li><p>大小不定的窗口（待学）</p></li></ul></li><li><p>归并排序的merge算法</p><p>合并两个有序数组或链表</p></li></ul></li><li><p>相向双指针</p><ul><li>快速排序的partition算法</li><li>两数之和</li></ul></li></ul></li><li><p>快速选择</p></li><li><p>所有链表问题</p></li></ul><h3 id="onlong" tabindex="-1"><a class="header-anchor" href="#onlong" aria-hidden="true">#</a> Onlong</h3><ul><li><p>归并、快速排序</p></li><li><p>n次logn的运算</p><p>n次二分</p><p>n次插入堆</p></li></ul><h3 id="on-1" tabindex="-1"><a class="header-anchor" href="#on-1" aria-hidden="true">#</a> &lt;On</h3><h4 id="bfs" tabindex="-1"><a class="header-anchor" href="#bfs" aria-hidden="true">#</a> BFS</h4><h4 id="dfs" tabindex="-1"><a class="header-anchor" href="#dfs" aria-hidden="true">#</a> DFS</h4><h2 id="按算法类型区分" tabindex="-1"><a class="header-anchor" href="#按算法类型区分" aria-hidden="true">#</a> 按算法类型区分</h2><h3 id="bs二分查找" tabindex="-1"><a class="header-anchor" href="#bs二分查找" aria-hidden="true">#</a> BS二分查找</h3><p>logn</p><p>用途</p><ul><li><p>有序数组中找一个元素</p><p>2</p><p>1 2 3 4 5</p></li><li><p>二分答案</p><p>0 max</p></li><li><p>非排序序数组中找一个元素</p></li></ul><h3 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历" aria-hidden="true">#</a> 遍历</h3><p>线性的：数组、链表</p><ul><li>迭代遍历</li><li>递归遍历</li></ul><p>数组 for</p><p>链表</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">while</span><span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    访问node<span class="token punctuation">;</span>
    node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 1 -&gt; 2 -&gt; 3</span>
<span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 先序访问node;</span>
    <span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 后序访问node;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>树形的：二叉树、多叉树</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1 -&gt; 2 -&gt; 3</span>
<span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 先序访问node;</span>
    <span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 中序访问node;</span>
    <span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 后序访问node;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1 -&gt; 2 -&gt; 3</span>
<span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> chilren<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 先序访问node;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TreeNode</span> child<span class="token operator">:</span> node<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">traverse</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 后序访问node;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/截屏2022-09-05 22.56.27.png" alt="截屏2022-09-05 22.56.27" loading="lazy"></p><h3 id="dfs-1" tabindex="-1"><a class="header-anchor" href="#dfs-1" aria-hidden="true">#</a> DFS</h3><h3 id="bfs-1" tabindex="-1"><a class="header-anchor" href="#bfs-1" aria-hidden="true">#</a> BFS</h3><p>宽度优先搜索</p>`,42),i=[t];function l(o,c){return a(),s("div",null,i)}const r=n(p,[["render",l],["__file","0. 总结.html.vue"]]);export{r as default};
