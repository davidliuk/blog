const e=JSON.parse(`{"key":"v-b0a58960","path":"/se/lang/java/basic/type/%E6%B3%9B%E5%9E%8B.html","title":"泛型","lang":"en-US","frontmatter":{"description":"泛型 Generics JDK 5 中引入的一个新特性。使用泛型参数，可以增强代码的可读性以及稳定性。 编译器可以对泛型参数进行检测，并且通过泛型参数可以指定传入的对象类型。比如 ArrayList&lt;Persion&gt; persons = new ArrayList&lt;Persion&gt;() 这行代码就指明了该 ArrayList 对象只能传入 Persion 对象，如果传入其他类型的对象就会报错。 泛型类 泛型接口 泛型方法","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/java/basic/type/%E6%B3%9B%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"泛型"}],["meta",{"property":"og:description","content":"泛型 Generics JDK 5 中引入的一个新特性。使用泛型参数，可以增强代码的可读性以及稳定性。 编译器可以对泛型参数进行检测，并且通过泛型参数可以指定传入的对象类型。比如 ArrayList&lt;Persion&gt; persons = new ArrayList&lt;Persion&gt;() 这行代码就指明了该 ArrayList 对象只能传入 Persion 对象，如果传入其他类型的对象就会报错。 泛型类 泛型接口 泛型方法"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-01-08T03:06:14.000Z"}],["meta",{"property":"article:author","content":"David Liu"}],["meta",{"property":"article:modified_time","content":"2024-01-08T03:06:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"泛型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-08T03:06:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":2,"title":"泛型擦除","slug":"泛型擦除","link":"#泛型擦除","children":[{"level":3,"title":"既然编译器要把泛型擦除，那为什么还要用泛型呢？用 Object 代替不行吗？","slug":"既然编译器要把泛型擦除-那为什么还要用泛型呢-用-object-代替不行吗","link":"#既然编译器要把泛型擦除-那为什么还要用泛型呢-用-object-代替不行吗","children":[]},{"level":3,"title":"桥方法(Bridge Method)","slug":"桥方法-bridge-method","link":"#桥方法-bridge-method","children":[]},{"level":3,"title":"限制","slug":"限制","link":"#限制","children":[]},{"level":3,"title":"通配符","slug":"通配符","link":"#通配符","children":[]}]}],"git":{"createdTime":1704683174000,"updatedTime":1704683174000,"contributors":[{"name":"davidliu","email":"liudawei47@jd.com","commits":1}]},"readingTime":{"minutes":2.11,"words":632},"filePathRelative":"se/lang/java/basic/type/泛型.md","localizedDate":"January 8, 2024","excerpt":"<h1> 泛型</h1>\\n<p>Generics</p>\\n<p>JDK 5 中引入的一个新特性。使用泛型参数，可以增强代码的可读性以及稳定性。</p>\\n<p>编译器可以对泛型参数进行检测，并且通过泛型参数可以指定传入的对象类型。比如 <code>ArrayList&lt;Persion&gt; persons = new ArrayList&lt;Persion&gt;() </code>这行代码就指明了该 ArrayList 对象只能传入 Persion 对象，如果传入其他类型的对象就会报错。</p>\\n<ul>\\n<li>泛型类</li>\\n<li>泛型接口</li>\\n<li>泛型方法</li>\\n</ul>","autoDesc":true}`);export{e as data};
