import{_ as p,V as i,W as l,Z as e}from"./framework-e5d7a6b2.js";const a={},t=e('<h1 id="论文" tabindex="-1"><a class="header-anchor" href="#论文" aria-hidden="true">#</a> 论文</h1><p>分析现有方法的缺点</p><p>优势：架构不一样，但是也属于进化计算分支</p><p>元启发式算法 -&gt; 进化计算（进化类元启发式算法）</p><p>典型的有：</p><ul><li>遗传算法 GA</li><li>差分进化算法 DE</li><li>进化策略 ES</li><li>遗传编程 GP</li><li>进化编程 EP</li></ul><p>meta 元启发式算法分类</p><ul><li><p>进化类</p></li><li><p>物理/化学类</p></li><li><p>自然现象类</p><ul><li>蚁群算法</li><li>人工蜂群</li></ul></li><li><p>人类社会启发</p></li></ul><p>introduction 还差前文的缺点：</p><p>要实现元老级的进化算法都实现了，</p><p>不足之处：他们把适应度不足的个体直接淘汰了，但是有一些适应度不足的个体可能有潜力，早熟/过早收敛，种群多样性降低，陷入局部最优解附近打转。</p><ul><li></li></ul><p>我们的架构：检验将被淘汰的适应度不足的个体，同时引入全局初始化个体</p><ol><li></li></ol><p>不要从理论的角度出发，要从实践的角度出发</p><p>Introduction 部分，小规模实验，以实验结果说话。</p><p>实验目的是：证明经过上面两点的改进之后，进化类算法的早熟现象有所改进。</p><p>小规模实验思考的出发点是：我为什么不用这个现成的、要用改进过后的？</p><h3 id="步骤一-放-intro" tabindex="-1"><a class="header-anchor" href="#步骤一-放-intro" aria-hidden="true">#</a> 步骤一：放 Intro</h3><p>现有的算法在调参之后，也能尽量多地保留适应度不足的个体，也能在每一代引入全局初始化向量。</p><p>但是在调参或者提供新的算子的现有算法下，这个结果还不如传统现有算法（取经验值的区间内的）</p><p>“现有算法经过调参之后，实验结果的提升效果不明显（或者更差了）”</p><h3 id="步骤二-放实验里" tabindex="-1"><a class="header-anchor" href="#步骤二-放实验里" aria-hidden="true">#</a> 步骤二：放实验里</h3><p>我们把前面的算法经过新的框架改进之后，再进行实验</p><p>对 GA、DE、ES，做三次实验：调参、传统、用框架修改</p><p>实验内容：再 Python 上运行 23 基本函数 30 次（每次两万代），取（函数值的）平均值和方差</p><p>再在零零碎碎的算法里面取3个有代码，总共取五到六个进化算法去做比较</p><p>大维把传统的运行一遍，记录参数，找到新的进化算法论文，运行一遍，记录参数，然后收集各种元启发式算法的结果就好啦</p>',28),r=[t];function n(o,c){return i(),l("div",null,r)}const h=p(a,[["render",n],["__file","论文.html.vue"]]);export{h as default};
