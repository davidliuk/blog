import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as a,d as t}from"./app-9107e99b.js";const o={},l=t('<h1 id="workflow" tabindex="-1"><a class="header-anchor" href="#workflow" aria-hidden="true">#</a> Workflow</h1><ol><li><p><strong>data</strong>, get data ready</p></li><li><p><strong>build</strong> or pick a pretrained model(to suit your problem)</p><ol><li>Pick a loss function &amp; optimizer</li><li>Build a training loop</li></ol></li><li><p><strong>Fit</strong> the model to the data and make a prediction</p></li><li><p>Evaluate the model</p></li><li><p>Improve through experimentation</p></li><li><p>Save and reload your trained model</p></li></ol><hr><ol><li><strong>data</strong>, get data ready</li><li><strong>build</strong> or pick a pretrained model(to suit your problem)</li><li><strong>Fit</strong> the model to the data (training)</li><li>make a <strong>prediction</strong> (inference)</li><li>saving and loading a model</li><li>putting it all together</li><li>Evaluate the model</li><li>Improve through experimentation</li><li>Save and reload your trained model</li></ol><hr><p>Machine Learning: a game of two parts</p><ol><li>inputs</li><li>numerical encoding</li><li>learns representation(patterns/ features/ weights)</li><li>representation outputs</li><li>Outputs</li></ol><hr><ol><li>get data into a numerical representation</li><li>build a model to learn patterns in that numerical representation</li></ol><hr><h3 id="dataset" tabindex="-1"><a class="header-anchor" href="#dataset" aria-hidden="true">#</a> dataset</h3><ul><li>training set, always</li><li>validation set, often but not always</li><li>Test set, always</li></ul><h3 id="model" tabindex="-1"><a class="header-anchor" href="#model" aria-hidden="true">#</a> model</h3><p>algorithm</p><ol><li>Gradient descent</li><li>back propagation</li></ol><hr><p>torch.nn<br> torch.nn.Parameter<br> torch.nn.Module<br> torch.optim</p><hr><p>torch.Interfere_mode()</p><h3 id="train" tabindex="-1"><a class="header-anchor" href="#train" aria-hidden="true">#</a> Train</h3><ol><li><p>loss function</p><p><code>nn.L1Loss()</code></p><p>MAE</p></li><li><p>optimizer</p><p><code>torch.optim.SGD()</code></p><p>Lr: learning rate 变化的幅度。是 hyperparameter 超参数，自己设置的</p></li></ol><p><code>module.state_dict()</code></p><h3 id="training-loop" tabindex="-1"><a class="header-anchor" href="#training-loop" aria-hidden="true">#</a> Training loop</h3><ol start="0"><li><p>loop through the data</p></li><li><p>Forward pass to make predictions on data</p><p>前向传播</p></li><li><p>Calculate the loss</p><p>计算误差</p></li><li><p>Optimizer zero grad</p></li><li><p>Loss backward</p><p>反向传播</p></li><li><p>Optimizer step</p></li></ol><p><code>epochs</code></p><p>数据、模型、损失函数、优化器、迭代训练</p><h3 id="testing-loop" tabindex="-1"><a class="header-anchor" href="#testing-loop" aria-hidden="true">#</a> Testing loop</h3><h3 id="saving-a-model-in-pytorch" tabindex="-1"><a class="header-anchor" href="#saving-a-model-in-pytorch" aria-hidden="true">#</a> Saving a model in Pytorch</h3><ul><li><code>torch.save()</code>, picle</li><li><code>torch.load()</code>, picle</li><li><code>torch.nn.load_state_dict()</code>, picle</li></ul>',29),r=[l];function n(d,p){return e(),a("div",null,r)}const c=i(o,[["render",n],["__file","workflow.html.vue"]]);export{c as default};
