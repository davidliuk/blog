import{_ as n,V as a,W as s,Z as e}from"./framework-e5d7a6b2.js";const i={},p=e(`<h1 id="用法" tabindex="-1"><a class="header-anchor" href="#用法" aria-hidden="true">#</a> 用法</h1><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">execution</span><span class="token punctuation">(</span>方法表达式<span class="token punctuation">)</span>
<span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> cn<span class="token punctuation">.</span>sunpiaoliang<span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
cn<span class="token punctuation">.</span>sunpiaoliang<span class="token punctuation">.</span>service 这个路径下的包或子包所有方法和所有类型的参数 返回值为任何类型
<span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;execution(void com.itheima.dao.BookDao.update())&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><ul><li><p>第一个 “*” 任何类型返回值</p></li><li><p>cn.sunpiaoliang.service 路径</p></li><li><p>.. ：包或子包</p></li><li><p>第二个“*” 所有类</p></li><li><p><code>cn.*Service</code>任何service结尾的包</p></li><li><p>任何方法 (..) 任意方法 （*）只有一个参数 （）不带参数</p></li></ul><p>@annotation 匹配当前执行方法持有指定注解的方法，可以直接写注解，也可以直接写全路径</p><p>@within 匹配所以持有指定注解类型内的方法，全路径</p><p>aop主要是通过代理实现</p><p>1、JDK代理 2、CGlib 代理</p><p>通配符</p><p>表达式内可以使用通配符描述切入点，快速描述</p><ol><li><p><code>*</code>：单个独立的任意符号，可以独立出现的，可以作为前缀或者后缀的匹配符出现（必有一个）</p><p><code>execution(public * com.itheima.*.UserService.find*(*))</code> 匹配com.itheima包下的任意包中的UserService类或接口中所有的find开头的带有一个参数的方法</p></li><li><p><code>..</code> ：多个连续的任意符号，可以独立出现，常用于简化包名与参数的书写（有或者没有都ok）</p><p><code>execution(public User com..UserService.findById(..))</code> 匹配com包下的任意包中的UserService类或接口中所有名称为findById的方法</p></li><li><p><code>+</code>：专用于匹配子类类型（表示子类）</p><p><code> execution(**..*Service+.*（..）)</code></p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/davidliuk/images@master/blog/e4ce4399fbed44ee8f32401d06df5a2a.jpeg" alt="img" loading="lazy"></p>`,12),c=[p];function t(o,l){return a(),s("div",null,c)}const d=n(i,[["render",t],["__file","用法.html.vue"]]);export{d as default};
