import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as e,o as m}from"./app-Cv-jMnVl.js";const r={};function i(n,t){return m(),o("div",null,t[0]||(t[0]=[e("h1",{id:"内存模型",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#内存模型"},[e("span",null,"内存模型")])],-1),e("p",null,"java 内存模型(JMM)是线程间通信的控制机制.JMM 定义了主内存和线程之间抽象关系。线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读/写共享变量的副本。本地内存是 JMM的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。Java 内存模型的抽象示意图如下：",-1)]))}const p=a(r,[["render",i],["__file","jmm.html.vue"]]),d=JSON.parse(`{"path":"/se/lang/java/jvm/%E5%B9%B6%E5%8F%91/jmm.html","title":"内存模型","lang":"en-US","frontmatter":{"description":"内存模型 java 内存模型(JMM)是线程间通信的控制机制.JMM 定义了主内存和线程之间抽象关系。线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读/写共享变量的副本。本地内存是 JMM的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/java/jvm/%E5%B9%B6%E5%8F%91/jmm.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"内存模型"}],["meta",{"property":"og:description","content":"内存模型 java 内存模型(JMM)是线程间通信的控制机制.JMM 定义了主内存和线程之间抽象关系。线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读/写共享变量的副本。本地内存是 JMM的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-05-08T07:35:02.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-08T07:35:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"内存模型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-08T07:35:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[],"git":{"createdTime":1675410392000,"updatedTime":1715153702000,"contributors":[{"name":"davidliu","email":"liudawei47@jd.com","commits":1},{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":0.51,"words":152},"filePathRelative":"se/lang/java/jvm/并发/jmm.md","localizedDate":"February 3, 2023","excerpt":"\\n<p>java 内存模型(JMM)是线程间通信的控制机制.JMM 定义了主内存和线程之间抽象关系。线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读/写共享变量的副本。本地内存是 JMM的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。Java 内存模型的抽象示意图如下：</p>\\n","autoDesc":true}`);export{p as comp,d as data};
