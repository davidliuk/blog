const e=JSON.parse(`{"key":"v-7fdd11f8","path":"/cs/algo/basic/search/DFS.html","title":"DFS","lang":"en-US","frontmatter":{"description":"DFS DFS基础 栈搜索 运行时栈：栈里的是仍在运行的 入栈：函数开始运行 出栈：函数运行结束 DFS步骤 出栈（即函数被调用了） 捕捉：全局变量捕捉target值 出队的时候进行目标点的捕捉，如果是目标点就返回，不再继续扩展 扩展 入栈 先序遍历 从已知点开始出发","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/cs/algo/basic/search/DFS.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"DFS"}],["meta",{"property":"og:description","content":"DFS DFS基础 栈搜索 运行时栈：栈里的是仍在运行的 入栈：函数开始运行 出栈：函数运行结束 DFS步骤 出栈（即函数被调用了） 捕捉：全局变量捕捉target值 出队的时候进行目标点的捕捉，如果是目标点就返回，不再继续扩展 扩展 入栈 先序遍历 从已知点开始出发"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-01-27T15:34:13.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-01-27T15:34:13.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/cs/algo/basic/search/DFS.html"}]]},"headers":[{"level":3,"title":"DFS基础","slug":"dfs基础","link":"#dfs基础","children":[]},{"level":3,"title":"DFS步骤","slug":"dfs步骤","link":"#dfs步骤","children":[]},{"level":3,"title":"先序遍历","slug":"先序遍历","link":"#先序遍历","children":[]},{"level":3,"title":"后序遍历","slug":"后序遍历","link":"#后序遍历","children":[]},{"level":3,"title":"DFS相对于BFS的优势","slug":"dfs相对于bfs的优势","link":"#dfs相对于bfs的优势","children":[]}],"git":{"createdTime":1674813807000,"updatedTime":1674833653000,"contributors":[{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":2}]},"readingTime":{"minutes":0.85,"words":256},"localizedDate":"January 27, 2023","filePathRelative":"cs/algo/basic/search/DFS.md","excerpt":"<h1> DFS</h1>\\n<h3> DFS基础</h3>\\n<p>栈搜索</p>\\n<p>运行时栈：栈里的是仍在运行的</p>\\n<p>入栈：函数开始运行</p>\\n<p>出栈：函数运行结束</p>\\n<h3> DFS步骤</h3>\\n<ol>\\n<li>\\n<p>出栈（即函数被调用了）</p>\\n</li>\\n<li>\\n<p>捕捉：全局变量捕捉target值</p>\\n<p>出队的时候进行目标点的捕捉，如果是目标点就返回，不再继续扩展</p>\\n</li>\\n<li>\\n<p>扩展</p>\\n</li>\\n<li>\\n<p>入栈</p>\\n</li>\\n</ol>\\n<h3> 先序遍历</h3>\\n<p>从已知点开始出发</p>\\n","autoDesc":true}`);export{e as data};
