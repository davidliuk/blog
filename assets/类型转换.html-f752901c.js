import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as i,c as t,e as d,d as a}from"./app-9107e99b.js";const r={},c=a(`<h1 id="类型转换-type-casting" tabindex="-1"><a class="header-anchor" href="#类型转换-type-casting" aria-hidden="true">#</a> 类型转换 Type Casting</h1><p>类型系统通过各种机制和特性，如类型提升、泛型、自动装箱/拆箱、方法重载和重写等，确保了类型在操作中的一致性和兼容性。这些都是Java作为一种强类型语言的重要特征。</p><h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h2><h3 id="自动类型转换" tabindex="-1"><a class="header-anchor" href="#自动类型转换" aria-hidden="true">#</a> 自动类型转换</h3><p>Widening</p><p>自动类型转换是指：数字表示范围小的数据类型可以自动转换成范围大的数据类型。</p><h3 id="强制类型转换" tabindex="-1"><a class="header-anchor" href="#强制类型转换" aria-hidden="true">#</a> 强制类型转换</h3><p>强制类型转换我们再清楚不过了，即强制显示的把一个数据类型转换为另外一种数据类型。</p><p>如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>short s = 199;
int i = s;// 199

double d = 10.24;
long ll = (long) d;// 10

int a = 30;
char c = (char) a;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上的转换结果都在我们的预期之内，属于正常的转换和丢失精度的情况，下面的例子就一样属于数据溢出的情况。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>int ii = 300;
byte b = (byte)ii;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>300 已经超出了 byte 类型表示的范围，所以会转换成一个毫无意义的数字（溢出的位直接丢掉）。</p><p>精度丢失</p><h3 id="类型提升" tabindex="-1"><a class="header-anchor" href="#类型提升" aria-hidden="true">#</a> 类型提升</h3><p>数据类型按精度大小排序为：</p>`,16),l=a(`<p>类型提升：在多种不同数据类型的表达式中，类型会自动向范围表示大的值的数据类型提升。</p><p>把上面的溢出的例子再改下。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    
<span class="token keyword">long</span> l <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token comment">// 无需类型转换</span>
<span class="token keyword">float</span> f <span class="token operator">=</span> l<span class="token punctuation">;</span>  <span class="token comment">// long 自动提升为 float</span>

<span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> ni <span class="token operator">=</span> b<span class="token punctuation">;</span>   <span class="token comment">// byte 自动提升为 int</span>

<span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> chi <span class="token operator">=</span> ch<span class="token punctuation">;</span> <span class="token comment">// char 自动提升为 int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们把精度（容量）大的数据类型赋值给精度（容量）小的数据类型，就会报错，反之则自动转换。</p><h2 id="转型-casting" tabindex="-1"><a class="header-anchor" href="#转型-casting" aria-hidden="true">#</a> 转型 Casting</h2><h3 id="向上转型" tabindex="-1"><a class="header-anchor" href="#向上转型" aria-hidden="true">#</a> 向上转型</h3><p>谢谢</p><h3 id="向下转型" tabindex="-1"><a class="header-anchor" href="#向下转型" aria-hidden="true">#</a> 向下转型</h3><p>谢谢</p><h2 id="类型对齐" tabindex="-1"><a class="header-anchor" href="#类型对齐" aria-hidden="true">#</a> 类型对齐</h2>`,10);function o(p,h){const n=s("Mermaid");return i(),t("div",null,[c,d(n,{id:"mermaid-44",code:"eJxLL0osyFDwCbLmUgCC5IzEIgVdXTuFzLwSiEhSZUkqWKQ4I78IKgZmoioDMsACOfl56RAREAsslJaTnwhVBWaCBVPyS5NyUq25AImRIl4="}),l])}const m=e(r,[["render",o],["__file","类型转换.html.vue"]]);export{m as default};
