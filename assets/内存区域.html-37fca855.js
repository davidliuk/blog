import{_ as a,V as e,W as r,Z as h}from"./framework-e5d7a6b2.js";const d={},i=h('<h1 id="内存区域" tabindex="-1"><a class="header-anchor" href="#内存区域" aria-hidden="true">#</a> 内存区域</h1><h2 id="线程独占" tabindex="-1"><a class="header-anchor" href="#线程独占" aria-hidden="true">#</a> 线程独占</h2><h3 id="程序计数器" tabindex="-1"><a class="header-anchor" href="#程序计数器" aria-hidden="true">#</a> 程序计数器</h3><p>程序计数器( ProgramCounterRegister )是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。在 Java 虚拟机的概念模型里[1]，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p><h3 id="java-虚拟机栈" tabindex="-1"><a class="header-anchor" href="#java-虚拟机栈" aria-hidden="true">#</a> Java 虚拟机栈</h3><p>Java 虚拟机栈( JavaVirtualMachineStack )也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是 Java 方法执行的线程内存模型:每个方法被执行的时候， Java 虚拟机都会同步创建一个栈帧<a href="StackFrame">1</a>用于存储局部变量表、操作数栈、动态连接、方法出口等信息。每一个方法被调用直至执行完毕的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</p><p>经常有人把 Java 内存区域笼统地划分为堆内存( Heap )和栈内存( Stack )，这种划分方式直接继承自传统的 C 、 C ++程序的内存布局结构，在 Java 语言里就显得有些粗糙了，实际的内存区域划分要比这更复杂。不过这种划分方式的流行也间接说明了程序员最关注的、与对象内存分配关系最密切的区域是“堆”和“栈”两块。其中，“堆”在稍后笔者会专门讲述，而“栈”通常就是指这里讲的虚拟机栈，或者更多的情况下只是指虚拟机栈中局部变量表部分。</p><p>局部变量表存放了编译期可知的各种 Java 虚拟机基本数据类型( boolean 、 byte 、 char 、 short 、 int 、 float 、 long 、 double )、对象引用( reference 类型，它并不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或者其他与此对象相关的位置)和 returnAddress 类型(指向了一条字节码指令的地址)。</p><p>这些数据类型在局部变量表中的存储空间以局部变量槽( Slot )来表示，其中 64 位长度的 long 和 double 类型的数据会占用两个变量槽，其余的数据类型只占用一个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在栈帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。请读者注意，这里说的“大小”是指变量槽的数量，虚拟机真正使用多大的内存空间(譬如按照 1 个变量槽占用 32 个比特、64 个比特，或者更多)来实现一个变量槽，这是完全由具体的虚拟机实现自行决定的事情。</p><h3 id="本地方法栈" tabindex="-1"><a class="header-anchor" href="#本地方法栈" aria-hidden="true">#</a> 本地方法栈</h3><h2 id="线程共享" tabindex="-1"><a class="header-anchor" href="#线程共享" aria-hidden="true">#</a> 线程共享</h2><h3 id="java-堆" tabindex="-1"><a class="header-anchor" href="#java-堆" aria-hidden="true">#</a> Java 堆</h3><h3 id="方法区" tabindex="-1"><a class="header-anchor" href="#方法区" aria-hidden="true">#</a> 方法区</h3><h4 id="运行时常量池" tabindex="-1"><a class="header-anchor" href="#运行时常量池" aria-hidden="true">#</a> 运行时常量池</h4><h4 id="类加载信息" tabindex="-1"><a class="header-anchor" href="#类加载信息" aria-hidden="true">#</a> 类加载信息</h4><h4 id="元数据" tabindex="-1"><a class="header-anchor" href="#元数据" aria-hidden="true">#</a> 元数据</h4>',16),n=[i];function t(c,s){return e(),r("div",null,n)}const l=a(d,[["render",t],["__file","内存区域.html.vue"]]);export{l as default};
