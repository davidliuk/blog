import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as p,o as l}from"./app-UiaY2OnX.js";const i={};function o(r,n){return l(),t("div",null,n[0]||(n[0]=[p('<h1 id="排序" tabindex="-1"><a class="header-anchor" href="#排序"><span>排序</span></a></h1><p>快速排序、归并排序</p><h2 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类</span></a></h2><p>按时间复杂度分类</p><ul><li><p>O(n)</p><p>如，基数排序、桶排序、计数排序</p></li><li><p>O(nlogn)</p><p>如，快速排序、归并排序、堆排序</p></li><li><p>O(n2)</p><p>如，插入排序、简单选择排序、简单希尔排序</p></li><li><p>其他</p><p>优化希尔排序可以达到O(n^7/6)但是仍然没有Onlogn优秀，故一般不采纳</p></li></ul><p>按排序方式分类</p><ul><li><p>基于交换类</p><p>效率的上限就是Onlogn</p></li><li><p>非交换类</p><p>上限可以是On</p></li></ul><p>按稳定性分类</p><ul><li><p>稳定排序</p><p>如，归并排序、桶排序</p></li><li><p>非稳定排序</p><p>如，快速排序、堆排序</p></li></ul><h2 id="术语" tabindex="-1"><a class="header-anchor" href="#术语"><span>术语</span></a></h2><ul><li><strong>稳定</strong>：如果 A 原本在 B 前面，而 A=B，排序之后 A 仍然在 B 的前面。</li><li><strong>不稳定</strong>：如果 A 原本在 B 的前面，而 A=B，排序之后 A 可能会出现在 B 的后面。</li><li><strong>内排序</strong>：所有排序操作都在内存中完成。</li><li><strong>外排序</strong>：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行。</li><li><strong>时间复杂度</strong>： 定性描述一个算法执行所耗费的时间。</li><li><strong>空间复杂度</strong>：定性描述一个算法执行所需内存的大小。</li></ul><p>三种partition</p><p><a href="https://wenku.baidu.com/view/2cc7720e4873f242336c1eb91a37f111f1850db1.html?_wkts_=1675070336179&amp;bdQuery=%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8FLomoto" target="_blank" rel="noopener noreferrer">https://wenku.baidu.com/view/2cc7720e4873f242336c1eb91a37f111f1850db1.html?_wkts_=1675070336179&amp;bdQuery=快速排序Lomoto</a></p><p><a href="https://blog.csdn.net/qq_42902997/article/details/115773598" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq_42902997/article/details/115773598</a></p><p>三路快排：</p><p>&lt;, =, &gt; 三路，优化重复元素多的情况</p>',16)]))}const c=e(i,[["render",o],["__file","index.html.vue"]]),d=JSON.parse(`{"path":"/algo/summary/structure/linear/sort/","title":"排序","lang":"en-US","frontmatter":{"description":"排序 快速排序、归并排序 分类 按时间复杂度分类 O(n) 如，基数排序、桶排序、计数排序 O(nlogn) 如，快速排序、归并排序、堆排序 O(n2) 如，插入排序、简单选择排序、简单希尔排序 其他 优化希尔排序可以达到O(n^7/6)但是仍然没有Onlogn优秀，故一般不采纳 按排序方式分类 基于交换类 效率的上限就是Onlogn 非交换类 上限可...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/algo/summary/structure/linear/sort/"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"排序"}],["meta",{"property":"og:description","content":"排序 快速排序、归并排序 分类 按时间复杂度分类 O(n) 如，基数排序、桶排序、计数排序 O(nlogn) 如，快速排序、归并排序、堆排序 O(n2) 如，插入排序、简单选择排序、简单希尔排序 其他 优化希尔排序可以达到O(n^7/6)但是仍然没有Onlogn优秀，故一般不采纳 按排序方式分类 基于交换类 效率的上限就是Onlogn 非交换类 上限可..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-22T03:05:37.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-22T03:05:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"排序\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-22T03:05:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":2,"title":"分类","slug":"分类","link":"#分类","children":[]},{"level":2,"title":"术语","slug":"术语","link":"#术语","children":[]}],"git":{"createdTime":1732244737000,"updatedTime":1732244737000,"contributors":[{"name":"David Liu","email":"liudawei@seas.upenn.edu","commits":1}]},"readingTime":{"minutes":1.15,"words":345},"filePathRelative":"algo/summary/structure/linear/sort/README.md","localizedDate":"November 22, 2024","excerpt":"\\n<p>快速排序、归并排序</p>\\n<h2>分类</h2>\\n<p>按时间复杂度分类</p>\\n<ul>\\n<li>\\n<p>O(n)</p>\\n<p>如，基数排序、桶排序、计数排序</p>\\n</li>\\n<li>\\n<p>O(nlogn)</p>\\n<p>如，快速排序、归并排序、堆排序</p>\\n</li>\\n<li>\\n<p>O(n2)</p>\\n<p>如，插入排序、简单选择排序、简单希尔排序</p>\\n</li>\\n<li>\\n<p>其他</p>\\n<p>优化希尔排序可以达到O(n^7/6)但是仍然没有Onlogn优秀，故一般不采纳</p>\\n</li>\\n</ul>\\n<p>按排序方式分类</p>\\n<ul>\\n<li>\\n<p>基于交换类</p>\\n<p>效率的上限就是Onlogn</p>\\n</li>\\n<li>\\n<p>非交换类</p>\\n<p>上限可以是On</p>\\n</li>\\n</ul>","autoDesc":true}`);export{c as comp,d as data};
