import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,f as p}from"./app.133d30c8.js";const t={},e=p(`<p>记忆化搜索复杂度分析</p><p>多少种组合*每层耗费</p><p>记忆化搜索 = 分治 + hashmap</p><p>会变化的参数放在hashmap里</p><p>函数的限制：</p><ol><li><p>要有返回值（DC）</p><p>和Cache很像</p></li><li><p>函数的结果，只与输入的参数有关，与其他信息无关</p><p>叫做pure function（类似前端的纯函数，与其他全局变量无关）</p></li></ol><p>重复计算</p><p>记忆化搜索 = 动态规划</p><p>（只是说是用搜索的方式实现的DP）</p><h3 id="博弈问题非常适合记忆化搜索" tabindex="-1"><a class="header-anchor" href="#博弈问题非常适合记忆化搜索" aria-hidden="true">#</a> 博弈问题非常适合记忆化搜索</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">memoSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> memo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>memo<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> memo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">memoSearch</span><span class="token punctuation">(</span>n <span class="token operator">-</span> i<span class="token punctuation">,</span> memo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            memo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题：会栈溢出</p><p>如果时间复杂度和递归深度都是On级别时，会栈溢出</p><p>如果时间复杂度On2、递归深度都是On级别时，就不会</p><p>记忆化搜索的缺点：不适合解决时间复杂度On的DP问题，有栈溢出的风险</p><p>记忆化搜索，模式简单，就在搜索上加几行代码</p><p>循环DP需要考虑循环先后顺序的问题</p>`,17),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","22. 记忆化搜索.html.vue"]]);export{r as default};
