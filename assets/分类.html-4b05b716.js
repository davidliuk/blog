const e=JSON.parse(`{"key":"v-bc8979da","path":"/se/lang/java/JUC/aqs/lock/%E5%88%86%E7%B1%BB.html","title":"锁的分类","lang":"en-US","frontmatter":{"description":"锁的分类 悲观锁：每次操作前都加锁 乐观锁：CAS或版本号机制 一般来说，MySQL中的行锁、表锁中，行锁会发生死锁，表锁不会 悲观锁通常多用于写比较多的情况下（多写场景），避免频繁失败和重试影响性能。 乐观锁通常多于写比较少的情况下（多读场景），避免频繁加锁影响性能，大大提升了系统的吞吐量。 乐观锁 代表：AtomicInteger，使用cas（Unsafe）来保证原子性 核心是：无需加锁，每次只有一个线程能够成功修改共享变量，其他失败的线程不需要停止，不断重复直至成功 由于线程一直运行，不需要阻塞，因此不涉及线程上下文切换 它需要多核cpu支持，且核心数不应超过cpu核数","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/java/JUC/aqs/lock/%E5%88%86%E7%B1%BB.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"锁的分类"}],["meta",{"property":"og:description","content":"锁的分类 悲观锁：每次操作前都加锁 乐观锁：CAS或版本号机制 一般来说，MySQL中的行锁、表锁中，行锁会发生死锁，表锁不会 悲观锁通常多用于写比较多的情况下（多写场景），避免频繁失败和重试影响性能。 乐观锁通常多于写比较少的情况下（多读场景），避免频繁加锁影响性能，大大提升了系统的吞吐量。 乐观锁 代表：AtomicInteger，使用cas（Unsafe）来保证原子性 核心是：无需加锁，每次只有一个线程能够成功修改共享变量，其他失败的线程不需要停止，不断重复直至成功 由于线程一直运行，不需要阻塞，因此不涉及线程上下文切换 它需要多核cpu支持，且核心数不应超过cpu核数"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-03-29T11:46:59.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-03-29T11:46:59.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/se/lang/java/JUC/aqs/lock/%E5%88%86%E7%B1%BB.html"}]]},"headers":[{"level":2,"title":"乐观锁","slug":"乐观锁","link":"#乐观锁","children":[{"level":3,"title":"CAS 算法","slug":"cas-算法","link":"#cas-算法","children":[]}]},{"level":2,"title":"悲观锁","slug":"悲观锁","link":"#悲观锁","children":[{"level":3,"title":"synchronized","slug":"synchronized","link":"#synchronized","children":[]},{"level":3,"title":"ReentrantReadWriteLock","slug":"reentrantreadwritelock","link":"#reentrantreadwritelock","children":[]}]}],"git":{"createdTime":1679578424000,"updatedTime":1680090419000,"contributors":[{"name":"davidliuk","email":"l729641074@163.com","commits":2}]},"readingTime":{"minutes":8.91,"words":2672},"localizedDate":"March 23, 2023","filePathRelative":"se/lang/java/JUC/aqs/lock/分类.md","excerpt":"<h1> 锁的分类</h1>\\n<p>悲观锁：每次操作前都加锁</p>\\n<p>乐观锁：CAS或版本号机制</p>\\n<p>一般来说，MySQL中的行锁、表锁中，行锁会发生死锁，表锁不会</p>\\n<p><strong>悲观锁通常多用于写比较多的情况下（多写场景），避免频繁失败和重试影响性能。</strong></p>\\n<p><strong>乐观锁通常多于写比较少的情况下（多读场景），避免频繁加锁影响性能，大大提升了系统的吞吐量。</strong></p>\\n<h2> 乐观锁</h2>\\n<p>代表：AtomicInteger，使用cas（Unsafe）来保证原子性</p>\\n<ul>\\n<li>核心是：无需加锁，每次只有一个线程能够成功修改共享变量，其他失败的线程不需要停止，不断重复直至成功</li>\\n<li>由于线程一直运行，不需要阻塞，因此不涉及线程上下文切换</li>\\n<li>它需要多核cpu支持，且核心数不应超过cpu核数</li>\\n</ul>","autoDesc":true}`);export{e as data};
