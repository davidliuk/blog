import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as i,o as l}from"./app-CGXHKXsa.js";const n={};function p(o,a){return l(),t("div",null,a[0]||(a[0]=[i('<h1 id="线上问题排查" tabindex="-1"><a class="header-anchor" href="#线上问题排查"><span>线上问题排查</span></a></h1><h2 id="内存泄漏" tabindex="-1"><a class="header-anchor" href="#内存泄漏"><span>内存泄漏</span></a></h2><h2 id="cpu-过高-爆掉" tabindex="-1"><a class="header-anchor" href="#cpu-过高-爆掉"><span>CPU 过高/爆掉</span></a></h2><p>JVM 调优过程中，如果 CPU 爆掉了，可以通过以下步骤进行排查：</p><ol><li><p>使用 top 命令查看 CPU 占用率最高的进程，确定是哪个进程导致了 CPU 爆满。</p></li><li><p>使用 jstack 命令获取 Java 进程的线程堆栈信息，查看哪些线程正在运行，是否存在死循环、长时间等待等问题。</p></li><li><p>使用 jmap 命令获取 Java 进程的内存信息，查看堆内存使用情况、GC 情况等，是否存在内存泄漏等问题。</p></li><li><p>使用 jstat 命令获取 Java 进程的 GC 情况，查看 GC 频率、GC 时间等，是否存在频繁的 Full GC 等问题。</p></li><li><p>根据以上信息，确定问题所在，进行相应的优化和调整，例如优化代码、调整 JVM 参数、增加硬件资源等。</p></li></ol><p>总的来说，JVM 调优过程中，如果 CPU 爆掉了，需要通过多种手段进行排查，确定问题所在，从而进行相应的优化和调整。</p><p>jconsole 可以观察内存变化</p>',7)]))}const s=e(n,[["render",p],["__file","问题排查.html.vue"]]),d=JSON.parse(`{"path":"/se/lang/java/jvm/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5.html","title":"线上问题排查","lang":"en-US","frontmatter":{"description":"线上问题排查 内存泄漏 CPU 过高/爆掉 JVM 调优过程中，如果 CPU 爆掉了，可以通过以下步骤进行排查： 使用 top 命令查看 CPU 占用率最高的进程，确定是哪个进程导致了 CPU 爆满。 使用 jstack 命令获取 Java 进程的线程堆栈信息，查看哪些线程正在运行，是否存在死循环、长时间等待等问题。 使用 jmap 命令获取 Java...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/java/jvm/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"线上问题排查"}],["meta",{"property":"og:description","content":"线上问题排查 内存泄漏 CPU 过高/爆掉 JVM 调优过程中，如果 CPU 爆掉了，可以通过以下步骤进行排查： 使用 top 命令查看 CPU 占用率最高的进程，确定是哪个进程导致了 CPU 爆满。 使用 jstack 命令获取 Java 进程的线程堆栈信息，查看哪些线程正在运行，是否存在死循环、长时间等待等问题。 使用 jmap 命令获取 Java..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-05-08T07:35:02.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-08T07:35:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线上问题排查\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-08T07:35:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":2,"title":"内存泄漏","slug":"内存泄漏","link":"#内存泄漏","children":[]},{"level":2,"title":"CPU 过高/爆掉","slug":"cpu-过高-爆掉","link":"#cpu-过高-爆掉","children":[]}],"git":{"createdTime":1684318252000,"updatedTime":1715153702000,"contributors":[{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":2},{"name":"liudawei47","email":"liudawei47@jd.com","commits":1}]},"readingTime":{"minutes":0.95,"words":285},"filePathRelative":"se/lang/java/jvm/问题排查.md","localizedDate":"May 17, 2023","excerpt":"\\n<h2>内存泄漏</h2>\\n<h2>CPU 过高/爆掉</h2>\\n<p>JVM 调优过程中，如果 CPU 爆掉了，可以通过以下步骤进行排查：</p>\\n<ol>\\n<li>\\n<p>使用 top 命令查看 CPU 占用率最高的进程，确定是哪个进程导致了 CPU 爆满。</p>\\n</li>\\n<li>\\n<p>使用 jstack 命令获取 Java 进程的线程堆栈信息，查看哪些线程正在运行，是否存在死循环、长时间等待等问题。</p>\\n</li>\\n<li>\\n<p>使用 jmap 命令获取 Java 进程的内存信息，查看堆内存使用情况、GC 情况等，是否存在内存泄漏等问题。</p>\\n</li>\\n<li>\\n<p>使用 jstat 命令获取 Java 进程的 GC 情况，查看 GC 频率、GC 时间等，是否存在频繁的 Full GC 等问题。</p>\\n</li>\\n<li>\\n<p>根据以上信息，确定问题所在，进行相应的优化和调整，例如优化代码、调整 JVM 参数、增加硬件资源等。</p>\\n</li>\\n</ol>","autoDesc":true}`);export{s as comp,d as data};
