import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as p,o as t}from"./app-B3ooTv29.js";const o={};function l(r,e){return t(),n("div",null,e[0]||(e[0]=[p('<h1 id="设计原则" tabindex="-1"><a class="header-anchor" href="#设计原则"><span>设计原则</span></a></h1><p>SOLID</p><ul><li><p>S – Single responsibility principle</p><p>一个类应该有且只有一个去改变他的理由，这意味着一个类应该只有一项工作。</p></li><li><p>O – Open close principle</p><p>对象或实体应该对扩展开放，对修改封闭 (Open to extension, close to modification)。</p></li><li><p>L – Liskov substitution principle</p><p>任何一个子类或派生类应该可以替换它们的基类或父类</p></li><li><p>I – Interface segregation principle</p><p>不应该强迫一个类实现它用不上的接口</p></li><li><p>D – Dependency inversion principle</p><p>抽象不应该依赖于具体实现，具体实现应该依赖于抽象</p><p>High-level 的实体不应该依赖于 low-level 的实体</p></li></ul>',3)]))}const s=i(o,[["render",l],["__file","index.html.vue"]]),d=JSON.parse(`{"path":"/se/design/principal/","title":"设计原则","lang":"en-US","frontmatter":{"description":"设计原则 SOLID S – Single responsibility principle 一个类应该有且只有一个去改变他的理由，这意味着一个类应该只有一项工作。 O – Open close principle 对象或实体应该对扩展开放，对修改封闭 (Open to extension, close to modification)。 L – Li...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/design/principal/"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"设计原则"}],["meta",{"property":"og:description","content":"设计原则 SOLID S – Single responsibility principle 一个类应该有且只有一个去改变他的理由，这意味着一个类应该只有一项工作。 O – Open close principle 对象或实体应该对扩展开放，对修改封闭 (Open to extension, close to modification)。 L – Li..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-05-08T07:35:02.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-08T07:35:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计原则\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-08T07:35:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[],"git":{"createdTime":1693269904000,"updatedTime":1715153702000,"contributors":[{"name":"davidliu","email":"liudawei47@jd.com","commits":1},{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":0.54,"words":161},"filePathRelative":"se/design/principal/README.md","localizedDate":"August 29, 2023","excerpt":"\\n<p>SOLID</p>\\n<ul>\\n<li>\\n<p>S – Single responsibility principle</p>\\n<p>一个类应该有且只有一个去改变他的理由，这意味着一个类应该只有一项工作。</p>\\n</li>\\n<li>\\n<p>O – Open close principle</p>\\n<p>对象或实体应该对扩展开放，对修改封闭 (Open to extension, close to modification)。</p>\\n</li>\\n<li>\\n<p>L – Liskov substitution principle</p>\\n<p>任何一个子类或派生类应该可以替换它们的基类或父类</p>\\n</li>\\n<li>\\n<p>I – Interface segregation principle</p>\\n<p>不应该强迫一个类实现它用不上的接口</p>\\n</li>\\n<li>\\n<p>D – Dependency inversion principle</p>\\n<p>抽象不应该依赖于具体实现，具体实现应该依赖于抽象</p>\\n<p>High-level 的实体不应该依赖于 low-level 的实体</p>\\n</li>\\n</ul>","autoDesc":true}`);export{s as comp,d as data};
