const e=JSON.parse(`{"key":"v-98c3deba","path":"/se/lang/java/JUC/aqs/lock/%E5%AF%B9%E6%AF%94.html","title":"锁的对比","lang":"en-US","frontmatter":{"description":"锁的对比 Lock vs sychronized 语法层面 synchronized是关键字，源码在jvm中，用c++实现 Lock是接口，源码由jdk提供，用java语言实现 使用synchronized时，退出同步代码块锁会自动释放，而使用Lock时，需要手动调用unlock方法释放锁 synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API synchronized 是依赖于 JVM 实现的，前面我们也讲到了 虚拟机团队在 JDK1.6 为 synchronized 关键字进行了很多优化，但是这些优化都是在虚拟机层面实现的，并没有直接暴露给我们。","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/java/JUC/aqs/lock/%E5%AF%B9%E6%AF%94.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"锁的对比"}],["meta",{"property":"og:description","content":"锁的对比 Lock vs sychronized 语法层面 synchronized是关键字，源码在jvm中，用c++实现 Lock是接口，源码由jdk提供，用java语言实现 使用synchronized时，退出同步代码块锁会自动释放，而使用Lock时，需要手动调用unlock方法释放锁 synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API synchronized 是依赖于 JVM 实现的，前面我们也讲到了 虚拟机团队在 JDK1.6 为 synchronized 关键字进行了很多优化，但是这些优化都是在虚拟机层面实现的，并没有直接暴露给我们。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-03-29T11:46:59.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-03-29T11:46:59.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/se/lang/java/JUC/aqs/lock/%E5%AF%B9%E6%AF%94.html"}]]},"headers":[{"level":2,"title":"Lock vs sychronized","slug":"lock-vs-sychronized","link":"#lock-vs-sychronized","children":[{"level":3,"title":"语法层面","slug":"语法层面","link":"#语法层面","children":[]},{"level":3,"title":"功能层面","slug":"功能层面","link":"#功能层面","children":[]},{"level":3,"title":"性能层面","slug":"性能层面","link":"#性能层面","children":[]}]}],"git":{"createdTime":1679578424000,"updatedTime":1680090419000,"contributors":[{"name":"davidliuk","email":"l729641074@163.com","commits":2}]},"readingTime":{"minutes":2.42,"words":727},"localizedDate":"March 23, 2023","filePathRelative":"se/lang/java/JUC/aqs/lock/对比.md","excerpt":"<h1> 锁的对比</h1>\\n<h2> Lock vs sychronized</h2>\\n<h3> 语法层面</h3>\\n<ul>\\n<li>synchronized是关键字，源码在jvm中，用c++实现</li>\\n<li>Lock是接口，源码由jdk提供，用java语言实现</li>\\n<li>使用synchronized时，退出同步代码块锁会自动释放，而使用Lock时，需要手动调用unlock方法释放锁</li>\\n</ul>\\n<h4> synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API</h4>\\n<p><code>synchronized</code> 是依赖于 JVM 实现的，前面我们也讲到了 虚拟机团队在 JDK1.6 为 <code>synchronized</code> 关键字进行了很多优化，但是这些优化都是在虚拟机层面实现的，并没有直接暴露给我们。</p>","autoDesc":true}`);export{e as data};
