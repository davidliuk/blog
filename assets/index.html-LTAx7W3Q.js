import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as t,o as p}from"./app-CrF8c6p-.js";const l={};function s(o,e){return p(),n("div",null,e[0]||(e[0]=[t('<h1 id="design" tabindex="-1"><a class="header-anchor" href="#design"><span>Design</span></a></h1><p>Design Category</p><ul><li>Object-Oriented Design (OOD)</li><li>System Design (SD)</li></ul><p>Design Method</p><ul><li>Design Principles</li><li>Design Pattern</li></ul><h2 id="设计原则" tabindex="-1"><a class="header-anchor" href="#设计原则"><span>设计原则</span></a></h2><p>SOLID</p><ul><li><p>S – Single responsibility principle (SRP)</p><p>一个类应该有且只有一个去改变他的理由，这意味着一个类应该只有一项工作。</p></li><li><p>O – Open close principle (OCP)</p><p>对象或实体应该对扩展开放，对修改封闭 (Open to extension, close to modification)。</p></li><li><p>L – Liskov substitution principle (LSP)</p><p>任何一个子类或派生类应该可以替换它们的基类或父类</p></li><li><p>I – Interface segregation principle (ISP)</p><p>不应该强迫一个类实现它用不上的接口</p></li><li><p>D – Dependency inversion principle (DIP)</p><p>抽象不应该依赖于具体实现，具体实现应该依赖于抽象</p><p>High-level 的实体不应该依赖于 low-level 的实体</p></li></ul>',8)]))}const c=i(l,[["render",s],["__file","index.html.vue"]]),g=JSON.parse(`{"path":"/se/design/","title":"Design","lang":"en-US","frontmatter":{"description":"Design Design Category Object-Oriented Design (OOD) System Design (SD) Design Method Design Principles Design Pattern 设计原则 SOLID S – Single responsibility principle (SRP) 一个类应该有...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/design/"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"Design"}],["meta",{"property":"og:description","content":"Design Design Category Object-Oriented Design (OOD) System Design (SD) Design Method Design Principles Design Pattern 设计原则 SOLID S – Single responsibility principle (SRP) 一个类应该有..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-09T18:37:53.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-09T18:37:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Design\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-09T18:37:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":2,"title":"设计原则","slug":"设计原则","link":"#设计原则","children":[]}],"git":{"createdTime":1693269904000,"updatedTime":1731177473000,"contributors":[{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro-3.local","commits":1}]},"readingTime":{"minutes":0.61,"words":182},"filePathRelative":"se/design/README.md","localizedDate":"August 29, 2023","excerpt":"\\n<p>Design Category</p>\\n<ul>\\n<li>Object-Oriented Design (OOD)</li>\\n<li>System Design (SD)</li>\\n</ul>\\n<p>Design Method</p>\\n<ul>\\n<li>Design Principles</li>\\n<li>Design Pattern</li>\\n</ul>\\n<h2>设计原则</h2>\\n<p>SOLID</p>\\n<ul>\\n<li>\\n<p>S – Single responsibility principle (SRP)</p>\\n<p>一个类应该有且只有一个去改变他的理由，这意味着一个类应该只有一项工作。</p>\\n</li>\\n<li>\\n<p>O – Open close principle (OCP)</p>\\n<p>对象或实体应该对扩展开放，对修改封闭 (Open to extension, close to modification)。</p>\\n</li>\\n<li>\\n<p>L – Liskov substitution principle (LSP)</p>\\n<p>任何一个子类或派生类应该可以替换它们的基类或父类</p>\\n</li>\\n<li>\\n<p>I – Interface segregation principle (ISP)</p>\\n<p>不应该强迫一个类实现它用不上的接口</p>\\n</li>\\n<li>\\n<p>D – Dependency inversion principle (DIP)</p>\\n<p>抽象不应该依赖于具体实现，具体实现应该依赖于抽象</p>\\n<p>High-level 的实体不应该依赖于 low-level 的实体</p>\\n</li>\\n</ul>","autoDesc":true}`);export{c as comp,g as data};
