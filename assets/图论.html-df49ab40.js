const e=JSON.parse(`{"key":"v-575873f4","path":"/cs/algo/faq/%E5%9B%BE%E8%AE%BA.html","title":"图论","lang":"en-US","frontmatter":{"description":"图论 图可以先生成好再遍历，也可以边遍历边生成（推荐变遍历边生成） dfs时有的时候需要记录parent/from防止出现平凡环/走回头路 编号：图是一个抽象的结构，一定要为图中每一个节点赋值一个唯一的编号。 一般来说，题目上给的节点是按照数组给的有一个默认编号 0到n-1或 1 到 n 没有的情况下，需要用哈希表来记录元素到编号，如合并账户这一题 在我们开始实际执行深度优先搜索之前，让我们快速地向自己确保，邻接表 是这个问题的最佳图形表示。另外两个选项是 邻接矩阵 或 链表表示。","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/cs/algo/faq/%E5%9B%BE%E8%AE%BA.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"图论"}],["meta",{"property":"og:description","content":"图论 图可以先生成好再遍历，也可以边遍历边生成（推荐变遍历边生成） dfs时有的时候需要记录parent/from防止出现平凡环/走回头路 编号：图是一个抽象的结构，一定要为图中每一个节点赋值一个唯一的编号。 一般来说，题目上给的节点是按照数组给的有一个默认编号 0到n-1或 1 到 n 没有的情况下，需要用哈希表来记录元素到编号，如合并账户这一题 在我们开始实际执行深度优先搜索之前，让我们快速地向自己确保，邻接表 是这个问题的最佳图形表示。另外两个选项是 邻接矩阵 或 链表表示。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-12-27T14:41:52.000Z"}],["meta",{"property":"article:author","content":"David Liu"}],["meta",{"property":"article:modified_time","content":"2023-12-27T14:41:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"图论\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-27T14:41:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":2,"title":"图的存储/表示","slug":"图的存储-表示","link":"#图的存储-表示","children":[{"level":3,"title":"树","slug":"树","link":"#树","children":[]}]},{"level":2,"title":"图的遍历","slug":"图的遍历","link":"#图的遍历","children":[{"level":3,"title":"Tarjan 算法","slug":"tarjan-算法","link":"#tarjan-算法","children":[]}]},{"level":2,"title":"环","slug":"环","link":"#环","children":[]},{"level":2,"title":"连通分量","slug":"连通分量","link":"#连通分量","children":[]},{"level":2,"title":"最短路","slug":"最短路","link":"#最短路","children":[{"level":3,"title":"Dijkstra","slug":"dijkstra","link":"#dijkstra","children":[]}]}],"git":{"createdTime":1703688112000,"updatedTime":1703688112000,"contributors":[{"name":"davidliu","email":"liudawei47@jd.com","commits":1}]},"readingTime":{"minutes":6.29,"words":1887},"filePathRelative":"cs/algo/faq/图论.md","localizedDate":"December 27, 2023","excerpt":"<h1> 图论</h1>\\n<p>图可以先生成好再遍历，也可以边遍历边生成（推荐变遍历边生成）</p>\\n<p>dfs时有的时候需要记录parent/from防止出现平凡环/走回头路</p>\\n<p><strong>编号</strong>：图是一个抽象的结构，一定要为图中每一个节点赋值一个唯一的编号。</p>\\n<ul>\\n<li>一般来说，题目上给的节点是按照数组给的有一个默认编号 0到n-1或 1 到 n</li>\\n<li>没有的情况下，需要用哈希表来记录元素到编号，如合并账户这一题</li>\\n</ul>\\n<p>在我们开始实际执行深度优先搜索之前，让我们快速地向自己确保，邻接表 是这个问题的最佳图形表示。另外两个选项是 邻接矩阵 或 链表表示。</p>","autoDesc":true}`);export{e as data};
