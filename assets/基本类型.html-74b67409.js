import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as t,d as s}from"./app-9107e99b.js";const e={},d=s(`<h1 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a> 基本数据类型</h1><p>Java 中有 8 种基本数据类型，分别为：</p><ul><li>6 种数字类型： <ul><li>4 种整数型：<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code></li><li>2 种浮点型：<code>float</code>、<code>double</code></li></ul></li><li>1 种字符类型：<code>char</code></li><li>1 种布尔型：<code>boolean</code></li></ul><p>间的大小如下：</p><table><thead><tr><th>基本类型</th><th>位数</th><th>字节</th><th>默认值</th></tr></thead><tbody><tr><td>int</td><td>32</td><td>4</td><td>0</td></tr><tr><td>short</td><td>16</td><td>2</td><td>0</td></tr><tr><td>long</td><td>64</td><td>8</td><td>0L</td></tr><tr><td>byte</td><td>8</td><td>1</td><td>0</td></tr><tr><td>char</td><td>16</td><td>2</td><td>&#39;u0000&#39;</td></tr><tr><td>float</td><td>32</td><td>4</td><td>0f</td></tr><tr><td>double</td><td>64</td><td>8</td><td>0d</td></tr><tr><td>boolean</td><td>1</td><td></td><td>false</td></tr></tbody></table><h2 id="数字精度" tabindex="-1"><a class="header-anchor" href="#数字精度" aria-hidden="true">#</a> 数字精度</h2><h3 id="浮点数丢精" tabindex="-1"><a class="header-anchor" href="#浮点数丢精" aria-hidden="true">#</a> 浮点数丢精</h3><h3 id="大整数存储" tabindex="-1"><a class="header-anchor" href="#大整数存储" aria-hidden="true">#</a> 大整数存储</h3><h2 id="包装类型" tabindex="-1"><a class="header-anchor" href="#包装类型" aria-hidden="true">#</a> 包装类型</h2><h3 id="常量池技术-缓存机制" tabindex="-1"><a class="header-anchor" href="#常量池技术-缓存机制" aria-hidden="true">#</a> 常量池技术/缓存机制</h3><p><code>Byte</code>,<code>Short</code>,<code>Integer</code>,<code>Long</code> 这 4 种包装类默认创建了数值 <strong>[-128，127]</strong> 的相应类型的缓存数据，</p><p><code>Character</code> 创建了数值在 <strong>[0,127]</strong> 范围的缓存数据</p><p><code>Boolean</code> 包装了 TRUE 和 FALSE 两个对象。直接返回 <code>True</code> or <code>False</code>。</p><p>两种浮点数类型的包装类 Float,Double 并没有实现常量池技术。</p><p>记住：<strong>所有整型包装类对象之间值的比较，全部使用 equals 方法比较</strong>。</p><h3 id="自动拆装箱" tabindex="-1"><a class="header-anchor" href="#自动拆装箱" aria-hidden="true">#</a> 自动拆装箱</h3><p>从字节码中，我们发现装箱其实就是调用了 包装类的<code>valueOf()</code>方法，拆箱其实就是调用了 <code>xxxValue()</code>方法。</p><p>由于可能是null对象，所以自动拆箱的时候可能产生NPE。</p><p><strong>三目运算符使用不当会导致诡异的 NPE 异常</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">Boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型对齐" tabindex="-1"><a class="header-anchor" href="#类型对齐" aria-hidden="true">#</a> 类型对齐</h3>`,21),o=[d];function c(l,r){return n(),t("div",null,o)}const u=a(e,[["render",c],["__file","基本类型.html.vue"]]);export{u as default};
