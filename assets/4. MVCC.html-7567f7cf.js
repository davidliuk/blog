import{_ as a,V as e,W as r,a0 as h}from"./framework-705b829b.js";const d={},i=h('<h1 id="mvcc" tabindex="-1"><a class="header-anchor" href="#mvcc" aria-hidden="true">#</a> MVCC</h1><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><h3 id="当前读" tabindex="-1"><a class="header-anchor" href="#当前读" aria-hidden="true">#</a> 当前读</h3><p>普通的select语句。读取的是记录的最新版本，读取时，要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。</p><h3 id="快照读" tabindex="-1"><a class="header-anchor" href="#快照读" aria-hidden="true">#</a> 快照读</h3><p>非阻塞的</p><h3 id="mvcc-1" tabindex="-1"><a class="header-anchor" href="#mvcc-1" aria-hidden="true">#</a> MVCC</h3><p>全称Multi-Version Concurrency Control版本开发控制。指维护一个数据的多个版本，使得读三操作没有冲突、 MySQL实现MVCC提供了一个非阻塞读功能。MVCC的具体实现，还需要依赖于数据库记录中的三个隐式字段、undo loq日志、readView。</p><h2 id="隐藏字段" tabindex="-1"><a class="header-anchor" href="#隐藏字段" aria-hidden="true">#</a> 隐藏字段</h2><h2 id="undo-log-版本链" tabindex="-1"><a class="header-anchor" href="#undo-log-版本链" aria-hidden="true">#</a> undo log 版本链</h2><h2 id="readview-介绍" tabindex="-1"><a class="header-anchor" href="#readview-介绍" aria-hidden="true">#</a> readview 介绍</h2><h2 id="原理分析" tabindex="-1"><a class="header-anchor" href="#原理分析" aria-hidden="true">#</a> 原理分析</h2><h3 id="rc级别" tabindex="-1"><a class="header-anchor" href="#rc级别" aria-hidden="true">#</a> RC级别</h3><h3 id="rr级别" tabindex="-1"><a class="header-anchor" href="#rr级别" aria-hidden="true">#</a> RR级别</h3>',14),n=[i];function c(t,o){return e(),r("div",null,n)}const l=a(d,[["render",c],["__file","4. MVCC.html.vue"]]);export{l as default};
