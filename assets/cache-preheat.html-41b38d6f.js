const e=JSON.parse(`{"key":"v-37911de3","path":"/cs/database/redis/practice/cache-preheat.html","title":"缓存预热","lang":"en-US","frontmatter":{"description":"缓存预热 问题分析 冷启动：服务刚刚启动时，Rdis中并没有缓存，如果所有商品数据都在第一次查询时添加缓存，可能会给数据库带来较大压力。 缓存预热：在实际开发中，我们可以利用大数据统计用户访问的热点数据，在项目启动时将这些热点数据提前查询并保存到Redis中。 我们数据量较少，可以在启动时将所有数据都放入缓存中。 数据量太大的话，无法将所有数据放入 redis 中：耗费时间过长或 redis 根本无法容纳下所有的数据； 需要根据当天的具体访问情况，实时统计出访问频率较高的热数据； 将访问频率较高的热数据写入 redis 中，肯定数据也比较多， 我们也得多个服务并行读取数据去写，并行的分布式缓存预热。","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/cs/database/redis/practice/cache-preheat.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"缓存预热"}],["meta",{"property":"og:description","content":"缓存预热 问题分析 冷启动：服务刚刚启动时，Rdis中并没有缓存，如果所有商品数据都在第一次查询时添加缓存，可能会给数据库带来较大压力。 缓存预热：在实际开发中，我们可以利用大数据统计用户访问的热点数据，在项目启动时将这些热点数据提前查询并保存到Redis中。 我们数据量较少，可以在启动时将所有数据都放入缓存中。 数据量太大的话，无法将所有数据放入 redis 中：耗费时间过长或 redis 根本无法容纳下所有的数据； 需要根据当天的具体访问情况，实时统计出访问频率较高的热数据； 将访问频率较高的热数据写入 redis 中，肯定数据也比较多， 我们也得多个服务并行读取数据去写，并行的分布式缓存预热。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-03-20T14:10:49.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-03-20T14:10:49.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/cs/database/redis/practice/cache-preheat.html"}]]},"headers":[{"level":3,"title":"问题分析","slug":"问题分析","link":"#问题分析","children":[]},{"level":3,"title":"实现","slug":"实现","link":"#实现","children":[]}],"git":{"createdTime":1679321449000,"updatedTime":1679321449000,"contributors":[{"name":"davidliuk","email":"l729641074@163.com","commits":1}]},"readingTime":{"minutes":0.85,"words":254},"localizedDate":"March 20, 2023","filePathRelative":"cs/database/redis/practice/cache-preheat.md","excerpt":"<h1> 缓存预热</h1>\\n<h3> 问题分析</h3>\\n<p>冷启动：服务刚刚启动时，Rdis中并没有缓存，如果所有商品数据都在第一次查询时添加缓存，可能会给数据库带来较大压力。</p>\\n<p>缓存预热：在实际开发中，我们可以利用大数据统计用户访问的热点数据，在项目启动时将这些热点数据提前查询并保存到Redis中。</p>\\n<p>我们数据量较少，可以在启动时将所有数据都放入缓存中。</p>\\n<ul>\\n<li>数据量太大的话，无法将所有数据放入 redis 中：耗费时间过长或 redis 根本无法容纳下所有的数据；</li>\\n<li>需要根据当天的具体访问情况，实时统计出访问频率较高的热数据；</li>\\n<li>将访问频率较高的热数据写入 redis 中，肯定数据也比较多， 我们也得多个服务并行读取数据去写，并行的分布式缓存预热。</li>\\n</ul>","autoDesc":true}`);export{e as data};
