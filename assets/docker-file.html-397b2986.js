const e=JSON.parse(`{"key":"v-d121411e","path":"/se/devops/docker/docker-file.html","title":"DockerFile","lang":"en-US","frontmatter":{"description":"DockerFile 分阶段构建 分阶段构建有以下几个好处： 减小镜像大小：通过分阶段构建，可以将构建阶段中产生的临时文件和构建工具从最终的产品镜像中剥离，从而减小镜像的大小。最终的产品镜像只包含运行应用程序所需的最小文件和依赖项。 加快构建速度：分阶段构建可以利用镜像缓存机制，只重新构建发生变化的阶段，从而加快整体构建过程的速度。如果代码没有发生变化，后续阶段可以直接使用之前构建阶段的缓存结果，避免重复构建不必要的部分。 增强安全性：通过分阶段构建，可以将构建工具和环境隔离开来，减少攻击面。构建阶段可以使用特定的基础镜像和工具，而产品镜像只包含运行应用程序所需的最小组件，减少了潜在的安全漏洞。 提高可维护性：分阶段构建使得构建过程更加模块化和可维护。每个阶段可以专注于特定的任务，使得 Dockerfile 更易于理解和维护。当需要修改某个特定的阶段时，只需要修改对应的阶段，而不会影响其他阶段。","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/devops/docker/docker-file.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"DockerFile"}],["meta",{"property":"og:description","content":"DockerFile 分阶段构建 分阶段构建有以下几个好处： 减小镜像大小：通过分阶段构建，可以将构建阶段中产生的临时文件和构建工具从最终的产品镜像中剥离，从而减小镜像的大小。最终的产品镜像只包含运行应用程序所需的最小文件和依赖项。 加快构建速度：分阶段构建可以利用镜像缓存机制，只重新构建发生变化的阶段，从而加快整体构建过程的速度。如果代码没有发生变化，后续阶段可以直接使用之前构建阶段的缓存结果，避免重复构建不必要的部分。 增强安全性：通过分阶段构建，可以将构建工具和环境隔离开来，减少攻击面。构建阶段可以使用特定的基础镜像和工具，而产品镜像只包含运行应用程序所需的最小组件，减少了潜在的安全漏洞。 提高可维护性：分阶段构建使得构建过程更加模块化和可维护。每个阶段可以专注于特定的任务，使得 Dockerfile 更易于理解和维护。当需要修改某个特定的阶段时，只需要修改对应的阶段，而不会影响其他阶段。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-09-14T10:15:52.000Z"}],["meta",{"property":"article:author","content":"David Liu"}],["meta",{"property":"article:modified_time","content":"2023-09-14T10:15:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DockerFile\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-14T10:15:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":2,"title":"分阶段构建","slug":"分阶段构建","link":"#分阶段构建","children":[]},{"level":2,"title":"技巧","slug":"技巧","link":"#技巧","children":[]}],"git":{"createdTime":1691656101000,"updatedTime":1694686552000,"contributors":[{"name":"liudawei47","email":"liudawei47@jd.com","commits":3}]},"readingTime":{"minutes":3.76,"words":1127},"filePathRelative":"se/devops/docker/docker-file.md","localizedDate":"August 10, 2023","excerpt":"<h1> DockerFile</h1>\\n<h2> 分阶段构建</h2>\\n<p>分阶段构建有以下几个好处：</p>\\n<ol>\\n<li>\\n<p><strong>减小镜像大小</strong>：通过分阶段构建，可以将构建阶段中产生的临时文件和构建工具从最终的产品镜像中剥离，从而减小镜像的大小。最终的产品镜像只包含运行应用程序所需的最小文件和依赖项。</p>\\n</li>\\n<li>\\n<p><strong>加快构建速度</strong>：分阶段构建可以利用镜像缓存机制，只重新构建发生变化的阶段，从而加快整体构建过程的速度。如果代码没有发生变化，后续阶段可以直接使用之前构建阶段的缓存结果，避免重复构建不必要的部分。</p>\\n</li>\\n<li>\\n<p><strong>增强安全性</strong>：通过分阶段构建，可以将构建工具和环境隔离开来，减少攻击面。构建阶段可以使用特定的基础镜像和工具，而产品镜像只包含运行应用程序所需的最小组件，减少了潜在的安全漏洞。</p>\\n</li>\\n<li>\\n<p><strong>提高可维护性</strong>：分阶段构建使得构建过程更加模块化和可维护。每个阶段可以专注于特定的任务，使得 Dockerfile 更易于理解和维护。当需要修改某个特定的阶段时，只需要修改对应的阶段，而不会影响其他阶段。</p>\\n</li>\\n</ol>","autoDesc":true}`);export{e as data};
