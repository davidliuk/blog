import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as a,o as n}from"./app-ktFCNIob.js";const t={};function l(h,i){return n(),e("div",null,i[0]||(i[0]=[a(`<h1 id="guice" tabindex="-1"><a class="header-anchor" href="#guice"><span>Guice</span></a></h1><p>Guice，发音为“juice”，是由Google赞助并开源的一款轻量级的依赖注入（Dependency Injection，简称DI）框架。依赖注入是一种设计模式，它允许我们解耦代码，提高组件的可测试性和可维护性。Guice是针对Java平台的，它要求至少使用Java 6进行开发。Guice通过提供一种声明式的方式来管理对象的生命周期和它们之间的依赖关系，从而简化了复杂应用的构建。</p><p>在Guice中，我们创建一个名为<code>Module</code>的类来定义依赖关系。在这个模块中，我们可以使用<code>@Provides</code>注解的方法来指定如何创建或获取一个依赖。这些方法通常会利用其他已经注入的依赖来构建对象。例如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyModule</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AbstractModule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> configure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 绑定接口到实现</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        bind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MyService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">to</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MyServiceImpl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Provides</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Singleton</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    DatabaseConnection</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> provideDatabaseConnection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> DatabaseConnection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;jdbc:mysql://localhost/mydb&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;username&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;password&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，<code>MyService</code>接口被绑定到<code>MyServiceImpl</code>实现，而<code>DatabaseConnection</code>实例则是通过<code>@Provides</code>注解的方法提供。<code>@Singleton</code>注解表明该实例在整个应用程序中只创建一次，确保了单例行为。</p><p>Guice提供了<code>Injector</code>接口，它是整个框架的核心。我们可以通过<code>Injector</code>来创建对象实例，Guice会自动处理依赖注入：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Injector</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> injector </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Guice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">createInjector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyModule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MyService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> myService </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> injector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MyService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>除了基本的绑定，Guice还支持多种高级特性，如：</p><ul><li>使用<code>@Inject</code>注解来声明依赖，Guice会自动将匹配的对象注入到构造函数、字段或方法参数中。</li><li>多个模块组合，通过<code>Guice.createInjector(Module1, Module2)</code>可以将多个模块的配置合并。</li><li>类型绑定，使用<code>bind(Key&lt;T&gt;.get(Class&lt;T&gt; type))</code>可以将类型绑定到Key，Key可以携带更多的元数据信息。</li><li>基于注解的绑定，<code>bindAnnotation</code>可以将特定注解与类或接口关联，这样带有该注解的类将使用特定的实现。</li><li>预绑定（Prebinding），允许在模块中预先创建对象，然后在需要时注入。</li><li>通过<code>@Named</code>注解实现更细粒度的绑定，可以为相同类型的多个实现提供不同的名字。</li></ul><p>Guice与Dagger都是流行的依赖注入框架，它们都致力于简化Java应用中的对象组装。Dagger相比Guice，更加强调编译时检查和静态类型安全，而Guice则更加轻量级，对代码侵入性较小。选择哪一个取决于项目的需求和团队的偏好。</p><p>Guice是一个强大而灵活的框架，它可以帮助开发者编写松散耦合、易于测试和扩展的代码。通过理解并熟练使用Guice，开发者可以提高代码的可维护性和可读性，减少手动管理对象实例的繁琐工作。</p>`,11)]))}const d=s(t,[["render",l],["__file","index.html.vue"]]),r=JSON.parse(`{"path":"/se/lang/java/framework/di/guice/","title":"Guice","lang":"en-US","frontmatter":{"description":"Guice Guice，发音为“juice”，是由Google赞助并开源的一款轻量级的依赖注入（Dependency Injection，简称DI）框架。依赖注入是一种设计模式，它允许我们解耦代码，提高组件的可测试性和可维护性。Guice是针对Java平台的，它要求至少使用Java 6进行开发。Guice通过提供一种声明式的方式来管理对象的生命周期和它...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/java/framework/di/guice/"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"Guice"}],["meta",{"property":"og:description","content":"Guice Guice，发音为“juice”，是由Google赞助并开源的一款轻量级的依赖注入（Dependency Injection，简称DI）框架。依赖注入是一种设计模式，它允许我们解耦代码，提高组件的可测试性和可维护性。Guice是针对Java平台的，它要求至少使用Java 6进行开发。Guice通过提供一种声明式的方式来管理对象的生命周期和它..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-09T18:37:53.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-09T18:37:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Guice\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-09T18:37:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[],"git":{"createdTime":1725612282000,"updatedTime":1731177473000,"contributors":[{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro-3.local","commits":1}]},"readingTime":{"minutes":2.42,"words":726},"filePathRelative":"se/lang/java/framework/di/guice/README.md","localizedDate":"September 6, 2024","excerpt":"\\n<p>Guice，发音为“juice”，是由Google赞助并开源的一款轻量级的依赖注入（Dependency Injection，简称DI）框架。依赖注入是一种设计模式，它允许我们解耦代码，提高组件的可测试性和可维护性。Guice是针对Java平台的，它要求至少使用Java 6进行开发。Guice通过提供一种声明式的方式来管理对象的生命周期和它们之间的依赖关系，从而简化了复杂应用的构建。</p>\\n<p>在Guice中，我们创建一个名为<code>Module</code>的类来定义依赖关系。在这个模块中，我们可以使用<code>@Provides</code>注解的方法来指定如何创建或获取一个依赖。这些方法通常会利用其他已经注入的依赖来构建对象。例如：</p>","autoDesc":true}`);export{d as comp,r as data};
