import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,d as a,o as r}from"./app-Cv-jMnVl.js";const o={};function e(l,t){return r(),i("div",null,t[0]||(t[0]=[a('<h1 id="programming-language" tabindex="-1"><a class="header-anchor" href="#programming-language"><span>Programming Language</span></a></h1><p>动态语言在<strong>运行时</strong>进行类型检查，而静态语言在<strong>编译时</strong>进行类型检查。</p><ul><li><strong>动态语言</strong>：Python、JavaScript、Ruby、PHP、Lua 等。</li><li><strong>静态语言</strong>：C、C++、Java、C#、Go、Rust、Swift、Kotlin、TypeScript、Haskell、Scala 等。</li></ul><hr><p>弱/强类型：会/不会发生隐式类型转换</p><ul><li>强类型：</li><li>弱类型：</li></ul><h3 id="动态语言" tabindex="-1"><a class="header-anchor" href="#动态语言"><span>动态语言</span></a></h3><p>动态语言（Dynamic Languages）在运行时确定变量类型，这让它们在某些情况下更灵活。常见的动态语言包括：</p><ol><li><strong>Python</strong>：支持动态类型，常用于数据科学、人工智能、Web 开发等领域。</li><li><strong>JavaScript</strong>：浏览器和服务器端的常用语言，支持动态类型，是 Web 开发的核心语言。</li><li><strong>Ruby</strong>：专注于开发者友好性，广泛用于 Web 开发，尤其是 Ruby on Rails 框架。</li><li><strong>PHP</strong>：Web 开发的流行语言，特别是在动态网站和服务器端脚本方面。</li><li><strong>Lua</strong>：轻量级、嵌入式的动态语言，常用于游戏脚本和嵌入式开发。</li><li><strong>Perl</strong>：适合文本处理和系统管理任务的语言，具有动态类型。</li><li><strong>Lisp / Clojure</strong>：函数式编程语言，允许动态类型，广泛用于 AI 和符号处理。</li><li><strong>R</strong>：专门用于统计计算和数据分析，具有动态类型。</li><li><strong>Smalltalk</strong>：面向对象编程语言，具有动态类型，是许多现代编程概念的先驱。</li></ol><h3 id="静态语言" tabindex="-1"><a class="header-anchor" href="#静态语言"><span>静态语言</span></a></h3><p>静态语言（Static Languages）在编译时进行类型检查，要求在代码中指定变量类型，从而可以在编译期间发现许多类型错误。这使得它们的运行效率通常更高，常见的静态语言包括：</p><ol><li><strong>C / C++</strong>：需要在编译时定义变量类型，主要用于系统编程和高性能应用。</li><li><strong>Java</strong>：面向对象语言，需要指定类型，常用于企业应用和 Android 开发。</li><li><strong>C#</strong>：静态类型语言，基于 .NET 平台，广泛用于企业级应用。</li><li><strong>Go</strong>：现代静态语言，设计用于高并发，适合后端开发和系统编程。</li><li><strong>Rust</strong>：系统级编程语言，强调内存安全和性能。</li><li><strong>Swift</strong>：Apple 推出的静态语言，主要用于 iOS 和 macOS 应用开发。</li><li><strong>Kotlin</strong>：静态类型语言，常用于 Android 开发。</li><li><strong>TypeScript</strong>：JavaScript 的超集，提供静态类型检查，适合大型 JavaScript 项目。</li><li><strong>Haskell</strong>：函数式静态语言，常用于研究和一些复杂的业务逻辑应用。</li><li><strong>Scala</strong>：静态类型语言，结合了面向对象和函数式编程特点，广泛用于分布式系统开发（如 Spark）。</li></ol><h3 id="中间语言" tabindex="-1"><a class="header-anchor" href="#中间语言"><span>中间语言</span></a></h3><p>有些语言既支持动态类型，也支持静态类型，通过提供类型注解或类型推断实现灵活性：</p><ol><li><strong>TypeScript</strong>：TypeScript 在编译阶段提供静态类型检查，但编译后生成 JavaScript，因此运行时仍是动态的。</li><li><strong>Python（类型注解）</strong>：Python 3 引入了类型注解，通过工具如 <code>mypy</code> 可以实现类似静态类型的检查，但本质上 Python 仍然是动态语言。</li><li><strong>Ruby（类型检查库）</strong>：Ruby 社区也有一些类型检查库（如 Sorbet），提供静态类型检查功能，但运行时仍是动态的。</li><li><strong>PHP（类型提示）</strong>：PHP 7+ 支持类型提示，并支持严格类型模式，接近静态类型检查，但仍然不是完全静态语言。</li></ol>',15)]))}const p=n(o,[["render",e],["__file","index.html.vue"]]),c=JSON.parse(`{"path":"/se/lang/","title":"Programming Language","lang":"en-US","frontmatter":{"description":"Programming Language 动态语言在运行时进行类型检查，而静态语言在编译时进行类型检查。 动态语言：Python、JavaScript、Ruby、PHP、Lua 等。 静态语言：C、C++、Java、C#、Go、Rust、Swift、Kotlin、TypeScript、Haskell、Scala 等。 弱/强类型：会/不会发生隐式类型转...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"Programming Language"}],["meta",{"property":"og:description","content":"Programming Language 动态语言在运行时进行类型检查，而静态语言在编译时进行类型检查。 动态语言：Python、JavaScript、Ruby、PHP、Lua 等。 静态语言：C、C++、Java、C#、Go、Rust、Swift、Kotlin、TypeScript、Haskell、Scala 等。 弱/强类型：会/不会发生隐式类型转..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-22T02:01:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-22T02:01:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Programming Language\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-22T02:01:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":3,"title":"动态语言","slug":"动态语言","link":"#动态语言","children":[]},{"level":3,"title":"静态语言","slug":"静态语言","link":"#静态语言","children":[]},{"level":3,"title":"中间语言","slug":"中间语言","link":"#中间语言","children":[]}],"git":{"createdTime":1732240892000,"updatedTime":1732240892000,"contributors":[{"name":"David Liu","email":"liudawei@seas.upenn.edu","commits":1}]},"readingTime":{"minutes":2.89,"words":868},"filePathRelative":"se/lang/README.md","localizedDate":"November 22, 2024","excerpt":"\\n<p>动态语言在<strong>运行时</strong>进行类型检查，而静态语言在<strong>编译时</strong>进行类型检查。</p>\\n<ul>\\n<li><strong>动态语言</strong>：Python、JavaScript、Ruby、PHP、Lua 等。</li>\\n<li><strong>静态语言</strong>：C、C++、Java、C#、Go、Rust、Swift、Kotlin、TypeScript、Haskell、Scala 等。</li>\\n</ul>\\n<hr>\\n<p>弱/强类型：会/不会发生隐式类型转换</p>\\n<ul>\\n<li>强类型：</li>\\n<li>弱类型：</li>\\n</ul>","autoDesc":true}`);export{p as comp,c as data};
