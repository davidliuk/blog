import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as l,o as a}from"./app-CGXHKXsa.js";const n={};function o(p,e){return a(),i("div",null,e[0]||(e[0]=[l('<h1 id="a-b-experiment" tabindex="-1"><a class="header-anchor" href="#a-b-experiment"><span>A/B Experiment</span></a></h1><p>分层实验</p><ul><li>分层实验：召回、粗排、精排、重排、用户界面、广告…(例如 GNN 召回通道属于召回层。)</li><li>同层互斥：GNN 实验占了召回层的 4 个桶，其他召回实验只能用剩余的 6 个桶</li><li>不同层正交：每一层独立随机对用户做分桶。每一层都可以独立用 100%的用户做实验。</li></ul><p>互斥 VS 正交</p><ul><li>如果所有实验都正交，则可以同时做无数组实验·</li><li>同类的策略（例如精排模型的两种结构）天然互斥，对于一个用户’只能用其中一种。</li><li>同类的策略（例如添加两条召回通道)效果会相互增强（1+1&gt;2)或相互抵消（1+1&lt;2)。互斥可以避免同类策略相互干扰。</li><li>不同类型的策略（例如添加召回通道、优化粗排模型）通常不会相互千扰（1+1=2)，可以作为正交的两层</li></ul><p>Holdout 机制</p><ul><li>每个实验（召回、粗排、精排、重排)独立汇报对业务指标的提升。</li><li>公司考察一个部门（比如推荐系统）在一段时间内对业务指标总体的提升。</li><li>取 10%的用户作为 holdout 桶，推荐系统使用剩余 90%的用户做实验’两者互斥。</li></ul><p>实验推全、实验反转</p>',8)]))}const c=t(n,[["render",o],["__file","abexp.html.vue"]]),d=JSON.parse(`{"path":"/ai/rec/abexp.html","title":"A/B Experiment","lang":"en-US","frontmatter":{"description":"A/B Experiment 分层实验 分层实验：召回、粗排、精排、重排、用户界面、广告…(例如 GNN 召回通道属于召回层。) 同层互斥：GNN 实验占了召回层的 4 个桶，其他召回实验只能用剩余的 6 个桶 不同层正交：每一层独立随机对用户做分桶。每一层都可以独立用 100%的用户做实验。 互斥 VS 正交 如果所有实验都正交，则可以同时做无数组实...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/ai/rec/abexp.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"A/B Experiment"}],["meta",{"property":"og:description","content":"A/B Experiment 分层实验 分层实验：召回、粗排、精排、重排、用户界面、广告…(例如 GNN 召回通道属于召回层。) 同层互斥：GNN 实验占了召回层的 4 个桶，其他召回实验只能用剩余的 6 个桶 不同层正交：每一层独立随机对用户做分桶。每一层都可以独立用 100%的用户做实验。 互斥 VS 正交 如果所有实验都正交，则可以同时做无数组实..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-10-26T05:16:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-26T05:16:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"A/B Experiment\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-26T05:16:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[],"git":{"createdTime":1755417148000,"updatedTime":1761455781000,"contributors":[{"name":"dawei.liu","email":"dawei.liu@bytedance.com","commits":2}]},"readingTime":{"minutes":1.13,"words":340},"filePathRelative":"ai/rec/abexp.md","localizedDate":"August 17, 2025","excerpt":"\\n<p>分层实验</p>\\n<ul>\\n<li>分层实验：召回、粗排、精排、重排、用户界面、广告…(例如 GNN 召回通道属于召回层。)</li>\\n<li>同层互斥：GNN 实验占了召回层的 4 个桶，其他召回实验只能用剩余的 6 个桶</li>\\n<li>不同层正交：每一层独立随机对用户做分桶。每一层都可以独立用 100%的用户做实验。</li>\\n</ul>\\n<p>互斥 VS 正交</p>\\n<ul>\\n<li>如果所有实验都正交，则可以同时做无数组实验·</li>\\n<li>同类的策略（例如精排模型的两种结构）天然互斥，对于一个用户’只能用其中一种。</li>\\n<li>同类的策略（例如添加两条召回通道)效果会相互增强（1+1&gt;2)或相互抵消（1+1&lt;2)。互斥可以避免同类策略相互干扰。</li>\\n<li>不同类型的策略（例如添加召回通道、优化粗排模型）通常不会相互千扰（1+1=2)，可以作为正交的两层</li>\\n</ul>","autoDesc":true}`);export{c as comp,d as data};
