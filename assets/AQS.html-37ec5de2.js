const e=JSON.parse(`{"key":"v-4f4311a3","path":"/se/lang/java/JUC/sync/AQS.html","title":"AQS","lang":"en-US","frontmatter":{"description":"AQS 底层原理 AQS 核心思想 如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。 如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是基于 CLH 锁 （Craig, Landin, and Hagersten locks） 实现的。 CLH 锁 CLH 锁是对自旋锁的一种改进，解决了自旋锁的两个缺点改进如下：","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/java/JUC/sync/AQS.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"AQS"}],["meta",{"property":"og:description","content":"AQS 底层原理 AQS 核心思想 如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。 如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是基于 CLH 锁 （Craig, Landin, and Hagersten locks） 实现的。 CLH 锁 CLH 锁是对自旋锁的一种改进，解决了自旋锁的两个缺点改进如下："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-08-21T10:17:45.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-08-21T10:17:45.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/se/lang/java/JUC/sync/AQS.html"}]]},"headers":[{"level":2,"title":"底层原理","slug":"底层原理","link":"#底层原理","children":[{"level":3,"title":"AQS 核心思想","slug":"aqs-核心思想","link":"#aqs-核心思想","children":[]},{"level":3,"title":"CLH 锁","slug":"clh-锁","link":"#clh-锁","children":[]},{"level":3,"title":"AQS 使用了模板方法模式","slug":"aqs-使用了模板方法模式","link":"#aqs-使用了模板方法模式","children":[]}]}],"git":{"createdTime":1684318252000,"updatedTime":1692613065000,"contributors":[{"name":"liudawei47","email":"liudawei47@jd.com","commits":1},{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":2.64,"words":792},"localizedDate":"May 17, 2023","filePathRelative":"se/lang/java/JUC/sync/AQS.md","excerpt":"<h1> AQS</h1>\\n<h2> 底层原理</h2>\\n<h3> AQS 核心思想</h3>\\n<ul>\\n<li>如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。</li>\\n<li>如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是基于 <strong>CLH 锁</strong> （Craig, Landin, and Hagersten locks） 实现的。</li>\\n</ul>\\n<h3> CLH 锁</h3>\\n<p>CLH 锁是对自旋锁的一种改进，解决了自旋锁的两个缺点改进如下：</p>","autoDesc":true}`);export{e as data};
