import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as n,c as r,a as i,b as t,e as d,d as p}from"./app-9107e99b.js";const o={},s=p(`<h1 id="设计规范" tabindex="-1"><a class="header-anchor" href="#设计规范" aria-hidden="true">#</a> 设计规范</h1><p>保证数据规范性</p><h2 id="模型设计规范" tabindex="-1"><a class="header-anchor" href="#模型设计规范" aria-hidden="true">#</a> 模型设计规范</h2><p>概念模型 -&gt; 逻辑模型 -&gt; 物理模型</p><p>将抽象需求沉淀为具体模型，完成数据建模。数据建模过程中须沉淀数据结构、数据流程图等模型定义与描述信息。其中数据流程图应完整反映数据在系统中的流动、处理与存储情况。</p><ul><li>概念模型 <ul><li>最高层次的数据模型</li><li>业务系统核心与边界</li><li>核心业务主体与主体间业务关系</li></ul></li><li>逻辑模型 <ul><li>概念模型进一步细化</li><li>业务规则概念模型具体化</li><li>至少遵循第三范式，描述实体属性关系</li></ul></li><li>物理模型 <ul><li>概念实体系统物理实现</li><li>列属性进行明确定义</li></ul></li></ul><h2 id="创建修改规范" tabindex="-1"><a class="header-anchor" href="#创建修改规范" aria-hidden="true">#</a> 创建修改规范</h2><h3 id="必备字段" tabindex="-1"><a class="header-anchor" href="#必备字段" aria-hidden="true">#</a> 必备字段</h3><ol><li>创建时间</li><li>更新时间</li><li>逻辑删除标志</li><li>测试数据标志</li></ol><h3 id="设计维护" tabindex="-1"><a class="header-anchor" href="#设计维护" aria-hidden="true">#</a> 设计维护</h3><ol><li><p>注释：表和字段必须有 COMMENT，注释信息应清晰易懂，禁止添加预留字段。</p></li><li><p>主键：物理主键和业务主键。</p><ol><li>物理主键必须使用整型、不允许重复、设置自增属性。</li><li>业务主键应有明确的业务含义，从业务层面反映数据记录的唯一性。</li></ol></li><li><p>枚举字段：</p><p>必须通过码表形式在数据库中进行独立存储和管理，保码表数据为最新状态。</p><p>码表结构至少包含枚举类型、枚举名称、枚举编码、枚举描述信息。同含义的枚举字段的枚举值及枚举描述应该统一数据标准，保持一致。</p></li><li><p>删除表/字段：</p></li><li><p>修改表/字段：</p></li><li><p>数据安全相关：</p></li></ol><p>MySQL 枚举类型</p><p>MySQL ENUM 的缺点</p><p>更改枚举成员需要使用 ALTER TABLE 语句重建整个表，这在资源和时间方面是昂贵的。</p><p>获取完整的枚举列表很复杂，因为需要访问 information_schema 数据库：</p><div class="language-SQL line-numbers-mode" data-ext="SQL"><pre class="language-SQL"><code>SELECT
column_type
FROM
information_schema.COLUMNS
WHERE
TABLE_NAME = &#39;tickets&#39;
AND COLUMN_NAME = &#39;priority&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>迁移到其他 RDBMS 可能是一个问题，因为 ENUM 不是 SQL 标准的，并且数据库系统不支持它。</li><li>向枚举列表添加更多属性是不可能的。假设您要为每个优先级添加服务协议，例如 High(24h)，Medium(1-2 天)，Low(1 周)，则不可以使用 ENUM 类型的。 在这种情况下，需要有一个单独的表来存储优先级列表，例如 priority(id，name，sort_order，description)，并且通过引用了 priority 表的 id 字段的 priority_id 来替换 tickets 表中的 priority 字段。</li><li>与查找表(priorities)相比，枚举列表不可重用。 例如，如果要创建一个名为 tasks 并且要重用优先级列表的新表，则是不可能的。</li></ul><h2 id="norm-范式" tabindex="-1"><a class="header-anchor" href="#norm-范式" aria-hidden="true">#</a> norm 范式</h2><p>数据库范式是一种规范化数据库设计的方法，它通过将数据分解成更小的、更规范化的表来减少数据冗余和提高数据一致性。常见的数据库范式有以下几种：</p><ol><li><p>第一范式（1NF）：确保每个表中的每个列都是原子的，即不可再分的。这可以通过将多值属性拆分成单值属性来实现。</p></li><li><p>第二范式（2NF）：确保每个表中的每个非主键列都<strong>完全依赖</strong>于主键。如果一个表中有多个主键，那么每个非主键列都应该依赖于所有主键。</p></li><li><p>第三范式（3NF）：确保每个表中的每个非主键列都<strong>不传递依赖</strong>于主键。如果一个非主键列依赖于另一个非主键列，那么应该将其拆分成一个单独的表。</p></li></ol><p>除了上述三种范式，还有更高级别的范式，如巴斯-科德范式（BCNF）和第四范式（4NF）。但是，过度规范化可能会导致性能下降，因此在设计数据库时需要权衡规范化和性能之间的关系。</p><p>BC 范式（BCNF）是 Boyce-Codd 范式的缩写，其定义是：在关系模式中每一个决定因素都包含候选键，也就是说，只要属性或属性组 A 能够决定任何一个属性 B，则 A 的子集中必须有候选键。BCNF 范式排除了任何属性(不光是非主属性，2NF 和 3NF 所限制的都是非主属性)对候选键的传递依赖与部分依赖。</p><h2 id="约束" tabindex="-1"><a class="header-anchor" href="#约束" aria-hidden="true">#</a> 约束</h2><h2 id="索引" tabindex="-1"><a class="header-anchor" href="#索引" aria-hidden="true">#</a> 索引</h2><ol><li>建表规范</li></ol><ul><li>数据库名、表名，全部使用小写字母,使用&quot;_&quot;下划线连接且长度小于 12,做到见名知意</li></ul><ol start="2"><li><p>建议使用 innodb 引擎,这也是 MySQL 的默认引擎</p></li><li><p>字段类型选择</p></li></ol><ul><li><p>建议所有的表都有一个自增 id ,可以经常作为主键</p></li><li><p>存储非负数用 unsigned,因为对于同样的字节数,存储范围更大</p></li><li><p>整型定义中不加长度,直接使用 int, 而不是 in(n).</p></li><li><p>字符集选择 utf-8</p></li><li><p>timestamp 和 datetime 都是精确到毫秒,优先选择 timestamp,因为前者只占用 4 个字节,而后者占用 8 个字节</p></li><li><p>如果可以,所有字段最好都用 not null, 因为 null 字段被索引,需要额外的 1 个字节;使索引丶索引统计丶值的比较变得更加复杂.如果是索引字段,一定要定义为 not null , null 值 可用 &#39;0&#39;来代替.</p></li></ul><ol start="4"><li>建立索引注意事项</li></ol><ul><li><p>索引名称必须使用小写</p></li><li><p>单张表的索引数量控制在 5 个以内,因为 innoDB 使用 b+tree(B+树结构)存储,在 update, delete, insert 时需要对 b+tree 进行调整,过多的索引会减慢更新的速度</p></li><li><p>唯一索引不和主键重复</p></li><li><p>经常作为 where 条件的字段最好添加索引</p></li></ul>`,30),c={href:"https://blog.csdn.net/weixin_50966947/article/details/126766449",target:"_blank",rel:"noopener noreferrer"};function h(u,m){const l=a("ExternalLinkIcon");return n(),r("div",null,[s,i("p",null,[i("a",c,[t("https://blog.csdn.net/weixin_50966947/article/details/126766449"),d(l)])])])}const N=e(o,[["render",h],["__file","设计规范.html.vue"]]);export{N as default};
