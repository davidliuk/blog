import{_ as e,V as a,W as i,Z as t}from"./framework-e5d7a6b2.js";const s={},l=t('<h1 id="tcp" tabindex="-1"><a class="header-anchor" href="#tcp" aria-hidden="true">#</a> TCP</h1><p>MTU: Maxitum Transmission Unit 最大传输单元 MSS: Maxitum Segment Size 最大分段大小 由于以太网EthernetII最大的数据帧是1518Bytes</p><p>标志位：</p><ul><li><p>SYN：建立链接</p></li><li><p>FIN：中止链接</p></li><li><p>ACK：确认32位确认序号有效。</p></li><li><p>RST：“复位”报文</p><ol><li>目的端口无监听。当连接请求到达时,目的端口没有进程正在监听，TCP会产生一个复位报文。（在UDP中，则产生一个ICMP端口不可达的信息）</li><li>异常终止链接。可以通过发送个复位报文段而不是FIN来中途释放一个连接，这种行为称为异常释放( abortive release)。</li></ol></li><li><p>URG：</p></li><li><p>PSH：</p><p>有点过时</p></li></ul><h2 id="连接管理" tabindex="-1"><a class="header-anchor" href="#连接管理" aria-hidden="true">#</a> 连接管理</h2><p>建立连接 - 三次握手</p><p><img src="https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/cs-basics/network/tcp-shakes-hands-three-times.png" alt="TCP 三次握手图解" loading="lazy"></p><p>断开连接 - 四次挥手</p><h2 id="流量控制" tabindex="-1"><a class="header-anchor" href="#流量控制" aria-hidden="true">#</a> 流量控制</h2><h2 id="拥塞控制" tabindex="-1"><a class="header-anchor" href="#拥塞控制" aria-hidden="true">#</a> 拥塞控制</h2>',10),r=[l];function n(h,c){return a(),i("div",null,r)}const d=e(s,[["render",n],["__file","TCP.html.vue"]]);export{d as default};
