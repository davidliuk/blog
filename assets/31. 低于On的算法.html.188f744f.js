import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,f as p}from"./app.4ed69784.js";const t={},e=p(`<p>快速幂Ologn</p><p>辗转相除法 Ologn</p><p>分解质因数 O√n （对称，成双成对出现）</p><p>分块检索法 O√n （可以找到次优解，最优解可能是logn的算法）</p><h3 id="快速幂" tabindex="-1"><a class="header-anchor" href="#快速幂" aria-hidden="true">#</a> 快速幂</h3><p>取模运算：+-*满足</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3978/截屏2022-08-10 16.34.51.png" alt="截屏2022-08-10 16.34.51" loading="lazy"></p><p>递归的写法，最不容易写错</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">fastPower</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">%</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">%</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">long</span> product <span class="token operator">=</span> <span class="token function">fastPower</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    product <span class="token operator">=</span> <span class="token punctuation">(</span>product <span class="token operator">*</span> product<span class="token punctuation">)</span> <span class="token operator">%</span> b<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        product <span class="token operator">=</span> <span class="token punctuation">(</span>product <span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token operator">%</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> product<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二进制的做法---非递归，比较巧妙</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">fastPower</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> tmp <span class="token operator">=</span> a<span class="token punctuation">;</span>
    
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">*</span> tmp<span class="token punctuation">)</span> <span class="token operator">%</span> b<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        tmp <span class="token operator">=</span> <span class="token punctuation">(</span>tmp <span class="token operator">*</span> tmp<span class="token punctuation">)</span> <span class="token operator">%</span> b<span class="token punctuation">;</span>
        n <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就是二进制转换</p><h3 id="分块检索" tabindex="-1"><a class="header-anchor" href="#分块检索" aria-hidden="true">#</a> 分块检索</h3><p>将长度为N的区间分成√N的大小的小区间</p><p>总共 √N 个小区间，每个小区间统计局部的数据</p><p>因此在这些区间中进行增删查改的效率是 O(VN)</p><p>链表不支持二分法（因为不支持下标访问）</p><p>线段树可以做（标准的做法）</p><p>On√range</p>`,19),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","31. 低于On的算法.html.vue"]]);export{k as default};
