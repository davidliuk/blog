const e=JSON.parse(`{"key":"v-23567452","path":"/cs/database/redis/practice/best/%E9%94%AE%E5%80%BC%E8%AE%BE%E8%AE%A1.html","title":"键值设计","lang":"en-US","frontmatter":{"description":"键值设计 优雅的key结构 Redis的Key虽然可以自定义，但最好遵循下面的几个最佳实践约定： 遵循基本格式：[业务名称]：[数据名]：[id] 长度不超过44字节 不包含特殊字符 例如：我们的登录业务，保存用户信息，其key是这样的： 优点： 可读性强 避免key冲突 方便管理 节省内存 key是string类型，底层编码包含：int、embstr和raw三种。 在小于44字节时，是embstr编码，采用连续内存空间，内存占用更小（减少内存碎片） （可用通过object encoding xxx查看编码方式）","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/cs/database/redis/practice/best/%E9%94%AE%E5%80%BC%E8%AE%BE%E8%AE%A1.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"键值设计"}],["meta",{"property":"og:description","content":"键值设计 优雅的key结构 Redis的Key虽然可以自定义，但最好遵循下面的几个最佳实践约定： 遵循基本格式：[业务名称]：[数据名]：[id] 长度不超过44字节 不包含特殊字符 例如：我们的登录业务，保存用户信息，其key是这样的： 优点： 可读性强 避免key冲突 方便管理 节省内存 key是string类型，底层编码包含：int、embstr和raw三种。 在小于44字节时，是embstr编码，采用连续内存空间，内存占用更小（减少内存碎片） （可用通过object encoding xxx查看编码方式）"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-03-23T13:33:44.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-03-23T13:33:44.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/cs/database/redis/practice/best/%E9%94%AE%E5%80%BC%E8%AE%BE%E8%AE%A1.html"}]]},"headers":[{"level":2,"title":"优雅的key结构","slug":"优雅的key结构","link":"#优雅的key结构","children":[]},{"level":2,"title":"Big Key","slug":"big-key","link":"#big-key","children":[{"level":3,"title":"内存占用","slug":"内存占用","link":"#内存占用","children":[]},{"level":3,"title":"危害","slug":"危害","link":"#危害","children":[]}]},{"level":2,"title":"恰当的数据类型","slug":"恰当的数据类型","link":"#恰当的数据类型","children":[{"level":3,"title":"存储一个对象","slug":"存储一个对象","link":"#存储一个对象","children":[]},{"level":3,"title":"存取大量键值对","slug":"存取大量键值对","link":"#存取大量键值对","children":[]}]}],"git":{"createdTime":1677504602000,"updatedTime":1679578424000,"contributors":[{"name":"davidliuk","email":"l729641074@163.com","commits":1},{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":1.7,"words":510},"localizedDate":"February 27, 2023","filePathRelative":"cs/database/redis/practice/best/键值设计.md","excerpt":"<h1> 键值设计</h1>\\n<h2> 优雅的key结构</h2>\\n<p>Redis的Key虽然可以自定义，但最好遵循下面的几个最佳实践约定：</p>\\n<ul>\\n<li>遵循基本格式：[业务名称]：[数据名]：[id]</li>\\n<li>长度不超过44字节</li>\\n<li>不包含特殊字符</li>\\n</ul>\\n<p>例如：我们的登录业务，保存用户信息，其key是这样的：</p>\\n<p>优点：</p>\\n<ul>\\n<li>\\n<p>可读性强</p>\\n</li>\\n<li>\\n<p>避免key冲突</p>\\n</li>\\n<li>\\n<p>方便管理</p>\\n</li>\\n<li>\\n<p>节省内存</p>\\n<p>key是string类型，底层编码包含：int、embstr和raw三种。</p>\\n<p>在小于44字节时，是embstr编码，采用连续内存空间，内存占用更小（减少内存碎片）</p>\\n<p>（可用通过<code>object encoding xxx</code>查看编码方式）</p>\\n</li>\\n</ul>","autoDesc":true}`);export{e as data};
