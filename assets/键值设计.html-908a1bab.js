import{_ as e,V as i,W as a,a0 as p}from"./framework-705b829b.js";const l={},d=p('<h1 id="键值设计" tabindex="-1"><a class="header-anchor" href="#键值设计" aria-hidden="true">#</a> 键值设计</h1><h2 id="优雅的key结构" tabindex="-1"><a class="header-anchor" href="#优雅的key结构" aria-hidden="true">#</a> 优雅的key结构</h2><p>Redis的Key虽然可以自定义，但最好遵循下面的几个最佳实践约定：</p><ul><li>遵循基本格式：[业务名称]：[数据名]：[id]</li><li>长度不超过44字节</li><li>不包含特殊字符</li></ul><p>例如：我们的登录业务，保存用户信息，其key是这样的：</p><p>优点：</p><ul><li><p>可读性强</p></li><li><p>避免key冲突</p></li><li><p>方便管理</p></li><li><p>节省内存</p><p>key是string类型，底层编码包含：int、embstr和raw三种。</p><p>在小于44字节时，是embstr编码，采用连续内存空间，内存占用更小（减少内存碎片）</p><p>（可用通过<code>object encoding xxx</code>查看编码方式）</p></li></ul><h2 id="big-key" tabindex="-1"><a class="header-anchor" href="#big-key" aria-hidden="true">#</a> Big Key</h2><h3 id="内存占用" tabindex="-1"><a class="header-anchor" href="#内存占用" aria-hidden="true">#</a> 内存占用</h3><p><code>memory usage xxx</code></p><p>这个实际不推荐使用，占用cpu高，但是求出来的是精确值，包括数据结构加在一起的内存占用。</p><p>推荐使用估算方法：</p><ul><li><code>strlen xxx</code>，查看这个元素值的字符串长度</li><li><code>llen</code>，查看集合元素数量</li></ul><h3 id="危害" tabindex="-1"><a class="header-anchor" href="#危害" aria-hidden="true">#</a> 危害</h3><ul><li><p>网络阻塞</p></li><li><p>数据倾斜</p></li><li><p>Redis阻塞</p><p>对元素较多的hash、list、zset等做运算会耗时较长，使主线程阻塞</p></li><li><p>CPU压力</p></li></ul><h2 id="恰当的数据类型" tabindex="-1"><a class="header-anchor" href="#恰当的数据类型" aria-hidden="true">#</a> 恰当的数据类型</h2><h3 id="存储一个对象" tabindex="-1"><a class="header-anchor" href="#存储一个对象" aria-hidden="true">#</a> 存储一个对象</h3><p>方式一：json字符串</p><p>优点：实现简单粗暴</p><p>缺点：数据耦合，不够灵活（改一个字段的值，就需要把整个json都修改掉）</p><p>方式二：字段打散</p><p>优点：可以灵活访问对象任意字段</p><p>缺点：</p><ol><li>占用空间大、（每存一个键值对，都需要有很多原数据，造成额外的内存占用）</li><li>没法做统一控制</li></ol><p>方式三：hash</p><p>优点：底层使用zipList,空间占用小，可以灵活访问对象的任意字段</p><p>缺点：代码相对复杂（不过只要有工具类就也好实现）</p><h3 id="存取大量键值对" tabindex="-1"><a class="header-anchor" href="#存取大量键值对" aria-hidden="true">#</a> 存取大量键值对</h3><p>如，存100万对field和value，field是自增的id</p><p>hash的entry数量超过500时，会使用哈希表而不是ZipList，内存占用较多。</p><p>可以分组打包，每500个一组</p>',31),h=[d];function r(t,n){return i(),a("div",null,h)}const c=e(l,[["render",r],["__file","键值设计.html.vue"]]);export{c as default};
