import{_ as l,V as i,W as p,a0 as a}from"./framework-705b829b.js";const e={},d=a('<h1 id="结构" tabindex="-1"><a class="header-anchor" href="#结构" aria-hidden="true">#</a> 结构</h1><p>数据结构的逻辑结构与存储结构的关系是抽象与具体的关系。</p><h2 id="逻辑结构" tabindex="-1"><a class="header-anchor" href="#逻辑结构" aria-hidden="true">#</a> 逻辑结构</h2><p>是指数据对象中数据元素之间的相互关系。</p><ul><li><p>集：记录</p><p>快速的判断一个点是否存在</p></li><li><p>线：有序</p><p>有序和混乱是相对的概念</p><p>有序可以做减治，混乱只能暴力FOR遍历</p></li><li><p>树：分类</p><p>边数=点数-1，因为根节点入度为0，其他节点入度为1.</p></li><li><p>图：依赖</p><p>DAG(Directed Acyclic Graph)</p><p>DAG，核心就是值传递</p><p>如果是环图，要引入单调收敛的状态变量来使节点加状态变量共同组成一个DAG</p></li></ul><h2 id="存储结构" tabindex="-1"><a class="header-anchor" href="#存储结构" aria-hidden="true">#</a> 存储结构</h2><p>又名物理结构，是指数据的逻辑结构在计算机中的存储形式。</p><ul><li>顺序存储</li><li>链式存储</li><li>散列存储或哈希存储</li></ul><h2 id="两要素" tabindex="-1"><a class="header-anchor" href="#两要素" aria-hidden="true">#</a> 两要素</h2><ul><li><p>节点</p></li><li><p>边</p><p>代表节点之间的关系，可以有向可以无向（无向边即两条相反的有向边）</p><p>可以表示节点之间值传递的关系</p></li></ul><h2 id="值传递" tabindex="-1"><a class="header-anchor" href="#值传递" aria-hidden="true">#</a> 值传递</h2><p>DAG，核心就是值传递</p><p>如果是环图，要引入单调收敛的状态变量来使节点加状态变量共同组成一个DAG</p><ol><li><p>DAG</p><ol><li>前端：数据响应式原理</li><li>后端： <ol><li>类、接口之间的继承、实现、依赖的关系</li><li>的依赖关系</li><li>观察者模式</li></ol></li><li>数据库：在进行增加、删除和更新操作时： <ol><li>索引更新</li><li>外键约束带来的级联删除</li></ol></li></ol></li><li><p>先序和后序</p></li></ol><ul><li>先序：已知点 -&gt; 未知点</li><li>后序：未知点 -&gt; 已知点</li></ul><ol start="3"><li><p>不设置单调收敛的变量会出现循环依赖（死锁），造成死循环。</p></li><li><p>优化：滚动数组优化，只需要记录dp_1, dp_2，来记录前两个节点的值，每次求解后滚动更新</p></li><li><p>n依赖于n-1, n-2两个节点的递推关系的问题：</p><p>递推公式如下：dp[n] = f(dp[n - 1], dp[n - 2])</p><p>其中f可以是任何二元函数，如求max, min, +, -, /, *等，如果f不是纯函数，还可以结合外部变量实现一些更加复杂问题的求解</p></li><li><p>np问题：</p><ul><li>排序类：n!，如博弈型DP</li><li>组合类：2^n，如背包问题、LIS等问题</li></ul></li></ol>',16),n=[d];function r(h,t){return i(),p("div",null,n)}const o=l(e,[["render",r],["__file","index.html.vue"]]);export{o as default};
