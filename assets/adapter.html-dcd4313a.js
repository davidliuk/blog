const e=JSON.parse(`{"key":"v-5ea5a494","path":"/se/design/pattern/adapter.html","title":"适配器","lang":"en-US","frontmatter":{"description":"适配器 适配器模式可以通过创建一个适配器类，该适配器类实现接口并提供默认实现，然后已有的实现类可以继承适配器类而不是直接实现接口。这样，已有的实现类不需要修改，而只需要在需要覆盖新方法的实现类中实现新方法。 教程","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/design/pattern/adapter.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"适配器"}],["meta",{"property":"og:description","content":"适配器 适配器模式可以通过创建一个适配器类，该适配器类实现接口并提供默认实现，然后已有的实现类可以继承适配器类而不是直接实现接口。这样，已有的实现类不需要修改，而只需要在需要覆盖新方法的实现类中实现新方法。 教程"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-01-08T03:06:14.000Z"}],["meta",{"property":"article:author","content":"David Liu"}],["meta",{"property":"article:modified_time","content":"2024-01-08T03:06:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"适配器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-08T03:06:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[],"git":{"createdTime":1704683174000,"updatedTime":1704683174000,"contributors":[{"name":"davidliu","email":"liudawei47@jd.com","commits":1}]},"readingTime":{"minutes":0.34,"words":102},"filePathRelative":"se/design/pattern/adapter.md","localizedDate":"January 8, 2024","excerpt":"<h1> 适配器</h1>\\n<p>适配器模式可以通过创建一个适配器类，该适配器类实现接口并提供默认实现，然后已有的实现类可以继承适配器类而不是直接实现接口。这样，已有的实现类不需要修改，而只需要在需要覆盖新方法的实现类中实现新方法。</p>\\n<p><a href=\\"https://juejin.cn/post/7313418992310976549?utm_source=gold_browser_extension\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">教程</a></p>\\n","autoDesc":true}`);export{e as data};
