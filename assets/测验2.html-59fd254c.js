import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as e,c as l,e as c,d as n,a as s,b as o}from"./app-9107e99b.js";const i={},u=n('<h1 id="测验2" tabindex="-1"><a class="header-anchor" href="#测验2" aria-hidden="true">#</a> 测验2</h1><p><img src="https://cdn.jsdelivr.net/gh/davidliuk/images@master/blog/image-20230411093414663.png" alt="image-20230411093414663" loading="lazy"></p><h3 id="选择题" tabindex="-1"><a class="header-anchor" href="#选择题" aria-hidden="true">#</a> 选择题</h3><h3 id="论述题" tabindex="-1"><a class="header-anchor" href="#论述题" aria-hidden="true">#</a> 论述题</h3><blockquote><p>从访问控制的角度可将区块链分成几类,分别是什么?并对比各类。</p></blockquote><p>从访问控制的角度，我们常把区块链分为公有链、联盟链和私有链：</p><ul><li>公有链(Public Blockchain)，是指所有人都可以参与的区块链，比如Bitcoin、EOS、Ethereum。</li><li>联盟链(Consortium Blockchair)是指只有特定组织或个人可以参与的区块链，比如联合银行间清算系统（UBS）联盟链、Fabric、R3联盟。</li><li>私有链(Private Blockchain)是指只有特定组织或个人可以参与的区块链，比如Multichain、Monax。</li></ul><p>公链和联盟链都是基于共识机制来实现访问控制的，而私链则是基于身份认证来实现访问控制的。公链和联盟链都是去中心化的，而私链则类似于中心化的。</p><p>公开区块链是完全开放的，任何人都可以参与其中，故公开区块链的安全性和可靠性可能存在风险。联盟区块链需要授权才能加入，这意味着它具有更高的安全性和效率。</p><p>公链和联盟链都具有开放性和透明性，而私链则具有保密性和隐私性。公链和联盟链都具有高度安全性，而私链则需要更严格的身份验证和授权。</p><p>在实际应用中，如上三种类型的区块链都有各自适用的场景，可以根据需求进行选择，以满足不同的安全性、隐私性、透明性的需求。</p><p>总体来说，公链适用于需要高度安全性、开放性和透明性的场景；联盟链适用于需要高度安全性、开放性、透明性和一定程度上保密性和隐私性的场景；私链适用于需要更高安全性、保密性和隐私性的场景。</p><p>三种区块链之间的主要区别在于其访问控制模型。公开区块链是完全开放的，任何人都可以参与其中，这使得公开区块链的安全性和可靠性受到挑战。联盟区块链需要授权才能加入，这意味着它具有更高的安全性和效率。而私有区块链则需要更严格的身份验证和授权，以确保仅有授权的用户才能访问和执行交易。在实际应用中，不同类型的区块链可以根据需要进行选择，以满足不同的安全和隐私需求。</p><p>从访问控制的角度，可以将区块链分为以下三类：</p><p>公开区块链(Public Blockchain)：公开区块链是一种完全开放的区块链，任何人都可以参与并验证交易，且所有交易数据都是公开可见的。公开区块链通常没有中心化的管理机构，参与者可以匿名地参与，但是需要解决如何防止恶意节点攻击的问题。比如比特币和以太坊的主网就是公开区块链。</p><p>联盟区块链(Consortium Blockchair):联盟区块链是由多个组织共同维护的区块链网络。这些组织可以是政府机构、企业、银行等，都需要被邀请才能参与到该网络中。联盟区块链具有更高的安全性和效率，因为节点都是由可信任的实体控制的，且只有授权的节点才验证交易。Hyperledger Fabric和R3 Cordai都是联盟区块链平台。</p><p>私有区块链(Private Blockchain):私有区块链是由单一组织或个人维护的区块链网络，参与者需要获得授权才能参与交易和验证。私有区块链可以提供更高的隐私性和安全性，但缺乏去中心化和公开透明的特点。私有区块链通常用于企业内部的管理和数据共享。例如，JP Morgan Chase的Quorum就是一种基于以太坊的私有区块链平台。</p><p>三种区块链之间的主要区别在于其访问控制模型。公开区块链是完全开放的，任何人都可以参与其中，这使得公开区块链的安全性和可靠性受到挑战。联盟区块链需要授权才能加入，这意味着它具有更高的安全性和效率。而私有区块链则需要更严格的身份验证和授权，以确保仅有授权的用户才能访问和执行交易。在实际应用中，不同类型的区块链可以根据需要进行选择，以满足不同的安全和隐私需求。</p><blockquote><p>Bitcoin中交易的Script脚本验证的原理，并举例两种交易验证类型。</p></blockquote><p>Bitcoin中的Script是一种用于验证交易的脚本语言。每个交易都包含输入和输出，输入需要经过验证才能使用，而输出需要满足一定的条件才能被花费。 其中脚本验证的原理是，比特币交易中的输入和输出都包含一个脚本，该脚本是用比特币脚本语言编写的。当一个交易被广播到比特币网络时，每个节点都会验证这个交易是否合法。验证过程需要计算签名脚本和公钥脚本。</p><p>举例两种交易验证类型：</p><ul><li>Pay-to-Public-Key-Hash(P2PKH)：在这种类型的交易中，输出脚本直接给出了收款人的公钥哈希值，输入脚本提供了用私钥对整个交易的签名，最后通过OP_CHECKSIG验证。对于一个P2PKH的交易，支出地址的公钥脚本是如下格式： OP_DUP_OP_HASH160 &lt;PubkeyHash&gt; OP_EQUALVERIFY OP_CHECKSIG。其中，PubkeyHash是支出地址的公钥的哈希值。签名脚本是由发送者提供的，它包含了发送者的签名和公钥。验证过程就是将签名脚本和公钥脚本合并后执行，如果执行结果为真，则说明这个交易是合法的。</li><li>Pay-to-Script-Hash(P2SH)：P2SH允许用户将一个脚本哈希值作为锁定脚本，而不是直接使用脚本。这使得锁定脚本更加灵活，并且可以支持更多类型的交易验证。P2SH交易需要提供一个解锁脚本，该脚本满足哈希值对应的原始脚本中的条件。如果解锁脚本成功地验证了原始脚本，则该交易被认为是有效的。</li></ul><blockquote><p>比特币的发币是有上限的，请陈述原因并给出计算过程第一个四年美挖出一块奖励50btc,每四年减半。[已知四年可生成210000区块]</p></blockquote><p>比特币的发币有上限的原因：</p><ul><li>目的上：通过限制比特币的供应量来保特比特币的价值稳定，避免通货彭胀。</li><li>原理上：由于比特币挖出区块的奖励每四年减半，根据该无穷级数的性质，最终产出会收敛到一个定值。</li></ul><p>根据比特币协议规定，每四年减半一次（即210000个区块），比特币的挖矿奖励就会减半。第一个四年，每个挖出区块的矿工可以获得50个比特币的奖励，第二个四年（即210000个区块)，每区块奖励减半为25个比特币，经过第三个四年，每区块奖励减半为12.5个比特币，以此类推，直到每区块奖励的比特币数趋近于0。</p><p>发行总量计算方法如下：</p>',27),r=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"210000"),s("mo",null,"×"),s("mn",null,"50"),s("mo",null,"×"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",null,"+"),s("mfrac",null,[s("mn",null,"1"),s("mn",null,"2")]),s("mo",null,"+"),s("mfrac",null,[s("mn",null,"1"),s("msup",null,[s("mn",null,"2"),s("mn",null,"2")])]),s("mo",null,"+"),s("mfrac",null,[s("mn",null,"1"),s("msup",null,[s("mn",null,"2"),s("mn",null,"3")])]),s("mo",null,"+"),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mn",null,"210000"),s("mo",null,"×"),s("mn",null,"50"),s("mo",null,"×"),s("mfrac",null,[s("mn",null,"1"),s("mrow",null,[s("mn",null,"1"),s("mo",null,"−"),s("mfrac",null,[s("mn",null,"1"),s("mn",null,"2")])])]),s("mo",null,"="),s("mn",null,"21000000")]),s("annotation",{encoding:"application/x-tex"},"210000\\times50\\times(1+\\frac{1}{2}+\\frac{1}{2^2}+\\frac{1}{2^3}+...)=210000\\times50\\times\\frac{1}{1-\\frac{1}{2}}=21000000")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"210000"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"50"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.1901em","vertical-align":"-0.345em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8451em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.345em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.1901em","vertical-align":"-0.345em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8451em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7463em"}},[s("span",{style:{top:"-2.786em","margin-right":"0.0714em"}},[s("span",{class:"pstrut",style:{height:"2.5em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])])])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.345em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.1901em","vertical-align":"-0.345em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8451em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7463em"}},[s("span",{style:{top:"-2.786em","margin-right":"0.0714em"}},[s("span",{class:"pstrut",style:{height:"2.5em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mtight"},"3")])])])])])])])])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.345em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"..."),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"210000"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"50"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.4869em","vertical-align":"-0.6418em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8451em"}},[s("span",{style:{top:"-2.599em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1"),s("span",{class:"mbin mtight"},"−"),s("span",{class:"mord mtight"},[s("span",{class:"mopen nulldelimiter sizing reset-size3 size6"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8443em"}},[s("span",{style:{top:"-2.656em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{style:{top:"-3.2255em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line mtight",style:{"border-bottom-width":"0.049em"}})]),s("span",{style:{top:"-3.384em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.344em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter sizing reset-size3 size6"})])])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6418em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"21000000")])])])],-1),k=n('<p>故比特币的总发行量为约2100万枚。</p><blockquote><p>给定集合A={8, 10, 2, 4, 9，13, 12,1}, 首先构建Merkle tree，并证明元素5不属于集合A，给出关键路径（证据）。</p></blockquote><p>首先，将集合元素进行排序得：1 2 4 8 9 10 12 13，再对元素和树中节点做映射：n0对应15、n1对应14，以此类推，构建Merkle tree如下图（见附件中图）</p><img src="https://cdn.jsdelivr.net/gh/davidliuk/images@master/blog/截屏2023-04-11 11.12.11.png" alt="截屏2023-04-11 11.12.11" style="zoom:25%;"><p>要证明元素5不属于集合A，即需要证明4和8存在于集合A，且在4和8相邻。</p><ol><li><p>在树中，4存在的证据如下：{12, 7, 2}这三个节点，转化为根据每次除2的余数得到二进制数101</p></li><li><p>在树中，8存在的证据如下：{13, 7, 2}这三个节点，转化为根据每次除2的余数得到二进制数100</p></li><li><p>1，2已经分别证出4和8存在，又因为他们路径对应的二进制数101和100相差1，故可以证明他们两个数相邻。</p></li></ol><p>综上，根据1，2，3三点可以证出5不存在于集合A。</p><h3 id="考点1" tabindex="-1"><a class="header-anchor" href="#考点1" aria-hidden="true">#</a> 考点1</h3><p>给定一个集合，让构建一个merkle tree，试证明3属于这个集合</p><p>Eg.</p>',10),m=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"A"),s("mo",null,"="),s("mo",{stretchy:"false"},"{"),s("mn",null,"3"),s("mo",{separator:"true"},","),s("mn",null,"9"),s("mo",{separator:"true"},","),s("mn",null,"6"),s("mo",{separator:"true"},","),s("mn",null,"8"),s("mo",{separator:"true"},","),s("mn",null,"5"),s("mo",{separator:"true"},","),s("mn",null,"10"),s("mo",{separator:"true"},","),s("mn",null,"2"),s("mo",{separator:"true"},","),s("mn",null,"13"),s("mo",{stretchy:"false"},"}")]),s("annotation",{encoding:"application/x-tex"},"A=\\{3,9,6,8,5,10,2,13\\}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal"},"A"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"{"),s("span",{class:"mord"},"3"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"9"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"6"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"8"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"5"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"10"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"13"),s("span",{class:"mclose"},"}")])])])],-1),d=s("p",null,[o("构建一棵merkle tree，试证明"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"3"),s("mo",null,"∈"),s("mi",null,"A")]),s("annotation",{encoding:"application/x-tex"},"3\\in A")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6835em","vertical-align":"-0.0391em"}}),s("span",{class:"mord"},"3"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"∈"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal"},"A")])])])],-1),v=s("p",null,"（试证者有整棵树的信息，验证者只有根节点的hash值）",-1),h=s("p",null,"这个树怎么用数组存，完全二叉树",-1),g=s("p",null,"节点",-1),y=n(`<p>x, 从1开始记录</p><p>左右儿子：2x, 2x+1</p><p>要找兄弟的话，根据奇偶性来判断</p><p>The response is from the web search results.</p><p>满二叉树是一种特殊的二叉树，它的每一层的结点数都达到最大值，也就是说，深度为k的满二叉树有 (2^k)-1个结点¹。满二叉树可以用数组来存储，因为它没有空缺的结点。数组存储满二叉树的方法是：将根节点存放在下标为1的位置，然后按照从上到下、从左到右的顺序依次存放其他结点。这样，对于任意一个下标为i的结点，它的左子节点在下标为2i的位置，它的右子节点在下标为2i+1的位置，它的父节点在下标为i/2（向下取整）的位置。</p><p>余数0证据找左子树，余数1证据找右子树</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">MerkleTree</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> merkle<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">MerkleTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleMerkleTree</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Node</span> left<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Node</span> right<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> left<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Node</span> right<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Node</span> root<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SimpleMerkleTree</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Function</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> hashFunction<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> values<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Must specify at least one value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> currentLevel <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>hashFunction<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>hash <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span> currentLevel<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> nextLevel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> nodeIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> nodeIndex <span class="token operator">&lt;</span> currentLevel<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> nodeIndex <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">final</span> <span class="token class-name">Node</span> firstNode <span class="token operator">=</span> currentLevel<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nodeIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>currentLevel<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">==</span> nodeIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    nextLevel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>firstNode<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> firstNode<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">final</span> <span class="token class-name">Node</span> secondNode <span class="token operator">=</span> currentLevel<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> nodeIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    nextLevel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
                            <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>
                                    firstNode<span class="token punctuation">,</span>
                                    secondNode<span class="token punctuation">,</span>
                                    hashFunction<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token function">concatenate</span><span class="token punctuation">(</span>firstNode<span class="token punctuation">.</span>value<span class="token punctuation">,</span> secondNode<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
                            <span class="token punctuation">)</span>
                    <span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            currentLevel <span class="token operator">=</span> nextLevel<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> currentLevel<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">concatenate</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> first<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> second<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> firstLength <span class="token operator">=</span> first<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> secondLength <span class="token operator">=</span> second<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> concatenated <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>firstLength <span class="token operator">+</span> secondLength<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> concatenated<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> firstLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>second<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> concatenated<span class="token punctuation">,</span> firstLength<span class="token punctuation">,</span> secondLength<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> concatenated<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">SimpleMerkleTree</span> that <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SimpleMerkleTree</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> that<span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>叶子结点的原编号的求法：</p><p>每次除2的余数，组成的二进制数，就是他原本的编号</p>`,10);function b(w,f){const a=p("Mermaid");return e(),l("div",null,[u,r,k,m,d,v,h,g,c(a,{id:"mermaid-181",code:"eJxLL0osyFAIceFSAALHaMNYCENBV9dOwSnaCJnrHG0M4TqBuS7RJshc12hTCNcZzHWLNkPmukebx3IBAL9mFYc="}),y])}const _=t(i,[["render",b],["__file","测验2.html.vue"]]);export{_ as default};
