import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as n,o as a}from"./app-B_TQ4tbw.js";const l={};function p(r,e){return a(),i("div",null,e[0]||(e[0]=[n('<h1 id="事务" tabindex="-1"><a class="header-anchor" href="#事务"><span>事务</span></a></h1><h2 id="事务传播" tabindex="-1"><a class="header-anchor" href="#事务传播"><span>事务传播</span></a></h2><p>Spring事务传播机制是指在多个事务方法相互调用时，如何处理事务的传播和隔离。Spring提供了多种事务传播机制，包括REQUIRED、SUPPORTS、MANDATORY、REQUIRES_NEW、NOT_SUPPORTED、NEVER和NESTED等。以下是各种事务传播机制的具体实现：</p><ol><li><p>REQUIRED：如果当前存在事务，则加入该事务；如果当前不存在事务，则创建一个新的事务。</p></li><li><p>SUPPORTS：如果当前存在事务，则加入该事务；如果当前不存在事务，则以非事务方式执行。</p></li><li><p>MANDATORY：如果当前存在事务，则加入该事务；如果当前不存在事务，则抛出异常。</p></li><li><p>REQUIRES_NEW：创建一个新的事务，并挂起当前事务（如果存在）。</p></li><li><p>NOT_SUPPORTED：以非事务方式执行，并挂起当前事务（如果存在）。</p></li><li><p>NEVER：以非事务方式执行，并抛出异常（如果当前存在事务）。</p></li><li><p>NESTED：如果当前存在事务，则在该事务中嵌套一个新的事务；如果当前不存在事务，则创建一个新的事务。</p></li></ol><h2 id="事务管理" tabindex="-1"><a class="header-anchor" href="#事务管理"><span>事务管理</span></a></h2><h3 id="状态管理" tabindex="-1"><a class="header-anchor" href="#状态管理"><span>状态管理</span></a></h3><p>在Spring中，可以通过TransactionSynchronizationManager类来判断当前是否存在事务。该类提供了一个静态方法isActualTransactionActive()，用于判断当前是否存在事务。如果返回true，则表示当前存在事务；如果返回false，则表示当前不存在事务。</p><p>总之，Spring事务传播机制可以帮助我们处理多个事务方法之间的关系，以保证数据的一致性和完整性。在使用事务传播机制时，需要根据实际情况选择合适的传播机制，并注意事务的隔离级别和传播特性，以便实现正确的业务逻辑。</p>',8)]))}const c=t(l,[["render",p],["__file","事务.html.vue"]]),s=JSON.parse(`{"path":"/se/lang/java/framework/spring/core/tx/%E4%BA%8B%E5%8A%A1.html","title":"事务","lang":"en-US","frontmatter":{"description":"事务 事务传播 Spring事务传播机制是指在多个事务方法相互调用时，如何处理事务的传播和隔离。Spring提供了多种事务传播机制，包括REQUIRED、SUPPORTS、MANDATORY、REQUIRES_NEW、NOT_SUPPORTED、NEVER和NESTED等。以下是各种事务传播机制的具体实现： REQUIRED：如果当前存在事务，则加入该...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/java/framework/spring/core/tx/%E4%BA%8B%E5%8A%A1.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"事务"}],["meta",{"property":"og:description","content":"事务 事务传播 Spring事务传播机制是指在多个事务方法相互调用时，如何处理事务的传播和隔离。Spring提供了多种事务传播机制，包括REQUIRED、SUPPORTS、MANDATORY、REQUIRES_NEW、NOT_SUPPORTED、NEVER和NESTED等。以下是各种事务传播机制的具体实现： REQUIRED：如果当前存在事务，则加入该..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-09T18:37:53.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-09T18:37:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"事务\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-09T18:37:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":2,"title":"事务传播","slug":"事务传播","link":"#事务传播","children":[]},{"level":2,"title":"事务管理","slug":"事务管理","link":"#事务管理","children":[{"level":3,"title":"状态管理","slug":"状态管理","link":"#状态管理","children":[]}]}],"git":{"createdTime":1684318252000,"updatedTime":1731177473000,"contributors":[{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro-3.local","commits":1}]},"readingTime":{"minutes":1.53,"words":458},"filePathRelative":"se/lang/java/framework/spring/core/tx/事务.md","localizedDate":"May 17, 2023","excerpt":"\\n<h2>事务传播</h2>\\n<p>Spring事务传播机制是指在多个事务方法相互调用时，如何处理事务的传播和隔离。Spring提供了多种事务传播机制，包括REQUIRED、SUPPORTS、MANDATORY、REQUIRES_NEW、NOT_SUPPORTED、NEVER和NESTED等。以下是各种事务传播机制的具体实现：</p>\\n<ol>\\n<li>\\n<p>REQUIRED：如果当前存在事务，则加入该事务；如果当前不存在事务，则创建一个新的事务。</p>\\n</li>\\n<li>\\n<p>SUPPORTS：如果当前存在事务，则加入该事务；如果当前不存在事务，则以非事务方式执行。</p>\\n</li>\\n<li>\\n<p>MANDATORY：如果当前存在事务，则加入该事务；如果当前不存在事务，则抛出异常。</p>\\n</li>\\n<li>\\n<p>REQUIRES_NEW：创建一个新的事务，并挂起当前事务（如果存在）。</p>\\n</li>\\n<li>\\n<p>NOT_SUPPORTED：以非事务方式执行，并挂起当前事务（如果存在）。</p>\\n</li>\\n<li>\\n<p>NEVER：以非事务方式执行，并抛出异常（如果当前存在事务）。</p>\\n</li>\\n<li>\\n<p>NESTED：如果当前存在事务，则在该事务中嵌套一个新的事务；如果当前不存在事务，则创建一个新的事务。</p>\\n</li>\\n</ol>","autoDesc":true}`);export{c as comp,s as data};
