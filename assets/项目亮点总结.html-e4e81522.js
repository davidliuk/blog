const e=JSON.parse(`{"key":"v-1f2fd04f","path":"/se/tools/resume/%E9%A1%B9%E7%9B%AE%E4%BA%AE%E7%82%B9%E6%80%BB%E7%BB%93.html","title":"项目亮点总结","lang":"en-US","frontmatter":{"description":"项目亮点总结 用户中心项目 为了提高开发效率，选用 Ant Design Pro 脚手架快速搭建基础页面，并对原始模板进行瘦身、抽象为可复用的公共模板，便于后续同类项目的快速研发。 在脚手架自带的 umi-request 请求库基础上进行改造和封装，添加全局请求拦截和全局异常处理逻辑、自动根据项目启动命令来区分环境，减少重复代码、提升项目可维护性。 选用 MyBatis + MyBatis-Plus 进行数据访问层开发，复用大多数通用方法，并且通过继承定制了自己的 通用操作模板 ，大幅提升了项目开发效率。 为了明确接口的返回，自定义统一的错误码，并封装了 全局异常处理器 ，从而规范了异常返回、屏蔽了项目冗余的报错细节。 对于项目中的 JSON 格式化处理对象，采用 双检锁单例模式 进行管理，从而复用对象，避免了重复创建对象的开销，便于集中维护管理。 采用 Nginx 完成前端项目部署、采用 Docker 容器完成后端项目部署，并且使用宝塔面板对项目进行运维监控。","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/tools/resume/%E9%A1%B9%E7%9B%AE%E4%BA%AE%E7%82%B9%E6%80%BB%E7%BB%93.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"项目亮点总结"}],["meta",{"property":"og:description","content":"项目亮点总结 用户中心项目 为了提高开发效率，选用 Ant Design Pro 脚手架快速搭建基础页面，并对原始模板进行瘦身、抽象为可复用的公共模板，便于后续同类项目的快速研发。 在脚手架自带的 umi-request 请求库基础上进行改造和封装，添加全局请求拦截和全局异常处理逻辑、自动根据项目启动命令来区分环境，减少重复代码、提升项目可维护性。 选用 MyBatis + MyBatis-Plus 进行数据访问层开发，复用大多数通用方法，并且通过继承定制了自己的 通用操作模板 ，大幅提升了项目开发效率。 为了明确接口的返回，自定义统一的错误码，并封装了 全局异常处理器 ，从而规范了异常返回、屏蔽了项目冗余的报错细节。 对于项目中的 JSON 格式化处理对象，采用 双检锁单例模式 进行管理，从而复用对象，避免了重复创建对象的开销，便于集中维护管理。 采用 Nginx 完成前端项目部署、采用 Docker 容器完成后端项目部署，并且使用宝塔面板对项目进行运维监控。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-03-20T14:10:49.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-03-20T14:10:49.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/se/tools/resume/%E9%A1%B9%E7%9B%AE%E4%BA%AE%E7%82%B9%E6%80%BB%E7%BB%93.html"}]]},"headers":[{"level":3,"title":"用户中心项目","slug":"用户中心项目","link":"#用户中心项目","children":[]},{"level":3,"title":"伙伴匹配系统","slug":"伙伴匹配系统","link":"#伙伴匹配系统","children":[]},{"level":3,"title":"API 开放平台","slug":"api-开放平台","link":"#api-开放平台","children":[]},{"level":3,"title":"瑞吉外卖","slug":"瑞吉外卖","link":"#瑞吉外卖","children":[]},{"level":3,"title":"尚医通微服务项目","slug":"尚医通微服务项目","link":"#尚医通微服务项目","children":[]},{"level":3,"title":"黑马点评","slug":"黑马点评","link":"#黑马点评","children":[]},{"level":3,"title":"硅谷课堂 - 在线学习平台","slug":"硅谷课堂-在线学习平台","link":"#硅谷课堂-在线学习平台","children":[]}],"git":{"createdTime":1679321449000,"updatedTime":1679321449000,"contributors":[{"name":"davidliuk","email":"l729641074@163.com","commits":1}]},"readingTime":{"minutes":16.3,"words":4891},"localizedDate":"March 20, 2023","filePathRelative":"se/tools/resume/项目亮点总结.md","excerpt":"<h1> 项目亮点总结</h1>\\n<h3> 用户中心项目</h3>\\n<ol>\\n<li>\\n<p>为了提高开发效率，选用 Ant Design Pro 脚手架快速搭建基础页面，并对原始模板进行瘦身、抽象为可复用的公共模板，便于后续同类项目的快速研发。</p>\\n</li>\\n<li>\\n<p>在脚手架自带的 umi-request 请求库基础上进行改造和封装，添加全局请求拦截和全局异常处理逻辑、自动根据项目启动命令来区分环境，减少重复代码、提升项目可维护性。</p>\\n</li>\\n<li>\\n<p>选用 MyBatis + MyBatis-Plus 进行数据访问层开发，复用大多数通用方法，并且通过继承定制了自己的 通用操作模板 ，大幅提升了项目开发效率。</p>\\n</li>\\n<li>\\n<p>为了明确接口的返回，自定义统一的错误码，并封装了 全局异常处理器 ，从而规范了异常返回、屏蔽了项目冗余的报错细节。</p>\\n</li>\\n<li>\\n<p>对于项目中的 JSON 格式化处理对象，采用 双检锁单例模式 进行管理，从而复用对象，避免了重复创建对象的开销，便于集中维护管理。</p>\\n</li>\\n<li>\\n<p>采用 Nginx 完成前端项目部署、采用 Docker 容器完成后端项目部署，并且使用宝塔面板对项目进行运维监控。</p>\\n</li>\\n</ol>","autoDesc":true}`);export{e as data};
