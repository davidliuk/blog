const e=JSON.parse(`{"key":"v-8cd8d816","path":"/se/lang/java/JUC/safe/HTvsCHM.html","title":"HashTable vs ConcurrentHashMap","lang":"en-US","frontmatter":{"description":"HashTable vs ConcurrentHashMap 共同点 HashTable 与 ConcurrentHashMap 都是线程安全的Map集合 HashTable 并发度低，整个 HashTable 对应一把锁，只能有一个线程操作它 1.8之前 ConcurrentHashMap 使用了 Segment + 数组 + 链表，每个 Segment 对应一把锁，如果多个线程访问不同的 Segment，则不会冲突 1.8开始 ConcurrentHashMap 将数组的每个头节点作为锁（这个时候结构也是数组加链表或红黑树），如果多个线程访问的头节点不同，则不会冲突。","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/java/JUC/safe/HTvsCHM.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"HashTable vs ConcurrentHashMap"}],["meta",{"property":"og:description","content":"HashTable vs ConcurrentHashMap 共同点 HashTable 与 ConcurrentHashMap 都是线程安全的Map集合 HashTable 并发度低，整个 HashTable 对应一把锁，只能有一个线程操作它 1.8之前 ConcurrentHashMap 使用了 Segment + 数组 + 链表，每个 Segment 对应一把锁，如果多个线程访问不同的 Segment，则不会冲突 1.8开始 ConcurrentHashMap 将数组的每个头节点作为锁（这个时候结构也是数组加链表或红黑树），如果多个线程访问的头节点不同，则不会冲突。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-03-23T13:33:44.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-03-23T13:33:44.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/se/lang/java/JUC/safe/HTvsCHM.html"}]]},"headers":[],"git":{"createdTime":1677504602000,"updatedTime":1679578424000,"contributors":[{"name":"davidliuk","email":"l729641074@163.com","commits":1},{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":0.44,"words":131},"localizedDate":"February 27, 2023","filePathRelative":"se/lang/java/JUC/safe/HTvsCHM.md","excerpt":"<h1> HashTable vs ConcurrentHashMap</h1>\\n<p>共同点</p>\\n<p>HashTable 与 ConcurrentHashMap 都是线程安全的Map集合</p>\\n<p>HashTable 并发度低，整个 HashTable 对应一把锁，只能有一个线程操作它</p>\\n<p>1.8之前 ConcurrentHashMap 使用了 Segment + 数组 + 链表，每个 Segment 对应一把锁，如果多个线程访问不同的 Segment，则不会冲突</p>\\n<p>1.8开始 ConcurrentHashMap 将数组的每个头节点作为锁（这个时候结构也是数组加链表或红黑树），如果多个线程访问的头节点不同，则不会冲突。</p>","autoDesc":true}`);export{e as data};
