import{_ as e,V as a,W as n,Z as r}from"./framework-e5d7a6b2.js";const i={},o=r('<h1 id="后处理器" tabindex="-1"><a class="header-anchor" href="#后处理器" aria-hidden="true">#</a> 后处理器</h1><p>Spring 的后处理器是 Spring 对外开发的重要扩展点，允许我们介入到 Bean 的整个实例化流程中来，以达到动态注册 BeanDefinition,动态修改 BeanDefinition,以及动态修改 Bean 的作用。Spring 主要有两种后处理器：</p><ul><li>BeanFactoryPostProcessor：Bean 工厂后处理器，在 BeanDefinitionMap 填充完毕，Bean 实例化之前执行：</li><li>BeanPostProcessor：Bean 后处理器，一般在 Bean 实例化之后，填充到单例池 singletonObjects 之前执行。</li></ul><p>需要实现对应接口，注册到 Spring 容器中以后就会自动调用。</p><ul><li><p>动态注册</p><p>需要强转</p></li><li><p>动态修改</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/davidliuk/images@master/blog/截屏2023-04-05 21.10.52.png" alt="截屏2023-04-05 21.10.52"></p><h3 id="beanfactorypostprocessor" tabindex="-1"><a class="header-anchor" href="#beanfactorypostprocessor" aria-hidden="true">#</a> BeanFactoryPostProcessor</h3><p>可以实现注解扫描</p><h3 id="beanpostprocessor" tabindex="-1"><a class="header-anchor" href="#beanpostprocessor" aria-hidden="true">#</a> BeanPostProcessor</h3><p>可以实现 AOP，动态代理、方法增强</p><ul><li>bean 初始化前：before</li><li>bean 初始化后：after</li></ul><p>很多 Spring 自己和第三方整合框架都是用这两个去做的。</p>',12),s=[o];function t(p,c){return a(),n("div",null,s)}const d=e(i,[["render",t],["__file","后处理器.html.vue"]]);export{d as default};
