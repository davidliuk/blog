import{_ as l,V as e,W as p,Z as i}from"./framework-e5d7a6b2.js";const a={},t=i('<h1 id="优化" tabindex="-1"><a class="header-anchor" href="#优化" aria-hidden="true">#</a> 优化</h1><ul><li><p>减治：无效优化</p><p>避免无效计算：不可能出现答案的地方直接排除，即优化无效状态空间</p><p>有序（广义上的有序，符合一定的规律）的线性结构</p><p>（四大类型）eg. 二分法，快速选择</p></li><li><p>动归：重叠优化</p><p>避免重复计算：</p><p>DAG结构</p><p>复杂的动态规划可以把四种算法都串起来，因为临界节点的序列是线性的，且有的时候是“有序”的，就可以减治（如斜率优化等）</p></li></ul><p>动态规划的优化</p><ul><li><p>空间优化：</p><p>先序：</p><ul><li>FOR：滚动数组</li><li>DFS、BFS：把hashmap的节点删除（hashmap.remove）</li></ul><p>后序：</p><ul><li>只有被重复计算的点需要被存储下来，没有重复计算的点就不需要存储</li><li>lc一道hard里面出现过一次</li></ul></li><li><p>时间优化：通过减治</p></li></ul>',4),c=[t];function r(n,s){return e(),p("div",null,c)}const h=l(a,[["render",r],["__file","index.html.vue"]]);export{h as default};
