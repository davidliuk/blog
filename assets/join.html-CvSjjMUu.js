import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o as n}from"./app-BXVo6w5b.js";const e={};function l(d,i){return n(),a("div",null,i[0]||(i[0]=[t(`<h1 id="连接" tabindex="-1"><a class="header-anchor" href="#连接"><span>连接</span></a></h1><p>当外连接（LEFT JOIN, RIGHT JOIN和FULL JOIN）不带连接条件时，等于笛卡尔积，即<strong>交叉连接</strong>的效果。</p><table><thead><tr><th>类型</th><th>关键字</th><th>讲解</th></tr></thead><tbody><tr><td>内连接</td><td>(INNER) JOIN</td><td>只有当两个表都存在满足条件的记录时才会返回行。</td></tr><tr><td>左(外)连接</td><td>LEFT (OUTER) JOIN</td><td>返回左表中的所有行，即使右表中没有满足条件的行也是如此。</td></tr><tr><td>右(外)连接</td><td>RIGHT (OUTER) JOIN</td><td>返回右表中的所有行，即使左表中没有满足条件的行也是如此。</td></tr><tr><td>全(外)连接</td><td>FULL (OUTER) JOIN</td><td>只要其中有一个表存在满足条件的记录，就返回行。</td></tr><tr><td>交叉连接</td><td>CROSS JOIN</td><td>交叉连接，从两个或者多个连接表中返回记录集的笛卡尔积。</td></tr></tbody></table><p>类型</p><ul><li><p>内连接</p><p><code>JOIN</code>, <code>INNER JOIN</code>：如果表中有至少一个匹配，则返回行</p></li><li><p>外连接</p><ul><li><code>LEFT JOIN</code>：即使右表中没有匹配，也从左表返回所有的行</li><li><code>RIGHT JOIN</code>：即使左表中没有匹配，也从右表返回所有的行</li><li><code>FULL JOIN</code>：只要其中一个表中存在匹配，则返回行</li></ul></li><li><p>交叉连接</p><p><code>CROSS JOIN</code>：笛卡尔积，即一般情况下FROM多个表直接默认简写的。</p><p>将第一个表(T1)中的每一行与第二个表(T2)中的每一行连接起来。 换句话说，交叉连接返回两个表中行的<strong>笛卡尔积</strong>。</p><p>与INNER JOIN或LEFT JOIN不同，交叉连接不会在连接的表之间建立关系。</p></li><li><p>自连接 SELF JOIN</p><p>将一个表连接到自身，就像该表是两个表一样。为了区分两个表，在 SQL 语句中需要至少重命名一个表。</p><p>自联接用于将表连接到自身(同一个表)。 它对于查询分层数据或比较同一个表中的行很有用。自联接使用内连接或左连接子句。 由于使用自联接的查询引用同一个表，因此表别名用于为查询中的表分配不同的名称</p></li></ul><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;Employee&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Employee a,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Employee b</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ManagerId</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Id</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        AND</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Salary</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Salary</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询工资比他经理的工资还高的员工的姓名</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NAME</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Employee</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Employee a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">JOIN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Employee b</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     ON</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ManagerId</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Id</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     AND</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Salary</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">Salary</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>ON</code>：更加灵活，可以有多种条件以及函数</p></li><li><p><code>USING()</code>：更加简洁，且可以有效去除重复子段，但是仅能用于两个表子段名称相同且值相等的情况</p></li></ul><p>数据库在通过连接两张或多张表来返回记录时，都会生成一张中间的临时表，然后再将这张临时表返回给用户。</p><p>在使用 <strong>left join</strong> 时，<strong>on</strong> 和 <strong>where</strong> 条件的区别如下：</p><ol><li><strong>on</strong> 条件是在生成临时表时使用的条件，它不管 <strong>on</strong> 中的条件是否为真，都会返回左边表中的记录。</li><li><strong>where</strong> 条件是在临时表生成好后，再对临时表进行过滤的条件。这时已经没有 <strong>left join</strong> 的含义（必须返回左边表的记录）了，条件不为真的就全部过滤掉。</li></ol><h3 id="对比" tabindex="-1"><a class="header-anchor" href="#对比"><span>对比</span></a></h3><p>MySQL 中的 UNION 和 JOIN 是两种不同的操作，它们的作用和使用场景也不同。</p><p>UNION 是用于合并两个或多个 SELECT 语句的结果集，它会将多个结果集合并成一个结果集，并去除重复的行。UNION 操作的语法如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> column1, column2, ... </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> table1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">UNION</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> [ALL]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> column1, column2, ... </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> table2;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>UNION</code> 表示合并两个结果集并去除重复的行，<code>UNION ALL</code> 表示合并两个结果集但不去除重复的行。</p><p>JOIN 是用于将两个或多个表中的数据进行关联的操作，它会根据指定的条件将两个表中的数据进行匹配，并返回匹配的结果。JOIN 操作的语法如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> column1, column2, ...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> table1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">JOIN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> table2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> condition;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>JOIN</code> 表示内连接，只返回两个表中匹配的行，<code>LEFT JOIN</code> 和 <code>RIGHT JOIN</code> 表示左连接和右连接，会返回左表或右表中的所有行，即使没有匹配的行。</p><p>总的来说，UNION 用于合并结果集，而 JOIN 用于关联表中的数据。在使用时需要根据具体的需求选择合适的操作。</p>`,21)]))}const r=s(e,[["render",l],["__file","join.html.vue"]]),k=JSON.parse(`{"path":"/cs/database/sql/basic/join.html","title":"连接","lang":"en-US","frontmatter":{"description":"连接 当外连接（LEFT JOIN, RIGHT JOIN和FULL JOIN）不带连接条件时，等于笛卡尔积，即交叉连接的效果。 类型 内连接 JOIN, INNER JOIN：如果表中有至少一个匹配，则返回行 外连接 LEFT JOIN：即使右表中没有匹配，也从左表返回所有的行 RIGHT JOIN：即使左表中没有匹配，也从右表返回所有的行 FULL...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/cs/database/sql/basic/join.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"连接"}],["meta",{"property":"og:description","content":"连接 当外连接（LEFT JOIN, RIGHT JOIN和FULL JOIN）不带连接条件时，等于笛卡尔积，即交叉连接的效果。 类型 内连接 JOIN, INNER JOIN：如果表中有至少一个匹配，则返回行 外连接 LEFT JOIN：即使右表中没有匹配，也从左表返回所有的行 RIGHT JOIN：即使左表中没有匹配，也从右表返回所有的行 FULL..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-05-08T07:35:02.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-08T07:35:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"连接\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-08T07:35:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":3,"title":"对比","slug":"对比","link":"#对比","children":[]}],"git":{"createdTime":1679321449000,"updatedTime":1715153702000,"contributors":[{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":2},{"name":"davidliuk","email":"l729641074@163.com","commits":1}]},"readingTime":{"minutes":3.58,"words":1075},"filePathRelative":"cs/database/sql/basic/join.md","localizedDate":"March 20, 2023","excerpt":"\\n<p>当外连接（LEFT JOIN, RIGHT JOIN和FULL JOIN）不带连接条件时，等于笛卡尔积，即<strong>交叉连接</strong>的效果。</p>\\n<table>\\n<thead>\\n<tr>\\n<th>类型</th>\\n<th>关键字</th>\\n<th>讲解</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>内连接</td>\\n<td>(INNER) JOIN</td>\\n<td>只有当两个表都存在满足条件的记录时才会返回行。</td>\\n</tr>\\n<tr>\\n<td>左(外)连接</td>\\n<td>LEFT (OUTER) JOIN</td>\\n<td>返回左表中的所有行，即使右表中没有满足条件的行也是如此。</td>\\n</tr>\\n<tr>\\n<td>右(外)连接</td>\\n<td>RIGHT (OUTER) JOIN</td>\\n<td>返回右表中的所有行，即使左表中没有满足条件的行也是如此。</td>\\n</tr>\\n<tr>\\n<td>全(外)连接</td>\\n<td>FULL (OUTER) JOIN</td>\\n<td>只要其中有一个表存在满足条件的记录，就返回行。</td>\\n</tr>\\n<tr>\\n<td>交叉连接</td>\\n<td>CROSS JOIN</td>\\n<td>交叉连接，从两个或者多个连接表中返回记录集的笛卡尔积。</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}`);export{r as comp,k as data};
