const e=JSON.parse(`{"key":"v-dbc33718","path":"/se/framework/spring/core/tx/%E4%BA%8B%E5%8A%A1.html","title":"事务","lang":"en-US","frontmatter":{"description":"事务 事务传播 Spring事务传播机制是指在多个事务方法相互调用时，如何处理事务的传播和隔离。Spring提供了多种事务传播机制，包括REQUIRED、SUPPORTS、MANDATORY、REQUIRES_NEW、NOT_SUPPORTED、NEVER和NESTED等。以下是各种事务传播机制的具体实现： REQUIRED：如果当前存在事务，则加入该事务；如果当前不存在事务，则创建一个新的事务。 SUPPORTS：如果当前存在事务，则加入该事务；如果当前不存在事务，则以非事务方式执行。 MANDATORY：如果当前存在事务，则加入该事务；如果当前不存在事务，则抛出异常。 REQUIRES_NEW：创建一个新的事务，并挂起当前事务（如果存在）。 NOT_SUPPORTED：以非事务方式执行，并挂起当前事务（如果存在）。 NEVER：以非事务方式执行，并抛出异常（如果当前存在事务）。 NESTED：如果当前存在事务，则在该事务中嵌套一个新的事务；如果当前不存在事务，则创建一个新的事务。","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/framework/spring/core/tx/%E4%BA%8B%E5%8A%A1.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"事务"}],["meta",{"property":"og:description","content":"事务 事务传播 Spring事务传播机制是指在多个事务方法相互调用时，如何处理事务的传播和隔离。Spring提供了多种事务传播机制，包括REQUIRED、SUPPORTS、MANDATORY、REQUIRES_NEW、NOT_SUPPORTED、NEVER和NESTED等。以下是各种事务传播机制的具体实现： REQUIRED：如果当前存在事务，则加入该事务；如果当前不存在事务，则创建一个新的事务。 SUPPORTS：如果当前存在事务，则加入该事务；如果当前不存在事务，则以非事务方式执行。 MANDATORY：如果当前存在事务，则加入该事务；如果当前不存在事务，则抛出异常。 REQUIRES_NEW：创建一个新的事务，并挂起当前事务（如果存在）。 NOT_SUPPORTED：以非事务方式执行，并挂起当前事务（如果存在）。 NEVER：以非事务方式执行，并抛出异常（如果当前存在事务）。 NESTED：如果当前存在事务，则在该事务中嵌套一个新的事务；如果当前不存在事务，则创建一个新的事务。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-05-17T10:10:52.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-05-17T10:10:52.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/se/framework/spring/core/tx/%E4%BA%8B%E5%8A%A1.html"}]]},"headers":[{"level":2,"title":"事务传播","slug":"事务传播","link":"#事务传播","children":[]},{"level":2,"title":"事务管理","slug":"事务管理","link":"#事务管理","children":[{"level":3,"title":"状态管理","slug":"状态管理","link":"#状态管理","children":[]}]}],"git":{"createdTime":1684318252000,"updatedTime":1684318252000,"contributors":[{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":1.53,"words":458},"localizedDate":"May 17, 2023","filePathRelative":"se/framework/spring/core/tx/事务.md","excerpt":"<h1> 事务</h1>\\n<h2> 事务传播</h2>\\n<p>Spring事务传播机制是指在多个事务方法相互调用时，如何处理事务的传播和隔离。Spring提供了多种事务传播机制，包括REQUIRED、SUPPORTS、MANDATORY、REQUIRES_NEW、NOT_SUPPORTED、NEVER和NESTED等。以下是各种事务传播机制的具体实现：</p>\\n<ol>\\n<li>\\n<p>REQUIRED：如果当前存在事务，则加入该事务；如果当前不存在事务，则创建一个新的事务。</p>\\n</li>\\n<li>\\n<p>SUPPORTS：如果当前存在事务，则加入该事务；如果当前不存在事务，则以非事务方式执行。</p>\\n</li>\\n<li>\\n<p>MANDATORY：如果当前存在事务，则加入该事务；如果当前不存在事务，则抛出异常。</p>\\n</li>\\n<li>\\n<p>REQUIRES_NEW：创建一个新的事务，并挂起当前事务（如果存在）。</p>\\n</li>\\n<li>\\n<p>NOT_SUPPORTED：以非事务方式执行，并挂起当前事务（如果存在）。</p>\\n</li>\\n<li>\\n<p>NEVER：以非事务方式执行，并抛出异常（如果当前存在事务）。</p>\\n</li>\\n<li>\\n<p>NESTED：如果当前存在事务，则在该事务中嵌套一个新的事务；如果当前不存在事务，则创建一个新的事务。</p>\\n</li>\\n</ol>","autoDesc":true}`);export{e as data};
