const t=JSON.parse(`{"key":"v-ab058a38","path":"/cs/algo/summary/%E4%B9%9D%E7%AB%A0%E7%AE%97%E6%B3%95/37.%20DFS.html","title":"DFS","lang":"en-US","frontmatter":{"description":"DFS dfs时间复杂度分析： 通用：O(方案总数*构造每个方案的时间) 程序结构的艺术 入口函数 搜索函数 判断函数 打印函数 DFS优化策略 可行性剪枝 最优性剪枝 顺序优化 ：优先搜索那些可能方案少的位置","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/cs/algo/summary/%E4%B9%9D%E7%AB%A0%E7%AE%97%E6%B3%95/37.%20DFS.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"DFS"}],["meta",{"property":"og:description","content":"DFS dfs时间复杂度分析： 通用：O(方案总数*构造每个方案的时间) 程序结构的艺术 入口函数 搜索函数 判断函数 打印函数 DFS优化策略 可行性剪枝 最优性剪枝 顺序优化 ：优先搜索那些可能方案少的位置"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-01-15T03:19:11.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-01-15T03:19:11.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/cs/algo/summary/%E4%B9%9D%E7%AB%A0%E7%AE%97%E6%B3%95/37.%20DFS.html"}]]},"headers":[],"git":{"createdTime":1673752751000,"updatedTime":1673752751000,"contributors":[{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":0.27,"words":81},"localizedDate":"January 15, 2023","filePathRelative":"cs/algo/summary/九章算法/37. DFS.md","excerpt":"<h1> DFS</h1>\\n<p>dfs时间复杂度分析：</p>\\n<p>通用：O(方案总数*构造每个方案的时间)</p>\\n<p>程序结构的艺术</p>\\n<ul>\\n<li>入口函数</li>\\n<li>搜索函数</li>\\n<li>判断函数</li>\\n<li>打印函数</li>\\n</ul>\\n<p>DFS优化策略</p>\\n<ul>\\n<li>\\n<p>可行性剪枝</p>\\n</li>\\n<li>\\n<p>最优性剪枝</p>\\n</li>\\n<li>\\n<p>顺序优化</p>\\n<p>：优先搜索那些可能方案少的位置</p>\\n</li>\\n</ul>\\n","autoDesc":true}`);export{t as data};
