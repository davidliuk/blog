const t=JSON.parse(`{"key":"v-151b7b10","path":"/cs/algo/summary/%E4%B9%9D%E7%AB%A0%E7%AE%97%E6%B3%95/5.%20%E6%8E%92%E5%BA%8F.html","title":"排序","lang":"en-US","frontmatter":{"description":"排序 快速排序 partition算法 分治算法：整体有序再局部有序 1,1,1,3 1 - 1 + - + 要点解析 取pivot策略：经验下选择中点是最好的（很少能构造出让他退化成n2的数据） 中心点只能是严格大或严格小才++--，等于的时候要交换，不然的话如果是全部相等的序列每次都不变，左指针走到最右侧，右指针原地不动，会造成无限递归。 必须是left &lt;= right，不然会无限递归，而且要防止左右有交集","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/cs/algo/summary/%E4%B9%9D%E7%AB%A0%E7%AE%97%E6%B3%95/5.%20%E6%8E%92%E5%BA%8F.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"排序"}],["meta",{"property":"og:description","content":"排序 快速排序 partition算法 分治算法：整体有序再局部有序 1,1,1,3 1 - 1 + - + 要点解析 取pivot策略：经验下选择中点是最好的（很少能构造出让他退化成n2的数据） 中心点只能是严格大或严格小才++--，等于的时候要交换，不然的话如果是全部相等的序列每次都不变，左指针走到最右侧，右指针原地不动，会造成无限递归。 必须是left &lt;= right，不然会无限递归，而且要防止左右有交集"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-01-15T03:19:11.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-01-15T03:19:11.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/cs/algo/summary/%E4%B9%9D%E7%AB%A0%E7%AE%97%E6%B3%95/5.%20%E6%8E%92%E5%BA%8F.html"}]]},"headers":[{"level":3,"title":"快速排序","slug":"快速排序","link":"#快速排序","children":[]},{"level":3,"title":"归并排序","slug":"归并排序","link":"#归并排序","children":[]},{"level":3,"title":"对比","slug":"对比","link":"#对比","children":[]},{"level":3,"title":"快速选择","slug":"快速选择","link":"#快速选择","children":[]}],"git":{"createdTime":1673752751000,"updatedTime":1673752751000,"contributors":[{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":2.33,"words":700},"localizedDate":"January 15, 2023","filePathRelative":"cs/algo/summary/九章算法/5. 排序.md","excerpt":"<h1> 排序</h1>\\n<h3> 快速排序</h3>\\n<p>partition算法</p>\\n<p>分治算法：整体有序再局部有序</p>\\n<p>1,1,1,3</p>\\n<p>1  -     1</p>\\n<p>+  - +</p>\\n<p>要点解析</p>\\n<ol>\\n<li>\\n<p>取pivot策略：经验下选择中点是最好的（很少能构造出让他退化成n2的数据）</p>\\n</li>\\n<li>\\n<p>中心点只能是严格大或严格小才++--，等于的时候要交换，不然的话如果是全部相等的序列每次都不变，左指针走到最右侧，右指针原地不动，会造成无限递归。</p>\\n</li>\\n<li>\\n<p>必须是left &lt;= right，不然会无限递归，而且要防止左右有交集</p>\\n</li>\\n</ol>","autoDesc":true}`);export{t as data};
