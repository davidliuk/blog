const e=JSON.parse(`{"key":"v-7fed26e2","path":"/cs/algo/summary/%E4%B9%9D%E7%AB%A0%E7%AE%97%E6%B3%95/11.%20BFS.html","title":"BFS","lang":"en-US","frontmatter":{"description":"BFS BFS适用场景 分层遍历 一层一层的遍历一个图、树、矩阵 简单图最短路径（边长都为1） 连通块问题 连通图中一个点找到其他所有连通的点 找到所有方案问题的一种非递归实现方式 拓扑排序 实现容易度远超过DFS BFS的三种实现方式 通过二叉树层次遍历为例 单队列","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/cs/algo/summary/%E4%B9%9D%E7%AB%A0%E7%AE%97%E6%B3%95/11.%20BFS.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"BFS"}],["meta",{"property":"og:description","content":"BFS BFS适用场景 分层遍历 一层一层的遍历一个图、树、矩阵 简单图最短路径（边长都为1） 连通块问题 连通图中一个点找到其他所有连通的点 找到所有方案问题的一种非递归实现方式 拓扑排序 实现容易度远超过DFS BFS的三种实现方式 通过二叉树层次遍历为例 单队列"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-01-15T03:19:11.000Z"}],["meta",{"property":"article:author","content":"David Liu"}],["meta",{"property":"article:modified_time","content":"2023-01-15T03:19:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"BFS\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-01-15T03:19:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":3,"title":"BFS适用场景","slug":"bfs适用场景","link":"#bfs适用场景","children":[]},{"level":3,"title":"BFS的三种实现方式","slug":"bfs的三种实现方式","link":"#bfs的三种实现方式","children":[]}],"git":{"createdTime":1673752751000,"updatedTime":1673752751000,"contributors":[{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":1.04,"words":313},"filePathRelative":"cs/algo/summary/九章算法/11. BFS.md","localizedDate":"January 15, 2023","excerpt":"<h1> BFS</h1>\\n<h3> BFS适用场景</h3>\\n<ol>\\n<li>分层遍历\\n<ul>\\n<li>一层一层的遍历一个图、树、矩阵</li>\\n<li>简单图最短路径（边长都为1）</li>\\n</ul>\\n</li>\\n<li>连通块问题\\n<ul>\\n<li>连通图中一个点找到其他所有连通的点</li>\\n<li>找到所有方案问题的一种非递归实现方式</li>\\n</ul>\\n</li>\\n<li>拓扑排序\\n<ul>\\n<li>实现容易度远超过DFS</li>\\n</ul>\\n</li>\\n</ol>\\n<h3> BFS的三种实现方式</h3>\\n<p>通过二叉树层次遍历为例</p>\\n<h4> 单队列</h4>","autoDesc":true}`);export{e as data};
