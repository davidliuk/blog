import{_ as a,V as n,W as s,a0 as e}from"./framework-705b829b.js";const l={},i=e(`<h1 id="链表" tabindex="-1"><a class="header-anchor" href="#链表" aria-hidden="true">#</a> 链表</h1><h3 id="主要技巧" tabindex="-1"><a class="header-anchor" href="#主要技巧" aria-hidden="true">#</a> 主要技巧：</h3><ul><li><p>虚拟头节点</p><p>使用场景：</p><ul><li>头节点不确定时，如创建一个新的链表（初始时无法判断是否为空） <ul><li>合并链表（到一个新的链表）merge</li><li>划分链表（到两个新的链表）partition</li></ul></li><li>头节点可能被变动时，如添加、删除、移动 <ul><li>删除节点 <ul><li>链表去重</li><li>删除值为x的节点</li></ul></li><li>移动 <ul><li>反转链表</li><li>交换链表节点</li></ul></li></ul></li></ul></li><li><p>双指针</p><p>技巧分类及使用场景：</p><ul><li>快慢双指针 <ul><li>链表中点：middle</li><li>链表求环：circle</li></ul></li><li>同向双指针 <ul><li>反转链表：reverse</li><li>链表去重：deduplication</li></ul></li><li>平行双指针 <ul><li>合并链表：merge</li><li>划分链表：partition</li></ul></li></ul></li></ul><h3 id="边界条件" tabindex="-1"><a class="header-anchor" href="#边界条件" aria-hidden="true">#</a> 边界条件：</h3><ol><li><p>当循环内出现移动两步时：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>curr <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> curr<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如，快慢指针、两两交换链表中的节点</p></li><li><p>要取下一个节点的值，或可能移除或移动下一个节点时：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>curr<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如，反转链表</p><p>这种需要在最开始的地方判断curr这个节点是否为空（往往为<code>curr == null</code>）</p></li><li><p>仅用到当前节点的值时，</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如，partition</p></li><li><p>当平行双指针时，</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如，merge</p></li></ol>`,5),p=[i];function t(o,r){return n(),s("div",null,p)}const d=a(l,[["render",t],["__file","index.html.vue"]]);export{d as default};
