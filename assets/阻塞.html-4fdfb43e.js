const e=JSON.parse(`{"key":"v-65c24d5e","path":"/se/lang/java/JUC/aqs/lock/%E9%98%BB%E5%A1%9E.html","title":"阻塞队列","lang":"en-US","frontmatter":{"description":"阻塞队列 blocked queue双向链表 waiting queue单向链表，0-多个 在等待队列里面的线程获取锁是有顺序的，外面的线程就是无序的可以直接插队先执行 tryLock(时间)这种会尊从创建锁的时候的公平非公平 无参的tryLock，不管创建的锁是什么样，他都是非公平执行 条件变量Condition 然后就会进入等待队列 Lock唤醒waiting queue的线程时，会放入block queue的尾部 synchronized唤醒waiting queue的线程时，到blockde queue中优先级更高一些","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/lang/java/JUC/aqs/lock/%E9%98%BB%E5%A1%9E.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"阻塞队列"}],["meta",{"property":"og:description","content":"阻塞队列 blocked queue双向链表 waiting queue单向链表，0-多个 在等待队列里面的线程获取锁是有顺序的，外面的线程就是无序的可以直接插队先执行 tryLock(时间)这种会尊从创建锁的时候的公平非公平 无参的tryLock，不管创建的锁是什么样，他都是非公平执行 条件变量Condition 然后就会进入等待队列 Lock唤醒waiting queue的线程时，会放入block queue的尾部 synchronized唤醒waiting queue的线程时，到blockde queue中优先级更高一些"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-03-23T13:33:44.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-03-23T13:33:44.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/se/lang/java/JUC/aqs/lock/%E9%98%BB%E5%A1%9E.html"}]]},"headers":[],"git":{"createdTime":1679578424000,"updatedTime":1679578424000,"contributors":[{"name":"davidliuk","email":"l729641074@163.com","commits":1}]},"readingTime":{"minutes":0.5,"words":150},"localizedDate":"March 23, 2023","filePathRelative":"se/lang/java/JUC/aqs/lock/阻塞.md","excerpt":"<h1> 阻塞队列</h1>\\n<p>blocked queue双向链表</p>\\n<p>waiting queue单向链表，0-多个</p>\\n<p>在等待队列里面的线程获取锁是有顺序的，外面的线程就是无序的可以直接插队先执行</p>\\n<p>tryLock(时间)这种会尊从创建锁的时候的公平非公平</p>\\n<p>无参的tryLock，不管创建的锁是什么样，他都是非公平执行</p>\\n<p>条件变量Condition</p>\\n<p>然后就会进入等待队列</p>\\n<p>Lock唤醒waiting queue的线程时，会放入block queue的尾部</p>\\n<p>synchronized唤醒waiting queue的线程时，到blockde queue中优先级更高一些</p>","autoDesc":true}`);export{e as data};
