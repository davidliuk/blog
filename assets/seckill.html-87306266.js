const e=JSON.parse(`{"key":"v-4bb06c5c","path":"/cs/database/redis/practice/seckill.html","title":"秒杀","lang":"en-US","frontmatter":{"description":"秒杀 超卖解决 悲观锁：添加同步锁，让线程串行执行 优点：简单粗暴 缺点：性能一般 乐观锁：不加锁，在更新的时候判断是否有其他线程在修改 版本号，这样需要数据库加字段；或简化为：CAS法 优点：性能好 缺点：成功率太低 改进：不再判断是否相等，只判断是否大于零，类似双锁校验 一人一单 因为购买数量是否修改过数据库里面不存在，所以不难使用乐观锁方案， 如果是带事物的情况下，锁的范围应该包括整个方法，否则回滚的时候又线程不安全了","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/cs/database/redis/practice/seckill.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"秒杀"}],["meta",{"property":"og:description","content":"秒杀 超卖解决 悲观锁：添加同步锁，让线程串行执行 优点：简单粗暴 缺点：性能一般 乐观锁：不加锁，在更新的时候判断是否有其他线程在修改 版本号，这样需要数据库加字段；或简化为：CAS法 优点：性能好 缺点：成功率太低 改进：不再判断是否相等，只判断是否大于零，类似双锁校验 一人一单 因为购买数量是否修改过数据库里面不存在，所以不难使用乐观锁方案， 如果是带事物的情况下，锁的范围应该包括整个方法，否则回滚的时候又线程不安全了"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-02-27T13:30:02.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-02-27T13:30:02.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/cs/database/redis/practice/seckill.html"}]]},"headers":[{"level":3,"title":"超卖解决","slug":"超卖解决","link":"#超卖解决","children":[]},{"level":3,"title":"一人一单","slug":"一人一单","link":"#一人一单","children":[]},{"level":3,"title":"异步秒杀","slug":"异步秒杀","link":"#异步秒杀","children":[]}],"git":{"createdTime":1677504602000,"updatedTime":1677504602000,"contributors":[{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":1.02,"words":307},"localizedDate":"February 27, 2023","filePathRelative":"cs/database/redis/practice/seckill.md","excerpt":"<h1> 秒杀</h1>\\n<h3> 超卖解决</h3>\\n<p>悲观锁：添加同步锁，让线程串行执行</p>\\n<ul>\\n<li>优点：简单粗暴</li>\\n<li>缺点：性能一般</li>\\n</ul>\\n<p>乐观锁：不加锁，在更新的时候判断是否有其他线程在修改</p>\\n<p>版本号，这样需要数据库加字段；或简化为：CAS法</p>\\n<ul>\\n<li>优点：性能好</li>\\n<li>缺点：成功率太低</li>\\n</ul>\\n<p>改进：不再判断是否相等，只判断是否大于零，类似双锁校验</p>\\n<h3> 一人一单</h3>\\n<p>因为购买数量是否修改过数据库里面不存在，所以不难使用乐观锁方案，</p>\\n<p>如果是带事物的情况下，锁的范围应该包括整个方法，否则回滚的时候又线程不安全了</p>","autoDesc":true}`);export{e as data};
