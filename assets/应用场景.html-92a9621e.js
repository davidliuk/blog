const e=JSON.parse(`{"key":"v-23892914","path":"/se/framework/spring/core/aop/%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.html","title":"应用场景","lang":"en-US","frontmatter":{"description":"应用场景 aop 称为是面向切面编程，而他的 aop 原理呢就是：在执行某些代码之前执行另外的代码，是程序变的灵活，扩展性更灵活，可以随意的删除和添加某些功能！ 一，性能统计／计数 将与业务无关的代码，使用 AOP 拦截他们。 二，事务处理 调用方法前开启事务， 调用方法后提交关闭事务 三，缓存处理 简单的＂方法缓存＂可以把＂方法名－参数＂作为 Key，拦截器拦截方法根据＂方法名－参数＂去缓存系统查询，如果存在就直接返回，不需要执行方法真正的逻辑～ 四，日志打印","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/framework/spring/core/aop/%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"应用场景"}],["meta",{"property":"og:description","content":"应用场景 aop 称为是面向切面编程，而他的 aop 原理呢就是：在执行某些代码之前执行另外的代码，是程序变的灵活，扩展性更灵活，可以随意的删除和添加某些功能！ 一，性能统计／计数 将与业务无关的代码，使用 AOP 拦截他们。 二，事务处理 调用方法前开启事务， 调用方法后提交关闭事务 三，缓存处理 简单的＂方法缓存＂可以把＂方法名－参数＂作为 Key，拦截器拦截方法根据＂方法名－参数＂去缓存系统查询，如果存在就直接返回，不需要执行方法真正的逻辑～ 四，日志打印"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-05-17T10:10:52.000Z"}],["meta",{"property":"article:author","content":"David Liu"}],["meta",{"property":"article:modified_time","content":"2023-05-17T10:10:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"应用场景\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-17T10:10:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[],"git":{"createdTime":1684318252000,"updatedTime":1684318252000,"contributors":[{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":1.36,"words":408},"filePathRelative":"se/framework/spring/core/aop/应用场景.md","localizedDate":"May 17, 2023","excerpt":"<h1> 应用场景</h1>\\n<p>aop 称为是面向切面编程，而他的 aop 原理呢就是：在执行某些代码之前执行另外的代码，是程序变的灵活，扩展性更灵活，可以随意的删除和添加某些功能！</p>\\n<p>一，性能统计／计数</p>\\n<p>将与业务无关的代码，使用 AOP 拦截他们。</p>\\n<p>二，事务处理</p>\\n<p>调用方法前开启事务， 调用方法后提交关闭事务</p>\\n<p>三，缓存处理</p>\\n<p>简单的＂方法缓存＂可以把＂方法名－参数＂作为 Key，拦截器拦截方法根据＂方法名－参数＂去缓存系统查询，如果存在就直接返回，不需要执行方法真正的逻辑～</p>\\n<p>四，日志打印</p>\\n","autoDesc":true}`);export{e as data};
