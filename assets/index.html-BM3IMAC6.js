import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,d as t,o as n}from"./app-CrF8c6p-.js";const p={};function o(a,i){return n(),l("div",null,i[0]||(i[0]=[t('<h1 id="代码质量" tabindex="-1"><a class="header-anchor" href="#代码质量"><span>代码质量</span></a></h1><p>也称 Coding Style</p><p>优化的逻辑：</p><ol><li>先想暴力的方法</li><li>看哪里有地方是浪费的</li></ol><h4 id="优秀的-coding-quality" tabindex="-1"><a class="header-anchor" href="#优秀的-coding-quality"><span>优秀的 Coding Quality</span></a></h4><ol><li><p>bug free</p></li><li><p>有边界检测和异常处理</p></li><li><p>代码风格：命名规范、空格、空行</p><ol><li><p>每一个逻辑 Part 之间一个空行划分</p><p>如异常判断、主体逻辑、结果返回，这些part之间一个分行</p></li><li><p>变量命名：全称，1-2个单词，小驼峰</p></li><li><p>避免重复代码</p><p>泄露没有工程经验</p></li><li><p>用不到的变量用_来命名</p></li><li><p>尽可能避免全局变量</p></li><li><p>缩进</p><ol><li>java是4个</li></ol></li><li><p>空格</p><ol><li>运算符前后要有</li><li>逗号、分号后面有</li></ol></li></ol></li></ol><blockquote><p>写Python能大概减少10分钟的时间，如果是面试不限制语言的话，可以写Python</p></blockquote><h3 id="独孤九剑-总决式" tabindex="-1"><a class="header-anchor" href="#独孤九剑-总决式"><span>独孤九剑 - 总决式</span></a></h3><p>想做到 bug free 最重要的是优化code Quality</p><p>单元运算符：--, ++, !</p><p>多用 continue 少用 else：减少大段代码的缩进</p><p>减少 else，如果前面的if里面执行了return或者continue、break等，后面就不需要else if，直接普通的if，最后不需要else，直接普通的xxx</p><p>最好把嵌套式的改成并列的：好懂得多</p><p>减少typo：拼写错误</p>',14)]))}const c=e(p,[["render",o],["__file","index.html.vue"]]),s=JSON.parse(`{"path":"/algo/framework/quality/","title":"代码质量","lang":"en-US","frontmatter":{"description":"代码质量 也称 Coding Style 优化的逻辑： 先想暴力的方法 看哪里有地方是浪费的 优秀的 Coding Quality bug free 有边界检测和异常处理 代码风格：命名规范、空格、空行 每一个逻辑 Part 之间一个空行划分 如异常判断、主体逻辑、结果返回，这些part之间一个分行 变量命名：全称，1-2个单词，小驼峰 避免重复代码 ...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/algo/framework/quality/"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"代码质量"}],["meta",{"property":"og:description","content":"代码质量 也称 Coding Style 优化的逻辑： 先想暴力的方法 看哪里有地方是浪费的 优秀的 Coding Quality bug free 有边界检测和异常处理 代码风格：命名规范、空格、空行 每一个逻辑 Part 之间一个空行划分 如异常判断、主体逻辑、结果返回，这些part之间一个分行 变量命名：全称，1-2个单词，小驼峰 避免重复代码 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-22T03:05:37.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-22T03:05:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"代码质量\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-22T03:05:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":3,"title":"独孤九剑 - 总决式","slug":"独孤九剑-总决式","link":"#独孤九剑-总决式","children":[]}],"git":{"createdTime":1732244737000,"updatedTime":1732244737000,"contributors":[{"name":"David Liu","email":"liudawei@seas.upenn.edu","commits":1}]},"readingTime":{"minutes":1.06,"words":319},"filePathRelative":"algo/framework/quality/README.md","localizedDate":"November 22, 2024","excerpt":"\\n<p>也称 Coding Style</p>\\n<p>优化的逻辑：</p>\\n<ol>\\n<li>先想暴力的方法</li>\\n<li>看哪里有地方是浪费的</li>\\n</ol>\\n<h4>优秀的 Coding Quality</h4>\\n<ol>\\n<li>\\n<p>bug free</p>\\n</li>\\n<li>\\n<p>有边界检测和异常处理</p>\\n</li>\\n<li>\\n<p>代码风格：命名规范、空格、空行</p>\\n<ol>\\n<li>\\n<p>每一个逻辑 Part 之间一个空行划分</p>\\n<p>如异常判断、主体逻辑、结果返回，这些part之间一个分行</p>\\n</li>\\n<li>\\n<p>变量命名：全称，1-2个单词，小驼峰</p>\\n</li>\\n<li>\\n<p>避免重复代码</p>\\n<p>泄露没有工程经验</p>\\n</li>\\n<li>\\n<p>用不到的变量用_来命名</p>\\n</li>\\n<li>\\n<p>尽可能避免全局变量</p>\\n</li>\\n<li>\\n<p>缩进</p>\\n<ol>\\n<li>java是4个</li>\\n</ol>\\n</li>\\n<li>\\n<p>空格</p>\\n<ol>\\n<li>运算符前后要有</li>\\n<li>逗号、分号后面有</li>\\n</ol>\\n</li>\\n</ol>\\n</li>\\n</ol>","autoDesc":true}`);export{c as comp,s as data};
