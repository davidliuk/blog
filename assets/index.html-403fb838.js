const e=JSON.parse(`{"key":"v-3372119a","path":"/cs/middleware/rabbitmq/","title":"","lang":"en-US","frontmatter":{"description":"基本概念 rabbitmq有哪些重要角色？ 生产者：消息的创建者，负责创建和推送数据到消息服务器 消费者：消息的接收方，用于处理数据和确认消息 代理：就是RabbitMQ本身，用于扮演快递的角色，本身并不生产消息 rabbitmq有哪些重要组件？ ConnectionFactory(连接管理器)：应用程序与RabbitMQ之间建立连接的管理器 BrokerBroker是RabbitMQ的核心组件，它接收来自生产者的消息并将其路由到消费者。Broker还负责管理队列、交换机和绑定等对象。RabbitMQ Broker可以在单个节点上运行，也可以在多个节点上运行以实现高可用性和负载均衡。 Channel(信道)：消息推送使用的通道 Exchange(交换器)：用于接受、分配消息 Queue(队列)：用于存储生产者的消息 RoutingKey(路由键)：生产者将消息发送给交换器的时候，会指定一个RoutingKey,用来指定这个消息的路由规则，这个RoutingKey需要与交换器类型和绑定键(BindingKey)联合使用才能最终生效。 BindKey(绑定键)：用于把交换器的消息绑定到队列上","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/cs/middleware/rabbitmq/"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:description","content":"基本概念 rabbitmq有哪些重要角色？ 生产者：消息的创建者，负责创建和推送数据到消息服务器 消费者：消息的接收方，用于处理数据和确认消息 代理：就是RabbitMQ本身，用于扮演快递的角色，本身并不生产消息 rabbitmq有哪些重要组件？ ConnectionFactory(连接管理器)：应用程序与RabbitMQ之间建立连接的管理器 BrokerBroker是RabbitMQ的核心组件，它接收来自生产者的消息并将其路由到消费者。Broker还负责管理队列、交换机和绑定等对象。RabbitMQ Broker可以在单个节点上运行，也可以在多个节点上运行以实现高可用性和负载均衡。 Channel(信道)：消息推送使用的通道 Exchange(交换器)：用于接受、分配消息 Queue(队列)：用于存储生产者的消息 RoutingKey(路由键)：生产者将消息发送给交换器的时候，会指定一个RoutingKey,用来指定这个消息的路由规则，这个RoutingKey需要与交换器类型和绑定键(BindingKey)联合使用才能最终生效。 BindKey(绑定键)：用于把交换器的消息绑定到队列上"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-05-17T10:10:52.000Z"}],["meta",{"property":"article:author","content":"David Liu"}],["meta",{"property":"article:modified_time","content":"2023-05-17T10:10:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-17T10:10:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":2,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[{"level":3,"title":"rabbitmq有哪些重要角色？","slug":"rabbitmq有哪些重要角色","link":"#rabbitmq有哪些重要角色","children":[]},{"level":3,"title":"rabbitmq有哪些重要组件？","slug":"rabbitmq有哪些重要组件","link":"#rabbitmq有哪些重要组件","children":[]}]},{"level":2,"title":"基本操作","slug":"基本操作","link":"#基本操作","children":[]},{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"流程","slug":"流程","link":"#流程","children":[]},{"level":2,"title":"AMQP","slug":"amqp","link":"#amqp","children":[]}],"git":{"createdTime":1684318252000,"updatedTime":1684318252000,"contributors":[{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":1}]},"readingTime":{"minutes":1.8,"words":539},"filePathRelative":"cs/middleware/rabbitmq/README.md","localizedDate":"May 17, 2023","excerpt":"<h2> 基本概念</h2>\\n<h3> rabbitmq有哪些重要角色？</h3>\\n<ul>\\n<li>生产者：消息的创建者，负责创建和推送数据到消息服务器</li>\\n<li>消费者：消息的接收方，用于处理数据和确认消息</li>\\n<li>代理：就是RabbitMQ本身，用于扮演快递的角色，本身并不生产消息</li>\\n</ul>\\n<h3> rabbitmq有哪些重要组件？</h3>\\n<ul>\\n<li>ConnectionFactory(连接管理器)：应用程序与RabbitMQ之间建立连接的管理器</li>\\n<li>BrokerBroker是RabbitMQ的核心组件，它接收来自生产者的消息并将其路由到消费者。Broker还负责管理队列、交换机和绑定等对象。RabbitMQ Broker可以在单个节点上运行，也可以在多个节点上运行以实现高可用性和负载均衡。</li>\\n<li>Channel(信道)：消息推送使用的通道</li>\\n<li>Exchange(交换器)：用于接受、分配消息</li>\\n<li>Queue(队列)：用于存储生产者的消息</li>\\n<li>RoutingKey(路由键)：生产者将消息发送给交换器的时候，会指定一个RoutingKey,用来指定这个消息的路由规则，这个RoutingKey需要与交换器类型和绑定键(BindingKey)联合使用才能最终生效。</li>\\n<li>BindKey(绑定键)：用于把交换器的消息绑定到队列上</li>\\n</ul>","autoDesc":true}`);export{e as data};
