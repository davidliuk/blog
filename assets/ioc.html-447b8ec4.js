const e=JSON.parse(`{"key":"v-e85ab00a","path":"/se/framework/spring/ioc/ioc.html","title":"IoC","lang":"en-US","frontmatter":{"description":"IoC IoC 思想 Spring IoC 的了解 IoC（Inversion of Control:控制反转） 是一种设计思想，而不是一个具体的技术实现。IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。不过， IoC 并非 Spring 特有，在其他语言中也有应用。IoC 容器是 Spring 用来实现 IoC 的载体， IoC 容器实际上就是个 Map（key，value）,Map 中存放的是各种对象。 IoC 最常见以及最合理的实现方式叫做依赖注入（Dependency Injection，简称 DI）。","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/se/framework/spring/ioc/ioc.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"IoC"}],["meta",{"property":"og:description","content":"IoC IoC 思想 Spring IoC 的了解 IoC（Inversion of Control:控制反转） 是一种设计思想，而不是一个具体的技术实现。IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。不过， IoC 并非 Spring 特有，在其他语言中也有应用。IoC 容器是 Spring 用来实现 IoC 的载体， IoC 容器实际上就是个 Map（key，value）,Map 中存放的是各种对象。 IoC 最常见以及最合理的实现方式叫做依赖注入（Dependency Injection，简称 DI）。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-04-03T03:29:06.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-04-03T03:29:06.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://davidliuk.github.io/blog/blog/zh/se/framework/spring/ioc/ioc.html"}]]},"headers":[{"level":2,"title":"IoC 思想","slug":"ioc-思想","link":"#ioc-思想","children":[{"level":3,"title":"Spring IoC 的了解","slug":"spring-ioc-的了解","link":"#spring-ioc-的了解","children":[]}]},{"level":2,"title":"Bean","slug":"bean","link":"#bean","children":[{"level":3,"title":"将一个类声明为 Bean 的注解有哪些?","slug":"将一个类声明为-bean-的注解有哪些","link":"#将一个类声明为-bean-的注解有哪些","children":[]},{"level":3,"title":"@Component 和 @Bean 的区别是什么？","slug":"component-和-bean-的区别是什么","link":"#component-和-bean-的区别是什么","children":[]},{"level":3,"title":"注入 Bean 的注解有哪些？","slug":"注入-bean-的注解有哪些","link":"#注入-bean-的注解有哪些","children":[]},{"level":3,"title":"单例 Bean 的线程安全问题了解吗？","slug":"单例-bean-的线程安全问题了解吗","link":"#单例-bean-的线程安全问题了解吗","children":[]},{"level":3,"title":"源码","slug":"源码","link":"#源码","children":[]}]},{"level":2,"title":"自动装配","slug":"自动装配","link":"#自动装配","children":[]},{"level":2,"title":"IoC 容器","slug":"ioc-容器","link":"#ioc-容器","children":[{"level":3,"title":"BeanFactory 和 ApplicationContext 的区别","slug":"beanfactory-和-applicationcontext-的区别","link":"#beanfactory-和-applicationcontext-的区别","children":[]}]}],"git":{"createdTime":1680090419000,"updatedTime":1680492546000,"contributors":[{"name":"davidliuk","email":"l729641074@163.com","commits":2}]},"readingTime":{"minutes":7.05,"words":2115},"localizedDate":"March 29, 2023","filePathRelative":"se/framework/spring/ioc/ioc.md","excerpt":"<h1> IoC</h1>\\n<h2> IoC 思想</h2>\\n<h3> Spring IoC 的了解</h3>\\n<p><strong>IoC（Inversion of Control:控制反转）</strong> 是一种设计思想，而不是一个具体的技术实现。IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。不过， IoC 并非 Spring 特有，在其他语言中也有应用。<strong>IoC 容器是 Spring 用来实现 IoC 的载体， IoC 容器实际上就是个 Map（key，value）,Map 中存放的是各种对象。</strong></p>\\n<p>IoC 最常见以及最合理的实现方式叫做依赖注入（Dependency Injection，简称 DI）。</p>","autoDesc":true}`);export{e as data};
