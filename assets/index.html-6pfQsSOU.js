import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as p,o as l}from"./app-B6aCd_WP.js";const a={};function n(o,e){return l(),i("div",null,e[0]||(e[0]=[p('<h1 id="搜索" tabindex="-1"><a class="header-anchor" href="#搜索"><span>搜索</span></a></h1><p>搜索的分类：</p><ul><li>FOR 循环</li><li>DFS 深搜</li><li>BFS 广搜</li></ul><h2 id="对比" tabindex="-1"><a class="header-anchor" href="#对比"><span>对比</span></a></h2><h3 id="dfs对bfs优势" tabindex="-1"><a class="header-anchor" href="#dfs对bfs优势"><span>DFS对BFS优势</span></a></h3><ol><li><p>后序传值</p><p>DFS专属后序位置，可以让父收到子传的值</p></li><li><p>先序回溯</p><p>DFS优点，可以节省空间</p></li><li><p>宽树搜索</p><p>空间复杂度对比：</p><p>BFS：树的最大宽度</p><p>DFS：树的最大深度</p><p>宽树搜索，必须DFS</p></li></ol><p>也就是说在这两种特定场景下只能用DFS。那既然BFS这么弱，我们还要BFS有什么用呢？请问何种数据结构的搜索必须要BFS呢？BFS的搜索过程不像DFS，DFS的栈对使用者是不可见的，但BFS的队列却是可见的，请问这种可见性带来了什么样的好处，请谈谈你的想法？</p><h3 id="bfs对dfs优势" tabindex="-1"><a class="header-anchor" href="#bfs对dfs优势"><span>BFS对DFS优势</span></a></h3><ol><li>最短路径</li><li>拓扑排序</li></ol><hr><ol><li><p>请问根据你所实现栈模拟代码，谈一下为什么编程语言要有递归这个功能，如果没有麻烦的点在哪里？</p><p>如果显示的实现递归，需要手动模拟栈来维护每个状态节点的信息，较为繁琐，编程语言实现的递归有利于简化操作。</p></li><li><p>为什么DFS是运行时栈，而BFS是等待队列呢？</p><p>DFS：运行时栈 → 入栈代表开始执行，出栈代表执行完毕 → 先序（入栈） + 后序（出栈）</p><p>BFS：等待队列 → 入队代表已经访问完毕，出队代表开始扩展邻接 → 先序</p></li><li><p>为什么DFS支持先序和后序、而BFS仅支持先序？</p><p>DFS的入栈顺序可以进行先序传值，DFS的出栈时候可以进行后序传值</p><p>BFS只有在出队的时候进行传值</p></li></ol>',11)]))}const F=t(a,[["render",n],["__file","index.html.vue"]]),S=JSON.parse(`{"path":"/algo/framework/search/","title":"搜索","lang":"en-US","frontmatter":{"description":"搜索 搜索的分类： FOR 循环 DFS 深搜 BFS 广搜 对比 DFS对BFS优势 后序传值 DFS专属后序位置，可以让父收到子传的值 先序回溯 DFS优点，可以节省空间 宽树搜索 空间复杂度对比： BFS：树的最大宽度 DFS：树的最大深度 宽树搜索，必须DFS 也就是说在这两种特定场景下只能用DFS。那既然BFS这么弱，我们还要BFS有什么用呢...","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/algo/framework/search/"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"搜索"}],["meta",{"property":"og:description","content":"搜索 搜索的分类： FOR 循环 DFS 深搜 BFS 广搜 对比 DFS对BFS优势 后序传值 DFS专属后序位置，可以让父收到子传的值 先序回溯 DFS优点，可以节省空间 宽树搜索 空间复杂度对比： BFS：树的最大宽度 DFS：树的最大深度 宽树搜索，必须DFS 也就是说在这两种特定场景下只能用DFS。那既然BFS这么弱，我们还要BFS有什么用呢..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-22T03:05:37.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-22T03:05:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"搜索\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-22T03:05:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":2,"title":"对比","slug":"对比","link":"#对比","children":[{"level":3,"title":"DFS对BFS优势","slug":"dfs对bfs优势","link":"#dfs对bfs优势","children":[]},{"level":3,"title":"BFS对DFS优势","slug":"bfs对dfs优势","link":"#bfs对dfs优势","children":[]}]}],"git":{"createdTime":1732244737000,"updatedTime":1732244737000,"contributors":[{"name":"David Liu","email":"liudawei@seas.upenn.edu","commits":1}]},"readingTime":{"minutes":1.45,"words":436},"filePathRelative":"algo/framework/search/README.md","localizedDate":"November 22, 2024","excerpt":"\\n<p>搜索的分类：</p>\\n<ul>\\n<li>FOR 循环</li>\\n<li>DFS 深搜</li>\\n<li>BFS 广搜</li>\\n</ul>\\n<h2>对比</h2>\\n<h3>DFS对BFS优势</h3>\\n<ol>\\n<li>\\n<p>后序传值</p>\\n<p>DFS专属后序位置，可以让父收到子传的值</p>\\n</li>\\n<li>\\n<p>先序回溯</p>\\n<p>DFS优点，可以节省空间</p>\\n</li>\\n<li>\\n<p>宽树搜索</p>\\n<p>空间复杂度对比：</p>\\n<p>BFS：树的最大宽度</p>\\n<p>DFS：树的最大深度</p>\\n<p>宽树搜索，必须DFS</p>\\n</li>\\n</ol>","autoDesc":true}`);export{F as comp,S as data};
