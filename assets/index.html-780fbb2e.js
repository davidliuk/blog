import{_ as e,V as i,W as a,a0 as l}from"./framework-705b829b.js";const d={},s=l('<h1 id="搜索" tabindex="-1"><a class="header-anchor" href="#搜索" aria-hidden="true">#</a> 搜索</h1><p>搜索的分类：</p><ul><li>FOR循环</li><li>DFS深搜</li><li>BFS广搜</li></ul><h3 id="dfs对bfs优势" tabindex="-1"><a class="header-anchor" href="#dfs对bfs优势" aria-hidden="true">#</a> DFS对BFS优势</h3><ol><li><p>后序传值</p><p>DFS专属后序位置，可以让父收到子传的值</p></li><li><p>先序回溯</p><p>DFS优点，可以节省空间</p></li><li><p>宽树搜索</p><p>空间复杂度对比：</p><p>BFS：树的最大宽度</p><p>DFS：树的最大深度</p><p>宽树搜索，必须DFS</p></li></ol><p>也就是说在这两种特定场景下只能用DFS。那既然BFS这么弱，我们还要BFS有什么用呢？请问何种数据结构的搜索必须要BFS呢？BFS的搜索过程不像DFS，DFS的栈对使用者是不可见的，但BFS的队列却是可见的，请问这种可见性带来了什么样的好处，请谈谈你的想法？</p><h3 id="bfs对dfs优势" tabindex="-1"><a class="header-anchor" href="#bfs对dfs优势" aria-hidden="true">#</a> BFS对DFS优势</h3><ol><li>最短路径</li><li>拓扑排序</li></ol>',8),r=[s];function p(t,n){return i(),a("div",null,r)}const c=e(d,[["render",p],["__file","index.html.vue"]]);export{c as default};
