import{_ as e,V as i,W as a,a0 as l}from"./framework-705b829b.js";const t={},n=l('<h1 id="批处理优化" tabindex="-1"><a class="header-anchor" href="#批处理优化" aria-hidden="true">#</a> 批处理优化</h1><p>pipeline：单机模式下的批处理</p><h3 id="mset" tabindex="-1"><a class="header-anchor" href="#mset" aria-hidden="true">#</a> mset</h3><ul><li>mset</li><li>hmset</li></ul><p>注意事项：</p><ul><li>不要在一次批处理中传输太多命令，否则单次命令占用带宽过多，会导致网络阻塞</li><li>MSET虽然可以批处理，但是却只能操作部分数据类型，因此如果有对复杂数据类型的批处理需要，建议使用Pipeline功能：</li></ul><h3 id="管道-pipeline" tabindex="-1"><a class="header-anchor" href="#管道-pipeline" aria-hidden="true">#</a> 管道 Pipeline</h3><p>使用<strong>管道技术可以解决多个命令执行时的网络等待</strong>，它是把多个命令整合到一起发送给服务器端处理之后统一返回给客户端，这样就免去了每条命令执行后都要等待的情况，从而有效地提高了程序的执行效率。</p><p>但使用管道技术也要注意避免发送的命令过大，或管道内的数据太多而导致的网络阻塞。</p><p>要注意的是，管道技术本质上是客户端提供的功能，而非 Redis 服务器端的功能。</p><p>注意事项：</p><ul><li>批处理时不建议一次携带太多命令</li><li>Pipeline的多个命令之间不具备原子性</li></ul>',12),r=[n];function s(p,h){return i(),a("div",null,r)}const c=e(t,[["render",s],["__file","批处理优化.html.vue"]]);export{c as default};
