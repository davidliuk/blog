const n=JSON.parse(`{"key":"v-06cc4f6b","path":"/cs/algo/summary/optimise/decrease-conquer/binary/dual-pointer/window/","title":"滑窗双指针","lang":"en-US","frontmatter":{"description":"滑窗双指针 核心：维护窗口内部的组成的一个性质，使该窗口复合一个给定的条件，如窗口内元素的和小于x 核心模板 window始终维护[left, right]之间的一个性质 void windowPtr( int start, int end, BiPredicate&lt;Integer, Integer&gt; isValid, IntConsumer in, IntConsumer out, BiConsumer&lt;Integer, Integer&gt; prev, BiConsumer&lt;Integer, Integer&gt; next ) { // [left, right]版本，这种模板也方便处理单纯的数对问题 int left = start, right = start; while (right &lt; end) { in.accept(right); while (left &lt;= right &amp;&amp; !isValid.test(left, right)) { if (next != null) { next.accept(left, right); } out.accept(left); left++; } if (prev != null) { prev.accept(left, right); } right++; } }","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/cs/algo/summary/optimise/decrease-conquer/binary/dual-pointer/window/"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"滑窗双指针"}],["meta",{"property":"og:description","content":"滑窗双指针 核心：维护窗口内部的组成的一个性质，使该窗口复合一个给定的条件，如窗口内元素的和小于x 核心模板 window始终维护[left, right]之间的一个性质 void windowPtr( int start, int end, BiPredicate&lt;Integer, Integer&gt; isValid, IntConsumer in, IntConsumer out, BiConsumer&lt;Integer, Integer&gt; prev, BiConsumer&lt;Integer, Integer&gt; next ) { // [left, right]版本，这种模板也方便处理单纯的数对问题 int left = start, right = start; while (right &lt; end) { in.accept(right); while (left &lt;= right &amp;&amp; !isValid.test(left, right)) { if (next != null) { next.accept(left, right); } out.accept(left); left++; } if (prev != null) { prev.accept(left, right); } right++; } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-02-27T13:30:02.000Z"}],["meta",{"property":"article:author","content":"David Liu"}],["meta",{"property":"article:modified_time","content":"2023-02-27T13:30:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"滑窗双指针\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-27T13:30:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":3,"title":"核心模板","slug":"核心模板","link":"#核心模板","children":[]}],"git":{"createdTime":1675259084000,"updatedTime":1677504602000,"contributors":[{"name":"刘大维","email":"davidliu@liudaweideMacBook-Pro.local","commits":2}]},"readingTime":{"minutes":0.46,"words":139},"filePathRelative":"cs/algo/summary/optimise/decrease-conquer/binary/dual-pointer/window/README.md","localizedDate":"February 1, 2023","excerpt":"<h1> 滑窗双指针</h1>\\n<p>核心：维护窗口内部的组成的一个性质，使该窗口复合一个给定的条件，如窗口内元素的和小于x</p>\\n<h3> 核心模板</h3>\\n<p>window始终维护<code>[left, right]</code>之间的一个性质</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">void</span> <span class=\\"token function\\">windowPtr</span><span class=\\"token punctuation\\">(</span>\\n    <span class=\\"token keyword\\">int</span> start<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> end<span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token class-name\\">BiPredicate</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span> isValid<span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token class-name\\">IntConsumer</span> in<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">IntConsumer</span> out<span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token class-name\\">BiConsumer</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span> prev<span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token class-name\\">BiConsumer</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span> next\\n<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// [left, right]版本，这种模板也方便处理单纯的数对问题</span>\\n    <span class=\\"token keyword\\">int</span> left <span class=\\"token operator\\">=</span> start<span class=\\"token punctuation\\">,</span> right <span class=\\"token operator\\">=</span> start<span class=\\"token punctuation\\">;</span> \\n    <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>right <span class=\\"token operator\\">&lt;</span> end<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        in<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">accept</span><span class=\\"token punctuation\\">(</span>right<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>left <span class=\\"token operator\\">&lt;=</span> right <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token operator\\">!</span>isValid<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span>left<span class=\\"token punctuation\\">,</span> right<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>next <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                next<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">accept</span><span class=\\"token punctuation\\">(</span>left<span class=\\"token punctuation\\">,</span> right<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">accept</span><span class=\\"token punctuation\\">(</span>left<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            left<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>prev <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            prev<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">accept</span><span class=\\"token punctuation\\">(</span>left<span class=\\"token punctuation\\">,</span> right<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        right<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
