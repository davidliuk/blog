import{_ as s,V as a,W as n,Z as e}from"./framework-e5d7a6b2.js";const t={},o=e(`<h1 id="mybatis" tabindex="-1"><a class="header-anchor" href="#mybatis" aria-hidden="true">#</a> MyBatis</h1><p>动态SQL</p><p>缓存</p><p>逆向工程</p><p>DML不需要写resultType</p><p>resultType：表的每一行的数据的类型</p><h2 id="动态sql" tabindex="-1"><a class="header-anchor" href="#动态sql" aria-hidden="true">#</a> 动态SQL</h2><p>静态SQL：结构恒定的，虽然可以传入参数，但是结构不会变</p><p>动态SQL：语句的结构会变化，如批量添加、批量删除，可以通过循环标签</p><h3 id="foreach-标签" tabindex="-1"><a class="header-anchor" href="#foreach-标签" aria-hidden="true">#</a> foreach 标签</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>INSTERT <span class="token keyword">INTO</span> t_student<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> major<span class="token punctuation">,</span> birthdate<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span>
<span class="token operator">&lt;</span>foreach collection<span class="token operator">=</span><span class="token string">&quot;list&quot;</span> item<span class="token operator">=</span><span class="token string">&quot;stu&quot;</span> separator<span class="token operator">=</span><span class="token string">&quot;,&quot;</span><span class="token operator">&gt;</span>
	<span class="token punctuation">(</span><span class="token comment">#{stu.name},#{stu.age},#{stu.major},#{stu.birthdate})</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>foreach<span class="token operator">&gt;</span>

<span class="token keyword">delete</span> <span class="token keyword">FROM</span> t_student
<span class="token keyword">WHERE</span> id <span class="token operator">IN</span>
<span class="token operator">&lt;</span>foreach collection<span class="token operator">=</span><span class="token string">&quot;list&quot;</span> item<span class="token operator">=</span><span class="token string">&quot;id&quot;</span> separator<span class="token operator">=</span><span class="token string">&quot;,&quot;</span> <span class="token keyword">open</span><span class="token operator">=</span><span class="token string">&quot;(&quot;</span> <span class="token keyword">close</span><span class="token operator">=</span><span class="token string">&quot;)&quot;</span><span class="token operator">&gt;</span>
	<span class="token comment">#{id}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>foreach<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),p=[o];function r(l,c){return a(),n("div",null,p)}const d=s(t,[["render",r],["__file","2.html.vue"]]);export{d as default};
