import{_ as e,V as t,W as c,a0 as o}from"./framework-705b829b.js";const a={},n=o('<h1 id="阻塞队列" tabindex="-1"><a class="header-anchor" href="#阻塞队列" aria-hidden="true">#</a> 阻塞队列</h1><p>blocked queue双向链表</p><p>waiting queue单向链表，0-多个</p><p>在等待队列里面的线程获取锁是有顺序的，外面的线程就是无序的可以直接插队先执行</p><p>tryLock(时间)这种会尊从创建锁的时候的公平非公平</p><p>无参的tryLock，不管创建的锁是什么样，他都是非公平执行</p><p>条件变量Condition</p><p>然后就会进入等待队列</p><p>Lock唤醒waiting queue的线程时，会放入block queue的尾部</p><p>synchronized唤醒waiting queue的线程时，到blockde queue中优先级更高一些</p>',10),p=[n];function i(r,u){return t(),c("div",null,p)}const s=e(a,[["render",i],["__file","阻塞.html.vue"]]);export{s as default};
