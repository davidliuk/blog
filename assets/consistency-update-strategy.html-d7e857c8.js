const t=JSON.parse(`{"key":"v-72755b99","path":"/cs/database/redis/practice/problem/consistency-update-strategy.html","title":"一致性问题：缓存更新策略","lang":"en-US","frontmatter":{"description":"一致性问题：缓存更新策略 概览 内存淘汰 超时剔除 主动更新 说明 不用自己维护，利用 Redis 内存淘汰机制，当内存不足时自动淘汰部分数据。下次查询时更新缓存。 给缓存数据添加 TTL 时间，到期后自动删除缓存。下次查询时更新缓存。 编写业务逻辑，再修改数据库的同时，更新缓存 一致性 差 一般 好 维护成本 无 低 高","head":[["meta",{"property":"og:url","content":"https://davidliuk.github.io/blog/blog/cs/database/redis/practice/problem/consistency-update-strategy.html"}],["meta",{"property":"og:site_name","content":"David's Blog"}],["meta",{"property":"og:title","content":"一致性问题：缓存更新策略"}],["meta",{"property":"og:description","content":"一致性问题：缓存更新策略 概览 内存淘汰 超时剔除 主动更新 说明 不用自己维护，利用 Redis 内存淘汰机制，当内存不足时自动淘汰部分数据。下次查询时更新缓存。 给缓存数据添加 TTL 时间，到期后自动删除缓存。下次查询时更新缓存。 编写业务逻辑，再修改数据库的同时，更新缓存 一致性 差 一般 好 维护成本 无 低 高"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-03-29T11:46:59.000Z"}],["meta",{"property":"article:author","content":"David Liu"}],["meta",{"property":"article:modified_time","content":"2023-03-29T11:46:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"一致性问题：缓存更新策略\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-29T11:46:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"David Liu\\",\\"url\\":\\"https://github.com/davidliuk\\"}]}"]]},"headers":[{"level":2,"title":"概览","slug":"概览","link":"#概览","children":[]},{"level":2,"title":"主动更新策略","slug":"主动更新策略","link":"#主动更新策略","children":[{"level":3,"title":"Cache Aside Pattern","slug":"cache-aside-pattern","link":"#cache-aside-pattern","children":[]},{"level":3,"title":"Read/Write Through Pattern","slug":"read-write-through-pattern","link":"#read-write-through-pattern","children":[]},{"level":3,"title":"Write Behind Caching Pattern 写回","slug":"write-behind-caching-pattern-写回","link":"#write-behind-caching-pattern-写回","children":[]}]}],"git":{"createdTime":1679578424000,"updatedTime":1680090419000,"contributors":[{"name":"davidliuk","email":"l729641074@163.com","commits":2}]},"readingTime":{"minutes":3.25,"words":976},"filePathRelative":"cs/database/redis/practice/problem/consistency-update-strategy.md","localizedDate":"March 23, 2023","excerpt":"<h1> 一致性问题：缓存更新策略</h1>\\n<h2> 概览</h2>\\n<table>\\n<thead>\\n<tr>\\n<th></th>\\n<th>内存淘汰</th>\\n<th>超时剔除</th>\\n<th>主动更新</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>说明</td>\\n<td>不用自己维护，利用 Redis 内存淘汰机制，当内存不足时自动淘汰部分数据。下次查询时更新缓存。</td>\\n<td>给缓存数据添加 TTL 时间，到期后自动删除缓存。下次查询时更新缓存。</td>\\n<td>编写业务逻辑，再修改数据库的同时，更新缓存</td>\\n</tr>\\n<tr>\\n<td>一致性</td>\\n<td>差</td>\\n<td>一般</td>\\n<td>好</td>\\n</tr>\\n<tr>\\n<td>维护成本</td>\\n<td>无</td>\\n<td>低</td>\\n<td>高</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}`);export{t as data};
