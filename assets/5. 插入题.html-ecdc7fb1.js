import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as i,d as a}from"./app-9107e99b.js";const t={},o=a('<h1 id="句子插入题" tabindex="-1"><a class="header-anchor" href="#句子插入题" aria-hidden="true">#</a> 句子插入题</h1><p>句间关系</p><p>拆分待插入句</p><ul><li>分、从句信号词</li><li>标点符号</li><li>动词</li></ul><p>拆成前后两个部分，找核心的指代词或名词，然后在原文中找前后符合的对应。</p><h3 id="方式一-指代暗示" tabindex="-1"><a class="header-anchor" href="#方式一-指代暗示" aria-hidden="true">#</a> 方式一：指代暗示</h3><p>如果待插入句里面有 these, this, They, it 等代词，看指代内容是谁，那前一句一定有对应的成分</p><p>对应的方法，同指代题一样，只是反过来应用</p><h3 id="方式二-段落结构暗示" tabindex="-1"><a class="header-anchor" href="#方式二-段落结构暗示" aria-hidden="true">#</a> 方式二：段落结构暗示</h3><p>概述-&gt;细节</p><p>概述永远放在细节前，细节永远在概述之后</p><h3 id="方法三-逻辑关系暗示" tabindex="-1"><a class="header-anchor" href="#方法三-逻辑关系暗示" aria-hidden="true">#</a> 方法三：逻辑关系暗示</h3><p>转折：Yet, however,</p><p>因果：consequently</p><blockquote><p>先原因后结果</p></blockquote><p>总结：</p><ol><li>In conclusion</li><li>above all</li><li>To sum up</li><li>In summary</li><li>To conclude</li><li>All in all</li><li>Overall</li><li>Ultimately</li><li>To recap</li><li>In a nutshell</li><li>To put it simply</li></ol><p>总结选D</p>',18),r=[o];function n(h,c){return e(),i("div",null,r)}const d=l(t,[["render",n],["__file","5. 插入题.html.vue"]]);export{d as default};
