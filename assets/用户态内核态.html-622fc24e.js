import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as r,d as h}from"./app-9107e99b.js";const i={},d=h('<h1 id="内核态用户态" tabindex="-1"><a class="header-anchor" href="#内核态用户态" aria-hidden="true">#</a> 内核态用户态</h1><h2 id="一、操作系统需要两种cpu状态" tabindex="-1"><a class="header-anchor" href="#一、操作系统需要两种cpu状态" aria-hidden="true">#</a> 一、操作系统需要两种CPU状态</h2><p>内核态（Kernel Mode）：运行操作系统程序，操作硬件</p><p>用户态（User Mode）：运行用户程序</p><h2 id="二、指令划分" tabindex="-1"><a class="header-anchor" href="#二、指令划分" aria-hidden="true">#</a> 二、指令划分</h2><p>特权指令：只能由操作系统使用、用户程序不能使用的指令。 举例：启动I/O 内存清零 修改程序状态字 设置时钟 允许/禁止终端 停机</p><p>非特权指令：用户程序可以使用的指令。 举例：控制转移 算数运算 取数指令 <strong>访管指令</strong>（使用户程序从用户态陷入内核态）</p><h2 id="三、特权级别" tabindex="-1"><a class="header-anchor" href="#三、特权级别" aria-hidden="true">#</a> 三、特权级别</h2><p><strong>特权环：R0、R1、R2和R3</strong></p><p>R0相当于内核态，R3相当于用户态；</p><p>不同级别能够运行不同的指令集合；</p><h2 id="四、cpu状态之间的转换" tabindex="-1"><a class="header-anchor" href="#四、cpu状态之间的转换" aria-hidden="true">#</a> 四、CPU状态之间的转换</h2><p>**用户态---&gt;内核态：**唯一途径是通过中断、异常、陷入机制（访管指令）</p><p>**内核态---&gt;用户态：**设置程序状态字PSW</p><h2 id="五、内核态与用户态的区别" tabindex="-1"><a class="header-anchor" href="#五、内核态与用户态的区别" aria-hidden="true">#</a> 五、内核态与用户态的区别</h2><ul><li><p>内核态与用户态是操作系统的两种运行级别，当程序运行在3级特权级上时，就可以称之为运行在用户态。<strong>因为这是最低特权级，是普通的用户进程运行的特权级，大部分用户直接面对的程序都是运行在用户态；</strong></p></li><li><p>当程序运行在0级特权级上时，就可以称之为运行在内核态。</p></li><li><p>运行在用户态下的程序不能直接访问操作系统内核数据结构和程序。当我们在系统中执行一个程序时，大部分时间是运行在用户态下的，在其需要操作系统帮助完成某些它没有权力和能力完成的工作时就会切换到内核态（比如操作硬件）。</p></li><li><p>这两种状态的主要差别是</p><blockquote><ul><li>处于用户态执行时，进程所能访问的内存空间和对象受到限制，其所处于占有的处理器是可被抢占的</li><li>处于内核态执行时，则能访问所有的内存空间和对象，且所占有的处理器是不允许被抢占的。</li></ul></blockquote></li></ul><h2 id="六、通常来说-以下三种情况会导致用户态到内核态的切换" tabindex="-1"><a class="header-anchor" href="#六、通常来说-以下三种情况会导致用户态到内核态的切换" aria-hidden="true">#</a> 六、通常来说，以下三种情况会导致用户态到内核态的切换</h2><h3 id="_1、系统调用" tabindex="-1"><a class="header-anchor" href="#_1、系统调用" aria-hidden="true">#</a> 1、系统调用</h3><p><strong>这是用户态进程主动要求切换到内核态的一种方式</strong>，**用户态进程通过系统调用申请使用操作系统提供的服务程序完成工作。**比如前例中fork()实际上就是执行了一个创建新进程的系统调用。</p><p>而系统调用的机制其核心还是使用了操作系统为用户特别开放的一个中断来实现，例如Linux的int 80h中断。</p><p>用户程序通常调用库函数，由库函数再调用系统调用，因此有的库函数会使用户程序进入内核态（只要库函数中某处调用了系统调用），有的则不会。</p><h3 id="_2、异常" tabindex="-1"><a class="header-anchor" href="#_2、异常" aria-hidden="true">#</a> 2、异常</h3><p>当CPU在执行运行在用户态下的程序时，发生了某些事先不可知的异常，这时会触发由当前运行进程切换到处理此异常的内核相关程序中，也就转到了内核态，比如缺页异常。</p><h3 id="_3、外围设备的中断" tabindex="-1"><a class="header-anchor" href="#_3、外围设备的中断" aria-hidden="true">#</a> 3、外围设备的中断</h3><p><strong>当外围设备完成用户请求的操作后，会向CPU发出相应的中断信号</strong>，这时CPU会暂停执行下一条即将要执行的指令转而去执行与中断信号对应的处理程序，</p><p>如果先前执行的指令是用户态下的程序，那么这个转换的过程自然也就发生了由用户态到内核态的切换。比如硬盘读写操作完成，系统会切换到硬盘读写的中断处理程序中执行后续操作等。</p><p><strong>这3种方式是系统在运行时由用户态转到内核态的最主要方式，其中系统调用可以认为是用户进程主动发起的，异常和外围设备中断则是被动的。</strong></p>',27),n=[d];function t(p,o){return e(),r("div",null,n)}const l=a(i,[["render",t],["__file","用户态内核态.html.vue"]]);export{l as default};
